/****************************************************************************
**
** Namespace SHDocVw generated by dumpcpp from type library
** C:\Windows\SysWOW64\ieframe.dll
**
****************************************************************************/

#ifndef QAX_DUMPCPP_SHDOCVW_H
#define QAX_DUMPCPP_SHDOCVW_H

// Define this symbol to __declspec(dllexport) or __declspec(dllimport)
#ifndef SHDOCVW_EXPORT
#define SHDOCVW_EXPORT
#endif

#include <qaxobject.h>
#include <qaxwidget.h>
#include <qdatetime.h>
#include <qpixmap.h>

struct IDispatch;


// Referenced namespace

namespace SHDocVw {

    enum CommandStateChangeConstants {
        CSC_UPDATECOMMANDS      = -1,
        CSC_NAVIGATEFORWARD     = 1,
        CSC_NAVIGATEBACK        = 2
    };

    enum NewProcessCauseConstants {
        ProtectedModeRedirect   = 1
    };

    enum OLECMDEXECOPT {
        OLECMDEXECOPT_DODEFAULT = 0,
        OLECMDEXECOPT_PROMPTUSER= 1,
        OLECMDEXECOPT_DONTPROMPTUSER= 2,
        OLECMDEXECOPT_SHOWHELP  = 3
    };

    enum OLECMDF {
        OLECMDF_SUPPORTED       = 1,
        OLECMDF_ENABLED         = 2,
        OLECMDF_LATCHED         = 4,
        OLECMDF_NINCHED         = 8,
        OLECMDF_INVISIBLE       = 16,
        OLECMDF_DEFHIDEONCTXTMENU= 32
    };

    enum OLECMDID {
        OLECMDID_OPEN           = 1,
        OLECMDID_NEW            = 2,
        OLECMDID_SAVE           = 3,
        OLECMDID_SAVEAS         = 4,
        OLECMDID_SAVECOPYAS     = 5,
        OLECMDID_PRINT          = 6,
        OLECMDID_PRINTPREVIEW   = 7,
        OLECMDID_PAGESETUP      = 8,
        OLECMDID_SPELL          = 9,
        OLECMDID_PROPERTIES     = 10,
        OLECMDID_CUT            = 11,
        OLECMDID_COPY           = 12,
        OLECMDID_PASTE          = 13,
        OLECMDID_PASTESPECIAL   = 14,
        OLECMDID_UNDO           = 15,
        OLECMDID_REDO           = 16,
        OLECMDID_SELECTALL      = 17,
        OLECMDID_CLEARSELECTION = 18,
        OLECMDID_ZOOM           = 19,
        OLECMDID_GETZOOMRANGE   = 20,
        OLECMDID_UPDATECOMMANDS = 21,
        OLECMDID_REFRESH        = 22,
        OLECMDID_STOP           = 23,
        OLECMDID_HIDETOOLBARS   = 24,
        OLECMDID_SETPROGRESSMAX = 25,
        OLECMDID_SETPROGRESSPOS = 26,
        OLECMDID_SETPROGRESSTEXT= 27,
        OLECMDID_SETTITLE       = 28,
        OLECMDID_SETDOWNLOADSTATE= 29,
        OLECMDID_STOPDOWNLOAD   = 30,
        OLECMDID_ONTOOLBARACTIVATED= 31,
        OLECMDID_FIND           = 32,
        OLECMDID_DELETE         = 33,
        OLECMDID_HTTPEQUIV      = 34,
        OLECMDID_HTTPEQUIV_DONE = 35,
        OLECMDID_ENABLE_INTERACTION= 36,
        OLECMDID_ONUNLOAD       = 37,
        OLECMDID_PROPERTYBAG2   = 38,
        OLECMDID_PREREFRESH     = 39,
        OLECMDID_SHOWSCRIPTERROR= 40,
        OLECMDID_SHOWMESSAGE    = 41,
        OLECMDID_SHOWFIND       = 42,
        OLECMDID_SHOWPAGESETUP  = 43,
        OLECMDID_SHOWPRINT      = 44,
        OLECMDID_CLOSE          = 45,
        OLECMDID_ALLOWUILESSSAVEAS= 46,
        OLECMDID_DONTDOWNLOADCSS= 47,
        OLECMDID_UPDATEPAGESTATUS= 48,
        OLECMDID_PRINT2         = 49,
        OLECMDID_PRINTPREVIEW2  = 50,
        OLECMDID_SETPRINTTEMPLATE= 51,
        OLECMDID_GETPRINTTEMPLATE= 52,
        OLECMDID_PAGEACTIONBLOCKED= 55,
        OLECMDID_PAGEACTIONUIQUERY= 56,
        OLECMDID_FOCUSVIEWCONTROLS= 57,
        OLECMDID_FOCUSVIEWCONTROLSQUERY= 58,
        OLECMDID_SHOWPAGEACTIONMENU= 59,
        OLECMDID_ADDTRAVELENTRY = 60,
        OLECMDID_UPDATETRAVELENTRY= 61,
        OLECMDID_UPDATEBACKFORWARDSTATE= 62,
        OLECMDID_OPTICAL_ZOOM   = 63,
        OLECMDID_OPTICAL_GETZOOMRANGE= 64,
        OLECMDID_WINDOWSTATECHANGED= 65,
        OLECMDID_ACTIVEXINSTALLSCOPE= 66,
        OLECMDID_UPDATETRAVELENTRY_DATARECOVERY= 67,
        OLECMDID_SHOWTASKDLG    = 68,
        OLECMDID_POPSTATEEVENT  = 69,
        OLECMDID_VIEWPORT_MODE  = 70,
        OLECMDID_LAYOUT_VIEWPORT_WIDTH= 71,
        OLECMDID_VISUAL_VIEWPORT_EXCLUDE_BOTTOM= 72,
        OLECMDID_USER_OPTICAL_ZOOM= 73,
        OLECMDID_PAGEAVAILABLE  = 74,
        OLECMDID_GETUSERSCALABLE= 75,
        OLECMDID_UPDATE_CARET   = 76,
        OLECMDID_ENABLE_VISIBILITY= 77,
        OLECMDID_MEDIA_PLAYBACK = 78,
        OLECMDID_SETFAVICON     = 79,
        OLECMDID_SET_HOST_FULLSCREENMODE= 80,
        OLECMDID_EXITFULLSCREEN = 81,
        OLECMDID_SCROLLCOMPLETE = 82,
        OLECMDID_ONBEFOREUNLOAD = 83
    };

    enum SecureLockIconConstants {
        secureLockIconUnsecure  = 0,
        secureLockIconMixed     = 1,
        secureLockIconSecureUnknownBits= 2,
        secureLockIconSecure40Bit= 3,
        secureLockIconSecure56Bit= 4,
        secureLockIconSecureFortezza= 5,
        secureLockIconSecure128Bit= 6
    };

    enum ShellWindowFindWindowOptions {
        SWFO_NEEDDISPATCH       = 1,
        SWFO_INCLUDEPENDING     = 2,
        SWFO_COOKIEPASSED       = 4
    };

    enum ShellWindowTypeConstants {
        SWC_EXPLORER            = 0,
        SWC_BROWSER             = 1,
        SWC_3RDPARTY            = 2,
        SWC_CALLBACK            = 4,
        SWC_DESKTOP             = 8
    };

    enum tagREADYSTATE {
        READYSTATE_UNINITIALIZED= 0,
        READYSTATE_LOADING      = 1,
        READYSTATE_LOADED       = 2,
        READYSTATE_INTERACTIVE  = 3,
        READYSTATE_COMPLETE     = 4
    };

// forward declarations
    enum CommandStateChangeConstants;
    enum OLECMDID;
    enum OLECMDF;
    enum OLECMDEXECOPT;
    enum tagREADYSTATE;
    enum SecureLockIconConstants;
    enum NewProcessCauseConstants;
    enum ShellWindowTypeConstants;
    enum ShellWindowFindWindowOptions;
    enum CommandStateChangeConstants;
    enum OLECMDID;
    enum OLECMDF;
    enum OLECMDEXECOPT;
    enum tagREADYSTATE;
    enum SecureLockIconConstants;
    enum NewProcessCauseConstants;
    enum ShellWindowTypeConstants;
    enum ShellWindowFindWindowOptions;

class SHDOCVW_EXPORT IWebBrowser : public QAxObject
{
public:
    IWebBrowser(IDispatch *subobject = 0, QAxObject *parent = 0)
    : QAxObject((IUnknown*)subobject, parent)
    {
        internalRelease();
    }

    /*
    Property Application

    Returns the application automation object if accessible, this automation object otherwise..

    */
    inline IDispatch* Application() const; //Returns the value of Application

    /*
    Property Busy

    Query to see if something is still in progress.

    */
    inline bool Busy() const; //Returns the value of Busy

    /*
    Property Container

    Returns the container/parent automation object, if any.

    */
    inline IDispatch* Container() const; //Returns the value of Container

    /*
    Property Document

    Returns the active Document automation object, if any.

    */
    inline IDispatch* Document() const; //Returns the value of Document

    /*
    Property Height

    The vertical dimension (pixels) of the frame window/object.

    */
    inline int Height() const; //Returns the value of Height
    inline void SetHeight(int value); //Sets the value of the Height property

    /*
    Property Left

    The horizontal position (pixels) of the frame window relative to the screen/container.

    */
    inline int Left() const; //Returns the value of Left
    inline void SetLeft(int value); //Sets the value of the Left property

    /*
    Property LocationName

    Gets the short (UI-friendly) name of the URL/file currently viewed.

    */
    inline QString LocationName() const; //Returns the value of LocationName

    /*
    Property LocationURL

    Gets the full URL/path currently viewed.

    */
    inline QString LocationURL() const; //Returns the value of LocationURL

    /*
    Property Parent

    Returns the automation object of the container/parent if one exists or this automation object.

    */
    inline IDispatch* Parent() const; //Returns the value of Parent

    /*
    Property Top

    The vertical position (pixels) of the frame window relative to the screen/container.

    */
    inline int Top() const; //Returns the value of Top
    inline void SetTop(int value); //Sets the value of the Top property

    /*
    Property TopLevelContainer

    Returns True if this is the top level object.

    */
    inline bool TopLevelContainer() const; //Returns the value of TopLevelContainer

    /*
    Property Type

    Returns the type of the contained document object.

    */
    inline QString Type() const; //Returns the value of Type

    /*
    Property Width

    The horizontal dimension (pixels) of the frame window/object.

    */
    inline int Width() const; //Returns the value of Width
    inline void SetWidth(int value); //Sets the value of the Width property

    /*
    Method GoBack

    Navigates to the previous item in the history list.

    */
    inline void GoBack();

    /*
    Method GoForward

    Navigates to the next item in the history list.

    */
    inline void GoForward();

    /*
    Method GoHome

    Go home/start page.

    */
    inline void GoHome();

    /*
    Method GoSearch

    Go Search Page.

    */
    inline void GoSearch();

    /*
    Method Navigate

    Navigates to a URL or file.

    */
    inline void Navigate(const QString& URL);

    /*
    Method Navigate

    Navigates to a URL or file.

    */
    inline void Navigate(const QString& URL, QVariant& Flags);

    /*
    Method Navigate

    Navigates to a URL or file.

    */
    inline void Navigate(const QString& URL, QVariant& Flags, QVariant& TargetFrameName);

    /*
    Method Navigate

    Navigates to a URL or file.

    */
    inline void Navigate(const QString& URL, QVariant& Flags, QVariant& TargetFrameName, QVariant& PostData);

    /*
    Method Navigate

    Navigates to a URL or file.

    */
    inline void Navigate(const QString& URL, QVariant& Flags, QVariant& TargetFrameName, QVariant& PostData, QVariant& Headers);

    /*
    Method Refresh

    Refresh the currently viewed page.

    */
    inline void Refresh();

    /*
    Method Refresh2

    Refresh the currently viewed page.

    */
    inline void Refresh2();

    /*
    Method Refresh2

    Refresh the currently viewed page.

    */
    inline void Refresh2(QVariant& Level);

    /*
    Method Stop

    Stops opening a file.

    */
    inline void Stop();

// meta object functions
    static const QMetaObject staticMetaObject;
    virtual const QMetaObject *metaObject() const { return &staticMetaObject; }
    virtual void *qt_metacast(const char *);
};

// skipping event interface DWebBrowserEvents

class SHDOCVW_EXPORT IWebBrowserApp : public QAxObject
{
public:
    IWebBrowserApp(IDispatch *subobject = 0, QAxObject *parent = 0)
    : QAxObject((IUnknown*)subobject, parent)
    {
        internalRelease();
    }

    /*
    Property Application

    Returns the application automation object if accessible, this automation object otherwise..

    */
    inline IDispatch* Application() const; //Returns the value of Application

    /*
    Property Busy

    Query to see if something is still in progress.

    */
    inline bool Busy() const; //Returns the value of Busy

    /*
    Property Container

    Returns the container/parent automation object, if any.

    */
    inline IDispatch* Container() const; //Returns the value of Container

    /*
    Property Document

    Returns the active Document automation object, if any.

    */
    inline IDispatch* Document() const; //Returns the value of Document

    /*
    Property FullName

    Returns file specification of the application, including path.

    */
    inline QString FullName() const; //Returns the value of FullName

    /*
    Property FullScreen

    Maximizes window and turns off statusbar, toolbar, menubar, and titlebar.

    */
    inline bool FullScreen() const; //Returns the value of FullScreen
    inline void SetFullScreen(bool value); //Sets the value of the FullScreen property

    /*
    Property HWND

    Returns the HWND of the current IE window.

    */
    inline int HWND() const; //Returns the value of HWND

    /*
    Property Height

    The vertical dimension (pixels) of the frame window/object.

    */
    inline int Height() const; //Returns the value of Height
    inline void SetHeight(int value); //Sets the value of the Height property

    /*
    Property Left

    The horizontal position (pixels) of the frame window relative to the screen/container.

    */
    inline int Left() const; //Returns the value of Left
    inline void SetLeft(int value); //Sets the value of the Left property

    /*
    Property LocationName

    Gets the short (UI-friendly) name of the URL/file currently viewed.

    */
    inline QString LocationName() const; //Returns the value of LocationName

    /*
    Property LocationURL

    Gets the full URL/path currently viewed.

    */
    inline QString LocationURL() const; //Returns the value of LocationURL

    /*
    Property MenuBar

    Controls whether menubar is shown.

    */
    inline bool MenuBar() const; //Returns the value of MenuBar
    inline void SetMenuBar(bool value); //Sets the value of the MenuBar property

    /*
    Property Name

    Returns name of the application.

    */
    inline QString Name() const; //Returns the value of Name

    /*
    Property Parent

    Returns the automation object of the container/parent if one exists or this automation object.

    */
    inline IDispatch* Parent() const; //Returns the value of Parent

    /*
    Property Path

    Returns the path to the application.

    */
    inline QString Path() const; //Returns the value of Path

    /*
    Property StatusBar

    Turn on or off the statusbar.

    */
    inline bool StatusBar() const; //Returns the value of StatusBar
    inline void SetStatusBar(bool value); //Sets the value of the StatusBar property

    /*
    Property StatusText

    Text of Status window.

    */
    inline QString StatusText() const; //Returns the value of StatusText
    inline void SetStatusText(const QString& value); //Sets the value of the StatusText property

    /*
    Property ToolBar

    Controls which toolbar is shown.

    */
    inline int ToolBar() const; //Returns the value of ToolBar
    inline void SetToolBar(int value); //Sets the value of the ToolBar property

    /*
    Property Top

    The vertical position (pixels) of the frame window relative to the screen/container.

    */
    inline int Top() const; //Returns the value of Top
    inline void SetTop(int value); //Sets the value of the Top property

    /*
    Property TopLevelContainer

    Returns True if this is the top level object.

    */
    inline bool TopLevelContainer() const; //Returns the value of TopLevelContainer

    /*
    Property Type

    Returns the type of the contained document object.

    */
    inline QString Type() const; //Returns the value of Type

    /*
    Property Visible

    Determines whether the application is visible or hidden.

    */
    inline bool Visible() const; //Returns the value of Visible
    inline void SetVisible(bool value); //Sets the value of the Visible property

    /*
    Property Width

    The horizontal dimension (pixels) of the frame window/object.

    */
    inline int Width() const; //Returns the value of Width
    inline void SetWidth(int value); //Sets the value of the Width property

    /*
    Method ClientToWindow

    Converts client sizes into window sizes.

    */
    inline void ClientToWindow(int& pcx, int& pcy);

    /*
    Method GetProperty

    Retrieve the Associated value for the property vtValue in the context of the object.

    */
    inline QVariant GetProperty(const QString& Property);

    /*
    Method GoBack

    Navigates to the previous item in the history list.

    */
    inline void GoBack();

    /*
    Method GoForward

    Navigates to the next item in the history list.

    */
    inline void GoForward();

    /*
    Method GoHome

    Go home/start page.

    */
    inline void GoHome();

    /*
    Method GoSearch

    Go Search Page.

    */
    inline void GoSearch();

    /*
    Method Navigate

    Navigates to a URL or file.

    */
    inline void Navigate(const QString& URL);

    /*
    Method Navigate

    Navigates to a URL or file.

    */
    inline void Navigate(const QString& URL, QVariant& Flags);

    /*
    Method Navigate

    Navigates to a URL or file.

    */
    inline void Navigate(const QString& URL, QVariant& Flags, QVariant& TargetFrameName);

    /*
    Method Navigate

    Navigates to a URL or file.

    */
    inline void Navigate(const QString& URL, QVariant& Flags, QVariant& TargetFrameName, QVariant& PostData);

    /*
    Method Navigate

    Navigates to a URL or file.

    */
    inline void Navigate(const QString& URL, QVariant& Flags, QVariant& TargetFrameName, QVariant& PostData, QVariant& Headers);

    /*
    Method PutProperty

    Associates vtValue with the name szProperty in the context of the object.

    */
    inline void PutProperty(const QString& Property, const QVariant& vtValue);

    /*
    Method Quit

    Exits application and closes the open document.

    */
    inline void Quit();

    /*
    Method Refresh

    Refresh the currently viewed page.

    */
    inline void Refresh();

    /*
    Method Refresh2

    Refresh the currently viewed page.

    */
    inline void Refresh2();

    /*
    Method Refresh2

    Refresh the currently viewed page.

    */
    inline void Refresh2(QVariant& Level);

    /*
    Method Stop

    Stops opening a file.

    */
    inline void Stop();

// meta object functions
    static const QMetaObject staticMetaObject;
    virtual const QMetaObject *metaObject() const { return &staticMetaObject; }
    virtual void *qt_metacast(const char *);
};

class SHDOCVW_EXPORT IWebBrowser2 : public QAxObject
{
public:
    IWebBrowser2(IDispatch *subobject = 0, QAxObject *parent = 0)
    : QAxObject((IUnknown*)subobject, parent)
    {
        internalRelease();
    }

    /*
    Property AddressBar

    Controls whether address bar is shown

    */
    inline bool AddressBar() const; //Returns the value of AddressBar
    inline void SetAddressBar(bool value); //Sets the value of the AddressBar property

    /*
    Property Application

    Returns the application automation object if accessible, this automation object otherwise..

    */
    inline IDispatch* Application() const; //Returns the value of Application

    /*
    Property Busy

    Query to see if something is still in progress.

    */
    inline bool Busy() const; //Returns the value of Busy

    /*
    Property Container

    Returns the container/parent automation object, if any.

    */
    inline IDispatch* Container() const; //Returns the value of Container

    /*
    Property Document

    Returns the active Document automation object, if any.

    */
    inline IDispatch* Document() const; //Returns the value of Document

    /*
    Property FullName

    Returns file specification of the application, including path.

    */
    inline QString FullName() const; //Returns the value of FullName

    /*
    Property FullScreen

    Maximizes window and turns off statusbar, toolbar, menubar, and titlebar.

    */
    inline bool FullScreen() const; //Returns the value of FullScreen
    inline void SetFullScreen(bool value); //Sets the value of the FullScreen property

    /*
    Property HWND

    Returns the HWND of the current IE window.

    */
    inline int HWND() const; //Returns the value of HWND

    /*
    Property Height

    The vertical dimension (pixels) of the frame window/object.

    */
    inline int Height() const; //Returns the value of Height
    inline void SetHeight(int value); //Sets the value of the Height property

    /*
    Property Left

    The horizontal position (pixels) of the frame window relative to the screen/container.

    */
    inline int Left() const; //Returns the value of Left
    inline void SetLeft(int value); //Sets the value of the Left property

    /*
    Property LocationName

    Gets the short (UI-friendly) name of the URL/file currently viewed.

    */
    inline QString LocationName() const; //Returns the value of LocationName

    /*
    Property LocationURL

    Gets the full URL/path currently viewed.

    */
    inline QString LocationURL() const; //Returns the value of LocationURL

    /*
    Property MenuBar

    Controls whether menubar is shown.

    */
    inline bool MenuBar() const; //Returns the value of MenuBar
    inline void SetMenuBar(bool value); //Sets the value of the MenuBar property

    /*
    Property Name

    Returns name of the application.

    */
    inline QString Name() const; //Returns the value of Name

    /*
    Property Offline

    Controls if the frame is offline (read from cache)

    */
    inline bool Offline() const; //Returns the value of Offline
    inline void SetOffline(bool value); //Sets the value of the Offline property

    /*
    Property Parent

    Returns the automation object of the container/parent if one exists or this automation object.

    */
    inline IDispatch* Parent() const; //Returns the value of Parent

    /*
    Property Path

    Returns the path to the application.

    */
    inline QString Path() const; //Returns the value of Path

    /*
    Property ReadyState
    */
    inline SHDocVw::tagREADYSTATE ReadyState() const; //Returns the value of ReadyState

    /*
    Property RegisterAsBrowser

    Registers OC as a top-level browser (for target name resolution)

    */
    inline bool RegisterAsBrowser() const; //Returns the value of RegisterAsBrowser
    inline void SetRegisterAsBrowser(bool value); //Sets the value of the RegisterAsBrowser property

    /*
    Property RegisterAsDropTarget

    Registers OC as a drop target for navigation

    */
    inline bool RegisterAsDropTarget() const; //Returns the value of RegisterAsDropTarget
    inline void SetRegisterAsDropTarget(bool value); //Sets the value of the RegisterAsDropTarget property

    /*
    Property Resizable

    Controls whether the window is resizable

    */
    inline bool Resizable() const; //Returns the value of Resizable
    inline void SetResizable(bool value); //Sets the value of the Resizable property

    /*
    Property Silent

    Controls if any dialog boxes can be shown

    */
    inline bool Silent() const; //Returns the value of Silent
    inline void SetSilent(bool value); //Sets the value of the Silent property

    /*
    Property StatusBar

    Turn on or off the statusbar.

    */
    inline bool StatusBar() const; //Returns the value of StatusBar
    inline void SetStatusBar(bool value); //Sets the value of the StatusBar property

    /*
    Property StatusText

    Text of Status window.

    */
    inline QString StatusText() const; //Returns the value of StatusText
    inline void SetStatusText(const QString& value); //Sets the value of the StatusText property

    /*
    Property TheaterMode

    Controls if the browser is in theater mode

    */
    inline bool TheaterMode() const; //Returns the value of TheaterMode
    inline void SetTheaterMode(bool value); //Sets the value of the TheaterMode property

    /*
    Property ToolBar

    Controls which toolbar is shown.

    */
    inline int ToolBar() const; //Returns the value of ToolBar
    inline void SetToolBar(int value); //Sets the value of the ToolBar property

    /*
    Property Top

    The vertical position (pixels) of the frame window relative to the screen/container.

    */
    inline int Top() const; //Returns the value of Top
    inline void SetTop(int value); //Sets the value of the Top property

    /*
    Property TopLevelContainer

    Returns True if this is the top level object.

    */
    inline bool TopLevelContainer() const; //Returns the value of TopLevelContainer

    /*
    Property Type

    Returns the type of the contained document object.

    */
    inline QString Type() const; //Returns the value of Type

    /*
    Property Visible

    Determines whether the application is visible or hidden.

    */
    inline bool Visible() const; //Returns the value of Visible
    inline void SetVisible(bool value); //Sets the value of the Visible property

    /*
    Property Width

    The horizontal dimension (pixels) of the frame window/object.

    */
    inline int Width() const; //Returns the value of Width
    inline void SetWidth(int value); //Sets the value of the Width property

    /*
    Method ClientToWindow

    Converts client sizes into window sizes.

    */
    inline void ClientToWindow(int& pcx, int& pcy);

    /*
    Method ExecWB

    IOleCommandTarget::Exec

    */
    inline void ExecWB(SHDocVw::OLECMDID cmdID, SHDocVw::OLECMDEXECOPT cmdexecopt);

    /*
    Method ExecWB

    IOleCommandTarget::Exec

    */
    inline void ExecWB(SHDocVw::OLECMDID cmdID, SHDocVw::OLECMDEXECOPT cmdexecopt, QVariant& pvaIn);

    /*
    Method ExecWB

    IOleCommandTarget::Exec

    */
    inline void ExecWB(SHDocVw::OLECMDID cmdID, SHDocVw::OLECMDEXECOPT cmdexecopt, QVariant& pvaIn, QVariant& pvaOut);

    /*
    Method GetProperty

    Retrieve the Associated value for the property vtValue in the context of the object.

    */
    inline QVariant GetProperty(const QString& Property);

    /*
    Method GoBack

    Navigates to the previous item in the history list.

    */
    inline void GoBack();

    /*
    Method GoForward

    Navigates to the next item in the history list.

    */
    inline void GoForward();

    /*
    Method GoHome

    Go home/start page.

    */
    inline void GoHome();

    /*
    Method GoSearch

    Go Search Page.

    */
    inline void GoSearch();

    /*
    Method Navigate

    Navigates to a URL or file.

    */
    inline void Navigate(const QString& URL);

    /*
    Method Navigate

    Navigates to a URL or file.

    */
    inline void Navigate(const QString& URL, QVariant& Flags);

    /*
    Method Navigate

    Navigates to a URL or file.

    */
    inline void Navigate(const QString& URL, QVariant& Flags, QVariant& TargetFrameName);

    /*
    Method Navigate

    Navigates to a URL or file.

    */
    inline void Navigate(const QString& URL, QVariant& Flags, QVariant& TargetFrameName, QVariant& PostData);

    /*
    Method Navigate

    Navigates to a URL or file.

    */
    inline void Navigate(const QString& URL, QVariant& Flags, QVariant& TargetFrameName, QVariant& PostData, QVariant& Headers);

    /*
    Method Navigate2

    Navigates to a URL or file or pidl.

    */
    inline void Navigate2(QVariant& URL);

    /*
    Method Navigate2

    Navigates to a URL or file or pidl.

    */
    inline void Navigate2(QVariant& URL, QVariant& Flags);

    /*
    Method Navigate2

    Navigates to a URL or file or pidl.

    */
    inline void Navigate2(QVariant& URL, QVariant& Flags, QVariant& TargetFrameName);

    /*
    Method Navigate2

    Navigates to a URL or file or pidl.

    */
    inline void Navigate2(QVariant& URL, QVariant& Flags, QVariant& TargetFrameName, QVariant& PostData);

    /*
    Method Navigate2

    Navigates to a URL or file or pidl.

    */
    inline void Navigate2(QVariant& URL, QVariant& Flags, QVariant& TargetFrameName, QVariant& PostData, QVariant& Headers);

    /*
    Method PutProperty

    Associates vtValue with the name szProperty in the context of the object.

    */
    inline void PutProperty(const QString& Property, const QVariant& vtValue);

    /*
    Method QueryStatusWB

    IOleCommandTarget::QueryStatus

    */
    inline OLECMDF QueryStatusWB(SHDocVw::OLECMDID cmdID);

    /*
    Method Quit

    Exits application and closes the open document.

    */
    inline void Quit();

    /*
    Method Refresh

    Refresh the currently viewed page.

    */
    inline void Refresh();

    /*
    Method Refresh2

    Refresh the currently viewed page.

    */
    inline void Refresh2();

    /*
    Method Refresh2

    Refresh the currently viewed page.

    */
    inline void Refresh2(QVariant& Level);

    /*
    Method ShowBrowserBar

    Set BrowserBar to Clsid

    */
    inline void ShowBrowserBar(QVariant& pvaClsid);

    /*
    Method ShowBrowserBar

    Set BrowserBar to Clsid

    */
    inline void ShowBrowserBar(QVariant& pvaClsid, QVariant& pvarShow);

    /*
    Method ShowBrowserBar

    Set BrowserBar to Clsid

    */
    inline void ShowBrowserBar(QVariant& pvaClsid, QVariant& pvarShow, QVariant& pvarSize);

    /*
    Method Stop

    Stops opening a file.

    */
    inline void Stop();

// meta object functions
    static const QMetaObject staticMetaObject;
    virtual const QMetaObject *metaObject() const { return &staticMetaObject; }
    virtual void *qt_metacast(const char *);
};

// skipping event interface DWebBrowserEvents2

// skipping event interface DShellWindowsEvents

class SHDOCVW_EXPORT IShellWindows : public QAxObject
{
public:
    IShellWindows(IDispatch *subobject = 0, QAxObject *parent = 0)
    : QAxObject((IUnknown*)subobject, parent)
    {
        internalRelease();
    }

    /*
    Property Count

    Get count of open Shell windows

    */
    inline int Count() const; //Returns the value of Count

    /*
    Method FindWindowSW

    Find the window based on the location

    */
    inline IDispatch* FindWindowSW(QVariant& pvarloc, QVariant& pvarlocRoot, int swClass, int& pHWND, int swfwOptions);

    /*
    Method Item

    Return the shell window for the given index

    */
    inline IDispatch* Item();

    /*
    Method Item

    Return the shell window for the given index

    */
    inline IDispatch* Item(const QVariant& index);

    /*
    Method OnActivated

    Notifies the activation

    */
    inline void OnActivated(int lCookie, bool fActive);

    /*
    Method OnCreated

    Notifies on creation and frame name set

    */
    inline void OnCreated(int lCookie, IUnknown* punk);

    /*
    Method OnNavigate

    Notifies the new location

    */
    inline void OnNavigate(int lCookie, QVariant& pvarloc);

    /*
    Method ProcessAttachDetach

    Used by IExplore to register different processes

    */
    inline void ProcessAttachDetach(bool fAttach);

    /*
    Method Register

    Register a window with the list

    */
    inline void Register(IDispatch* pid, int HWND, int swClass, int& plCookie);

    /*
    Method RegisterPending

    Register a pending open with the list

    */
    inline void RegisterPending(int lThreadId, QVariant& pvarloc, QVariant& pvarlocRoot, int swClass, int& plCookie);

    /*
    Method Revoke

    Remove a window from the list

    */
    inline void Revoke(int lCookie);

    /*
    Method _NewEnum

    Enumerates the figures

    */
    inline IUnknown* _NewEnum();

// meta object functions
    static const QMetaObject staticMetaObject;
    virtual const QMetaObject *metaObject() const { return &staticMetaObject; }
    virtual void *qt_metacast(const char *);
};

class SHDOCVW_EXPORT IShellUIHelper : public QAxObject
{
public:
    IShellUIHelper(IDispatch *subobject = 0, QAxObject *parent = 0)
    : QAxObject((IUnknown*)subobject, parent)
    {
        internalRelease();
    }

    /*
    Method AddChannel
    */
    inline void AddChannel(const QString& URL);

    /*
    Method AddDesktopComponent
    */
    inline void AddDesktopComponent(const QString& URL, const QString& Type);

    /*
    Method AddDesktopComponent
    */
    inline void AddDesktopComponent(const QString& URL, const QString& Type, QVariant& Left);

    /*
    Method AddDesktopComponent
    */
    inline void AddDesktopComponent(const QString& URL, const QString& Type, QVariant& Left, QVariant& Top);

    /*
    Method AddDesktopComponent
    */
    inline void AddDesktopComponent(const QString& URL, const QString& Type, QVariant& Left, QVariant& Top, QVariant& Width);

    /*
    Method AddDesktopComponent
    */
    inline void AddDesktopComponent(const QString& URL, const QString& Type, QVariant& Left, QVariant& Top, QVariant& Width, QVariant& Height);

    /*
    Method AddFavorite
    */
    inline void AddFavorite(const QString& URL);

    /*
    Method AddFavorite
    */
    inline void AddFavorite(const QString& URL, QVariant& Title);

    /*
    Method AutoCompleteAttach
    */
    inline void AutoCompleteAttach();

    /*
    Method AutoCompleteAttach
    */
    inline void AutoCompleteAttach(QVariant& Reserved);

    /*
    Method AutoCompleteSaveForm
    */
    inline void AutoCompleteSaveForm();

    /*
    Method AutoCompleteSaveForm
    */
    inline void AutoCompleteSaveForm(QVariant& Form);

    /*
    Method AutoScan
    */
    inline void AutoScan(const QString& strSearch, const QString& strFailureUrl);

    /*
    Method AutoScan
    */
    inline void AutoScan(const QString& strSearch, const QString& strFailureUrl, QVariant& pvarTargetFrame);

    /*
    Method ImportExportFavorites
    */
    inline void ImportExportFavorites(bool fImport, const QString& strImpExpPath);

    /*
    Method IsSubscribed
    */
    inline bool IsSubscribed(const QString& URL);

    /*
    Method NavigateAndFind
    */
    inline void NavigateAndFind(const QString& URL, const QString& strQuery, QVariant& varTargetFrame);

    /*
    Method RefreshOfflineDesktop
    */
    inline void RefreshOfflineDesktop();

    /*
    Method ResetFirstBootMode
    */
    inline void ResetFirstBootMode();

    /*
    Method ResetSafeMode
    */
    inline void ResetSafeMode();

    /*
    Method ShowBrowserUI
    */
    inline QVariant ShowBrowserUI(const QString& bstrName, QVariant& pvarIn);

// meta object functions
    static const QMetaObject staticMetaObject;
    virtual const QMetaObject *metaObject() const { return &staticMetaObject; }
    virtual void *qt_metacast(const char *);
};

class SHDOCVW_EXPORT IShellUIHelper2 : public QAxObject
{
public:
    IShellUIHelper2(IDispatch *subobject = 0, QAxObject *parent = 0)
    : QAxObject((IUnknown*)subobject, parent)
    {
        internalRelease();
    }

    /*
    Method AddChannel
    */
    inline void AddChannel(const QString& URL);

    /*
    Method AddDesktopComponent
    */
    inline void AddDesktopComponent(const QString& URL, const QString& Type);

    /*
    Method AddDesktopComponent
    */
    inline void AddDesktopComponent(const QString& URL, const QString& Type, QVariant& Left);

    /*
    Method AddDesktopComponent
    */
    inline void AddDesktopComponent(const QString& URL, const QString& Type, QVariant& Left, QVariant& Top);

    /*
    Method AddDesktopComponent
    */
    inline void AddDesktopComponent(const QString& URL, const QString& Type, QVariant& Left, QVariant& Top, QVariant& Width);

    /*
    Method AddDesktopComponent
    */
    inline void AddDesktopComponent(const QString& URL, const QString& Type, QVariant& Left, QVariant& Top, QVariant& Width, QVariant& Height);

    /*
    Method AddFavorite
    */
    inline void AddFavorite(const QString& URL);

    /*
    Method AddFavorite
    */
    inline void AddFavorite(const QString& URL, QVariant& Title);

    /*
    Method AddSearchProvider
    */
    inline void AddSearchProvider(const QString& URL);

    /*
    Method AutoCompleteAttach
    */
    inline void AutoCompleteAttach();

    /*
    Method AutoCompleteAttach
    */
    inline void AutoCompleteAttach(QVariant& Reserved);

    /*
    Method AutoCompleteSaveForm
    */
    inline void AutoCompleteSaveForm();

    /*
    Method AutoCompleteSaveForm
    */
    inline void AutoCompleteSaveForm(QVariant& Form);

    /*
    Method AutoScan
    */
    inline void AutoScan(const QString& strSearch, const QString& strFailureUrl);

    /*
    Method AutoScan
    */
    inline void AutoScan(const QString& strSearch, const QString& strFailureUrl, QVariant& pvarTargetFrame);

    /*
    Method BrandImageUri
    */
    inline QString BrandImageUri();

    /*
    Method CustomizeClearType
    */
    inline void CustomizeClearType(bool fSet);

    /*
    Method CustomizeSettings
    */
    inline void CustomizeSettings(bool fSQM, bool fPhishing, const QString& bstrLocale);

    /*
    Method DefaultSearchProvider
    */
    inline QString DefaultSearchProvider();

    /*
    Method DiagnoseConnection
    */
    inline void DiagnoseConnection();

    /*
    Method ImportExportFavorites
    */
    inline void ImportExportFavorites(bool fImport, const QString& strImpExpPath);

    /*
    Method IsSearchMigrated
    */
    inline bool IsSearchMigrated();

    /*
    Method IsSearchProviderInstalled
    */
    inline uint IsSearchProviderInstalled(const QString& URL);

    /*
    Method IsSubscribed
    */
    inline bool IsSubscribed(const QString& URL);

    /*
    Method NavigateAndFind
    */
    inline void NavigateAndFind(const QString& URL, const QString& strQuery, QVariant& varTargetFrame);

    /*
    Method PhishingEnabled
    */
    inline bool PhishingEnabled();

    /*
    Method RefreshOfflineDesktop
    */
    inline void RefreshOfflineDesktop();

    /*
    Method ResetFirstBootMode
    */
    inline void ResetFirstBootMode();

    /*
    Method ResetSafeMode
    */
    inline void ResetSafeMode();

    /*
    Method RunOnceHasShown
    */
    inline bool RunOnceHasShown();

    /*
    Method RunOnceRequiredSettingsComplete
    */
    inline void RunOnceRequiredSettingsComplete(bool fComplete);

    /*
    Method RunOnceShown
    */
    inline void RunOnceShown();

    /*
    Method SearchGuideUrl
    */
    inline QString SearchGuideUrl();

    /*
    Method ShowBrowserUI
    */
    inline QVariant ShowBrowserUI(const QString& bstrName, QVariant& pvarIn);

    /*
    Method SkipRunOnce
    */
    inline void SkipRunOnce();

    /*
    Method SkipTabsWelcome
    */
    inline void SkipTabsWelcome();

    /*
    Method SqmEnabled
    */
    inline bool SqmEnabled();

// meta object functions
    static const QMetaObject staticMetaObject;
    virtual const QMetaObject *metaObject() const { return &staticMetaObject; }
    virtual void *qt_metacast(const char *);
};

class SHDOCVW_EXPORT IShellUIHelper3 : public QAxObject
{
public:
    IShellUIHelper3(IDispatch *subobject = 0, QAxObject *parent = 0)
    : QAxObject((IUnknown*)subobject, parent)
    {
        internalRelease();
    }

    /*
    Method AddChannel
    */
    inline void AddChannel(const QString& URL);

    /*
    Method AddDesktopComponent
    */
    inline void AddDesktopComponent(const QString& URL, const QString& Type);

    /*
    Method AddDesktopComponent
    */
    inline void AddDesktopComponent(const QString& URL, const QString& Type, QVariant& Left);

    /*
    Method AddDesktopComponent
    */
    inline void AddDesktopComponent(const QString& URL, const QString& Type, QVariant& Left, QVariant& Top);

    /*
    Method AddDesktopComponent
    */
    inline void AddDesktopComponent(const QString& URL, const QString& Type, QVariant& Left, QVariant& Top, QVariant& Width);

    /*
    Method AddDesktopComponent
    */
    inline void AddDesktopComponent(const QString& URL, const QString& Type, QVariant& Left, QVariant& Top, QVariant& Width, QVariant& Height);

    /*
    Method AddFavorite
    */
    inline void AddFavorite(const QString& URL);

    /*
    Method AddFavorite
    */
    inline void AddFavorite(const QString& URL, QVariant& Title);

    /*
    Method AddSearchProvider
    */
    inline void AddSearchProvider(const QString& URL);

    /*
    Method AddService
    */
    inline void AddService(const QString& URL);

    /*
    Method AddToFavoritesBar
    */
    inline void AddToFavoritesBar(const QString& URL, const QString& Title);

    /*
    Method AddToFavoritesBar
    */
    inline void AddToFavoritesBar(const QString& URL, const QString& Title, QVariant& Type);

    /*
    Method AutoCompleteAttach
    */
    inline void AutoCompleteAttach();

    /*
    Method AutoCompleteAttach
    */
    inline void AutoCompleteAttach(QVariant& Reserved);

    /*
    Method AutoCompleteSaveForm
    */
    inline void AutoCompleteSaveForm();

    /*
    Method AutoCompleteSaveForm
    */
    inline void AutoCompleteSaveForm(QVariant& Form);

    /*
    Method AutoScan
    */
    inline void AutoScan(const QString& strSearch, const QString& strFailureUrl);

    /*
    Method AutoScan
    */
    inline void AutoScan(const QString& strSearch, const QString& strFailureUrl, QVariant& pvarTargetFrame);

    /*
    Method BrandImageUri
    */
    inline QString BrandImageUri();

    /*
    Method BuildNewTabPage
    */
    inline void BuildNewTabPage();

    /*
    Method ContentDiscoveryReset
    */
    inline void ContentDiscoveryReset();

    /*
    Method CustomizeClearType
    */
    inline void CustomizeClearType(bool fSet);

    /*
    Method CustomizeSettings
    */
    inline void CustomizeSettings(bool fSQM, bool fPhishing, const QString& bstrLocale);

    /*
    Method DefaultSearchProvider
    */
    inline QString DefaultSearchProvider();

    /*
    Method DiagnoseConnection
    */
    inline void DiagnoseConnection();

    /*
    Method EnableSuggestedSites
    */
    inline void EnableSuggestedSites(bool fEnable);

    /*
    Method ImportExportFavorites
    */
    inline void ImportExportFavorites(bool fImport, const QString& strImpExpPath);

    /*
    Method InPrivateFilteringEnabled
    */
    inline bool InPrivateFilteringEnabled();

    /*
    Method IsSearchMigrated
    */
    inline bool IsSearchMigrated();

    /*
    Method IsSearchProviderInstalled
    */
    inline uint IsSearchProviderInstalled(const QString& URL);

    /*
    Method IsServiceInstalled
    */
    inline uint IsServiceInstalled(const QString& URL, const QString& Verb);

    /*
    Method IsSubscribed
    */
    inline bool IsSubscribed(const QString& URL);

    /*
    Method IsSuggestedSitesEnabled
    */
    inline bool IsSuggestedSitesEnabled();

    /*
    Method NavigateAndFind
    */
    inline void NavigateAndFind(const QString& URL, const QString& strQuery, QVariant& varTargetFrame);

    /*
    Method NavigateToSuggestedSites
    */
    inline void NavigateToSuggestedSites(const QString& bstrRelativeUrl);

    /*
    Method PhishingEnabled
    */
    inline bool PhishingEnabled();

    /*
    Method RefreshOfflineDesktop
    */
    inline void RefreshOfflineDesktop();

    /*
    Method ResetFirstBootMode
    */
    inline void ResetFirstBootMode();

    /*
    Method ResetSafeMode
    */
    inline void ResetSafeMode();

    /*
    Method RunOnceHasShown
    */
    inline bool RunOnceHasShown();

    /*
    Method RunOnceRequiredSettingsComplete
    */
    inline void RunOnceRequiredSettingsComplete(bool fComplete);

    /*
    Method RunOnceShown
    */
    inline void RunOnceShown();

    /*
    Method SearchGuideUrl
    */
    inline QString SearchGuideUrl();

    /*
    Method SetActivitiesVisible
    */
    inline void SetActivitiesVisible(bool fVisible);

    /*
    Method SetRecentlyClosedVisible
    */
    inline void SetRecentlyClosedVisible(bool fVisible);

    /*
    Method ShowBrowserUI
    */
    inline QVariant ShowBrowserUI(const QString& bstrName, QVariant& pvarIn);

    /*
    Method ShowInPrivateHelp
    */
    inline void ShowInPrivateHelp();

    /*
    Method ShowTabsHelp
    */
    inline void ShowTabsHelp();

    /*
    Method SkipRunOnce
    */
    inline void SkipRunOnce();

    /*
    Method SkipTabsWelcome
    */
    inline void SkipTabsWelcome();

    /*
    Method SqmEnabled
    */
    inline bool SqmEnabled();

// meta object functions
    static const QMetaObject staticMetaObject;
    virtual const QMetaObject *metaObject() const { return &staticMetaObject; }
    virtual void *qt_metacast(const char *);
};

class SHDOCVW_EXPORT IShellUIHelper4 : public QAxObject
{
public:
    IShellUIHelper4(IDispatch *subobject = 0, QAxObject *parent = 0)
    : QAxObject((IUnknown*)subobject, parent)
    {
        internalRelease();
    }

    /*
    Method AddChannel
    */
    inline void AddChannel(const QString& URL);

    /*
    Method AddDesktopComponent
    */
    inline void AddDesktopComponent(const QString& URL, const QString& Type);

    /*
    Method AddDesktopComponent
    */
    inline void AddDesktopComponent(const QString& URL, const QString& Type, QVariant& Left);

    /*
    Method AddDesktopComponent
    */
    inline void AddDesktopComponent(const QString& URL, const QString& Type, QVariant& Left, QVariant& Top);

    /*
    Method AddDesktopComponent
    */
    inline void AddDesktopComponent(const QString& URL, const QString& Type, QVariant& Left, QVariant& Top, QVariant& Width);

    /*
    Method AddDesktopComponent
    */
    inline void AddDesktopComponent(const QString& URL, const QString& Type, QVariant& Left, QVariant& Top, QVariant& Width, QVariant& Height);

    /*
    Method AddFavorite
    */
    inline void AddFavorite(const QString& URL);

    /*
    Method AddFavorite
    */
    inline void AddFavorite(const QString& URL, QVariant& Title);

    /*
    Method AddSearchProvider
    */
    inline void AddSearchProvider(const QString& URL);

    /*
    Method AddService
    */
    inline void AddService(const QString& URL);

    /*
    Method AddToFavoritesBar
    */
    inline void AddToFavoritesBar(const QString& URL, const QString& Title);

    /*
    Method AddToFavoritesBar
    */
    inline void AddToFavoritesBar(const QString& URL, const QString& Title, QVariant& Type);

    /*
    Method AutoCompleteAttach
    */
    inline void AutoCompleteAttach();

    /*
    Method AutoCompleteAttach
    */
    inline void AutoCompleteAttach(QVariant& Reserved);

    /*
    Method AutoCompleteSaveForm
    */
    inline void AutoCompleteSaveForm();

    /*
    Method AutoCompleteSaveForm
    */
    inline void AutoCompleteSaveForm(QVariant& Form);

    /*
    Method AutoScan
    */
    inline void AutoScan(const QString& strSearch, const QString& strFailureUrl);

    /*
    Method AutoScan
    */
    inline void AutoScan(const QString& strSearch, const QString& strFailureUrl, QVariant& pvarTargetFrame);

    /*
    Method BrandImageUri
    */
    inline QString BrandImageUri();

    /*
    Method BuildNewTabPage
    */
    inline void BuildNewTabPage();

    /*
    Method ContentDiscoveryReset
    */
    inline void ContentDiscoveryReset();

    /*
    Method CustomizeClearType
    */
    inline void CustomizeClearType(bool fSet);

    /*
    Method CustomizeSettings
    */
    inline void CustomizeSettings(bool fSQM, bool fPhishing, const QString& bstrLocale);

    /*
    Method DefaultSearchProvider
    */
    inline QString DefaultSearchProvider();

    /*
    Method DiagnoseConnection
    */
    inline void DiagnoseConnection();

    /*
    Method EnableSuggestedSites
    */
    inline void EnableSuggestedSites(bool fEnable);

    /*
    Method ImportExportFavorites
    */
    inline void ImportExportFavorites(bool fImport, const QString& strImpExpPath);

    /*
    Method InPrivateFilteringEnabled
    */
    inline bool InPrivateFilteringEnabled();

    /*
    Method IsSearchMigrated
    */
    inline bool IsSearchMigrated();

    /*
    Method IsSearchProviderInstalled
    */
    inline uint IsSearchProviderInstalled(const QString& URL);

    /*
    Method IsServiceInstalled
    */
    inline uint IsServiceInstalled(const QString& URL, const QString& Verb);

    /*
    Method IsSubscribed
    */
    inline bool IsSubscribed(const QString& URL);

    /*
    Method IsSuggestedSitesEnabled
    */
    inline bool IsSuggestedSitesEnabled();

    /*
    Method NavigateAndFind
    */
    inline void NavigateAndFind(const QString& URL, const QString& strQuery, QVariant& varTargetFrame);

    /*
    Method NavigateToSuggestedSites
    */
    inline void NavigateToSuggestedSites(const QString& bstrRelativeUrl);

    /*
    Method PhishingEnabled
    */
    inline bool PhishingEnabled();

    /*
    Method RefreshOfflineDesktop
    */
    inline void RefreshOfflineDesktop();

    /*
    Method ResetFirstBootMode
    */
    inline void ResetFirstBootMode();

    /*
    Method ResetSafeMode
    */
    inline void ResetSafeMode();

    /*
    Method RunOnceHasShown
    */
    inline bool RunOnceHasShown();

    /*
    Method RunOnceRequiredSettingsComplete
    */
    inline void RunOnceRequiredSettingsComplete(bool fComplete);

    /*
    Method RunOnceShown
    */
    inline void RunOnceShown();

    /*
    Method SearchGuideUrl
    */
    inline QString SearchGuideUrl();

    /*
    Method SetActivitiesVisible
    */
    inline void SetActivitiesVisible(bool fVisible);

    /*
    Method SetRecentlyClosedVisible
    */
    inline void SetRecentlyClosedVisible(bool fVisible);

    /*
    Method ShowBrowserUI
    */
    inline QVariant ShowBrowserUI(const QString& bstrName, QVariant& pvarIn);

    /*
    Method ShowInPrivateHelp
    */
    inline void ShowInPrivateHelp();

    /*
    Method ShowTabsHelp
    */
    inline void ShowTabsHelp();

    /*
    Method SkipRunOnce
    */
    inline void SkipRunOnce();

    /*
    Method SkipTabsWelcome
    */
    inline void SkipTabsWelcome();

    /*
    Method SqmEnabled
    */
    inline bool SqmEnabled();

    /*
    Method msActiveXFilteringEnabled
    */
    inline bool msActiveXFilteringEnabled();

    /*
    Method msAddSiteMode
    */
    inline void msAddSiteMode();

    /*
    Method msAddTrackingProtectionList
    */
    inline void msAddTrackingProtectionList(const QString& URL, const QString& bstrFilterName);

    /*
    Method msIsSiteMode
    */
    inline bool msIsSiteMode();

    /*
    Method msIsSiteModeFirstRun
    */
    inline QVariant msIsSiteModeFirstRun(bool fPreserveState);

    /*
    Method msSiteModeActivate
    */
    inline void msSiteModeActivate();

    /*
    Method msSiteModeAddButtonStyle
    */
    inline QVariant msSiteModeAddButtonStyle(const QVariant& uiButtonID, const QString& bstrIconURL, const QString& bstrTooltip);

    /*
    Method msSiteModeAddJumpListItem
    */
    inline void msSiteModeAddJumpListItem(const QString& bstrName, const QString& bstrActionUri, const QString& bstrIconUri);

    /*
    Method msSiteModeAddJumpListItem
    */
    inline void msSiteModeAddJumpListItem(const QString& bstrName, const QString& bstrActionUri, const QString& bstrIconUri, QVariant& pvarWindowType);

    /*
    Method msSiteModeAddThumbBarButton
    */
    inline QVariant msSiteModeAddThumbBarButton(const QString& bstrIconURL, const QString& bstrTooltip);

    /*
    Method msSiteModeClearIconOverlay
    */
    inline void msSiteModeClearIconOverlay();

    /*
    Method msSiteModeClearJumpList
    */
    inline void msSiteModeClearJumpList();

    /*
    Method msSiteModeCreateJumpList
    */
    inline void msSiteModeCreateJumpList(const QString& bstrHeader);

    /*
    Method msSiteModeSetIconOverlay
    */
    inline void msSiteModeSetIconOverlay(const QString& IconUrl);

    /*
    Method msSiteModeSetIconOverlay
    */
    inline void msSiteModeSetIconOverlay(const QString& IconUrl, QVariant& pvarDescription);

    /*
    Method msSiteModeShowButtonStyle
    */
    inline void msSiteModeShowButtonStyle(const QVariant& uiButtonID, const QVariant& uiStyleID);

    /*
    Method msSiteModeShowJumpList
    */
    inline void msSiteModeShowJumpList();

    /*
    Method msSiteModeShowThumbBar
    */
    inline void msSiteModeShowThumbBar();

    /*
    Method msSiteModeUpdateThumbBarButton
    */
    inline void msSiteModeUpdateThumbBarButton(const QVariant& ButtonID, bool fEnabled, bool fVisible);

    /*
    Method msTrackingProtectionEnabled
    */
    inline bool msTrackingProtectionEnabled();

// meta object functions
    static const QMetaObject staticMetaObject;
    virtual const QMetaObject *metaObject() const { return &staticMetaObject; }
    virtual void *qt_metacast(const char *);
};

class SHDOCVW_EXPORT IShellUIHelper5 : public QAxObject
{
public:
    IShellUIHelper5(IDispatch *subobject = 0, QAxObject *parent = 0)
    : QAxObject((IUnknown*)subobject, parent)
    {
        internalRelease();
    }

    /*
    Method AddChannel
    */
    inline void AddChannel(const QString& URL);

    /*
    Method AddDesktopComponent
    */
    inline void AddDesktopComponent(const QString& URL, const QString& Type);

    /*
    Method AddDesktopComponent
    */
    inline void AddDesktopComponent(const QString& URL, const QString& Type, QVariant& Left);

    /*
    Method AddDesktopComponent
    */
    inline void AddDesktopComponent(const QString& URL, const QString& Type, QVariant& Left, QVariant& Top);

    /*
    Method AddDesktopComponent
    */
    inline void AddDesktopComponent(const QString& URL, const QString& Type, QVariant& Left, QVariant& Top, QVariant& Width);

    /*
    Method AddDesktopComponent
    */
    inline void AddDesktopComponent(const QString& URL, const QString& Type, QVariant& Left, QVariant& Top, QVariant& Width, QVariant& Height);

    /*
    Method AddFavorite
    */
    inline void AddFavorite(const QString& URL);

    /*
    Method AddFavorite
    */
    inline void AddFavorite(const QString& URL, QVariant& Title);

    /*
    Method AddSearchProvider
    */
    inline void AddSearchProvider(const QString& URL);

    /*
    Method AddService
    */
    inline void AddService(const QString& URL);

    /*
    Method AddToFavoritesBar
    */
    inline void AddToFavoritesBar(const QString& URL, const QString& Title);

    /*
    Method AddToFavoritesBar
    */
    inline void AddToFavoritesBar(const QString& URL, const QString& Title, QVariant& Type);

    /*
    Method AutoCompleteAttach
    */
    inline void AutoCompleteAttach();

    /*
    Method AutoCompleteAttach
    */
    inline void AutoCompleteAttach(QVariant& Reserved);

    /*
    Method AutoCompleteSaveForm
    */
    inline void AutoCompleteSaveForm();

    /*
    Method AutoCompleteSaveForm
    */
    inline void AutoCompleteSaveForm(QVariant& Form);

    /*
    Method AutoScan
    */
    inline void AutoScan(const QString& strSearch, const QString& strFailureUrl);

    /*
    Method AutoScan
    */
    inline void AutoScan(const QString& strSearch, const QString& strFailureUrl, QVariant& pvarTargetFrame);

    /*
    Method BrandImageUri
    */
    inline QString BrandImageUri();

    /*
    Method BuildNewTabPage
    */
    inline void BuildNewTabPage();

    /*
    Method ContentDiscoveryReset
    */
    inline void ContentDiscoveryReset();

    /*
    Method CustomizeClearType
    */
    inline void CustomizeClearType(bool fSet);

    /*
    Method CustomizeSettings
    */
    inline void CustomizeSettings(bool fSQM, bool fPhishing, const QString& bstrLocale);

    /*
    Method DefaultSearchProvider
    */
    inline QString DefaultSearchProvider();

    /*
    Method DiagnoseConnection
    */
    inline void DiagnoseConnection();

    /*
    Method EnableSuggestedSites
    */
    inline void EnableSuggestedSites(bool fEnable);

    /*
    Method ImportExportFavorites
    */
    inline void ImportExportFavorites(bool fImport, const QString& strImpExpPath);

    /*
    Method InPrivateFilteringEnabled
    */
    inline bool InPrivateFilteringEnabled();

    /*
    Method IsSearchMigrated
    */
    inline bool IsSearchMigrated();

    /*
    Method IsSearchProviderInstalled
    */
    inline uint IsSearchProviderInstalled(const QString& URL);

    /*
    Method IsServiceInstalled
    */
    inline uint IsServiceInstalled(const QString& URL, const QString& Verb);

    /*
    Method IsSubscribed
    */
    inline bool IsSubscribed(const QString& URL);

    /*
    Method IsSuggestedSitesEnabled
    */
    inline bool IsSuggestedSitesEnabled();

    /*
    Method NavigateAndFind
    */
    inline void NavigateAndFind(const QString& URL, const QString& strQuery, QVariant& varTargetFrame);

    /*
    Method NavigateToSuggestedSites
    */
    inline void NavigateToSuggestedSites(const QString& bstrRelativeUrl);

    /*
    Method PhishingEnabled
    */
    inline bool PhishingEnabled();

    /*
    Method RefreshOfflineDesktop
    */
    inline void RefreshOfflineDesktop();

    /*
    Method ResetFirstBootMode
    */
    inline void ResetFirstBootMode();

    /*
    Method ResetSafeMode
    */
    inline void ResetSafeMode();

    /*
    Method RunOnceHasShown
    */
    inline bool RunOnceHasShown();

    /*
    Method RunOnceRequiredSettingsComplete
    */
    inline void RunOnceRequiredSettingsComplete(bool fComplete);

    /*
    Method RunOnceShown
    */
    inline void RunOnceShown();

    /*
    Method SearchGuideUrl
    */
    inline QString SearchGuideUrl();

    /*
    Method SetActivitiesVisible
    */
    inline void SetActivitiesVisible(bool fVisible);

    /*
    Method SetRecentlyClosedVisible
    */
    inline void SetRecentlyClosedVisible(bool fVisible);

    /*
    Method ShowBrowserUI
    */
    inline QVariant ShowBrowserUI(const QString& bstrName, QVariant& pvarIn);

    /*
    Method ShowInPrivateHelp
    */
    inline void ShowInPrivateHelp();

    /*
    Method ShowTabsHelp
    */
    inline void ShowTabsHelp();

    /*
    Method SkipRunOnce
    */
    inline void SkipRunOnce();

    /*
    Method SkipTabsWelcome
    */
    inline void SkipTabsWelcome();

    /*
    Method SqmEnabled
    */
    inline bool SqmEnabled();

    /*
    Method msActiveXFilteringEnabled
    */
    inline bool msActiveXFilteringEnabled();

    /*
    Method msAddSiteMode
    */
    inline void msAddSiteMode();

    /*
    Method msAddTrackingProtectionList
    */
    inline void msAddTrackingProtectionList(const QString& URL, const QString& bstrFilterName);

    /*
    Method msChangeDefaultBrowser
    */
    inline void msChangeDefaultBrowser(bool fChange);

    /*
    Method msDiagnoseConnectionUILess
    */
    inline void msDiagnoseConnectionUILess();

    /*
    Method msIsSiteMode
    */
    inline bool msIsSiteMode();

    /*
    Method msIsSiteModeFirstRun
    */
    inline QVariant msIsSiteModeFirstRun(bool fPreserveState);

    /*
    Method msLaunchNetworkClientHelp
    */
    inline void msLaunchNetworkClientHelp();

    /*
    Method msProvisionNetworks
    */
    inline QVariant msProvisionNetworks(const QString& bstrProvisioningXml);

    /*
    Method msReportSafeUrl
    */
    inline void msReportSafeUrl();

    /*
    Method msSiteModeActivate
    */
    inline void msSiteModeActivate();

    /*
    Method msSiteModeAddButtonStyle
    */
    inline QVariant msSiteModeAddButtonStyle(const QVariant& uiButtonID, const QString& bstrIconURL, const QString& bstrTooltip);

    /*
    Method msSiteModeAddJumpListItem
    */
    inline void msSiteModeAddJumpListItem(const QString& bstrName, const QString& bstrActionUri, const QString& bstrIconUri);

    /*
    Method msSiteModeAddJumpListItem
    */
    inline void msSiteModeAddJumpListItem(const QString& bstrName, const QString& bstrActionUri, const QString& bstrIconUri, QVariant& pvarWindowType);

    /*
    Method msSiteModeAddThumbBarButton
    */
    inline QVariant msSiteModeAddThumbBarButton(const QString& bstrIconURL, const QString& bstrTooltip);

    /*
    Method msSiteModeClearBadge
    */
    inline void msSiteModeClearBadge();

    /*
    Method msSiteModeClearIconOverlay
    */
    inline void msSiteModeClearIconOverlay();

    /*
    Method msSiteModeClearJumpList
    */
    inline void msSiteModeClearJumpList();

    /*
    Method msSiteModeCreateJumpList
    */
    inline void msSiteModeCreateJumpList(const QString& bstrHeader);

    /*
    Method msSiteModeRefreshBadge
    */
    inline void msSiteModeRefreshBadge();

    /*
    Method msSiteModeSetIconOverlay
    */
    inline void msSiteModeSetIconOverlay(const QString& IconUrl);

    /*
    Method msSiteModeSetIconOverlay
    */
    inline void msSiteModeSetIconOverlay(const QString& IconUrl, QVariant& pvarDescription);

    /*
    Method msSiteModeShowButtonStyle
    */
    inline void msSiteModeShowButtonStyle(const QVariant& uiButtonID, const QVariant& uiStyleID);

    /*
    Method msSiteModeShowJumpList
    */
    inline void msSiteModeShowJumpList();

    /*
    Method msSiteModeShowThumbBar
    */
    inline void msSiteModeShowThumbBar();

    /*
    Method msSiteModeUpdateThumbBarButton
    */
    inline void msSiteModeUpdateThumbBarButton(const QVariant& ButtonID, bool fEnabled, bool fVisible);

    /*
    Method msTrackingProtectionEnabled
    */
    inline bool msTrackingProtectionEnabled();

// meta object functions
    static const QMetaObject staticMetaObject;
    virtual const QMetaObject *metaObject() const { return &staticMetaObject; }
    virtual void *qt_metacast(const char *);
};

class SHDOCVW_EXPORT IShellUIHelper6 : public QAxObject
{
public:
    IShellUIHelper6(IDispatch *subobject = 0, QAxObject *parent = 0)
    : QAxObject((IUnknown*)subobject, parent)
    {
        internalRelease();
    }

    /*
    Method AddChannel
    */
    inline void AddChannel(const QString& URL);

    /*
    Method AddDesktopComponent
    */
    inline void AddDesktopComponent(const QString& URL, const QString& Type);

    /*
    Method AddDesktopComponent
    */
    inline void AddDesktopComponent(const QString& URL, const QString& Type, QVariant& Left);

    /*
    Method AddDesktopComponent
    */
    inline void AddDesktopComponent(const QString& URL, const QString& Type, QVariant& Left, QVariant& Top);

    /*
    Method AddDesktopComponent
    */
    inline void AddDesktopComponent(const QString& URL, const QString& Type, QVariant& Left, QVariant& Top, QVariant& Width);

    /*
    Method AddDesktopComponent
    */
    inline void AddDesktopComponent(const QString& URL, const QString& Type, QVariant& Left, QVariant& Top, QVariant& Width, QVariant& Height);

    /*
    Method AddFavorite
    */
    inline void AddFavorite(const QString& URL);

    /*
    Method AddFavorite
    */
    inline void AddFavorite(const QString& URL, QVariant& Title);

    /*
    Method AddSearchProvider
    */
    inline void AddSearchProvider(const QString& URL);

    /*
    Method AddService
    */
    inline void AddService(const QString& URL);

    /*
    Method AddToFavoritesBar
    */
    inline void AddToFavoritesBar(const QString& URL, const QString& Title);

    /*
    Method AddToFavoritesBar
    */
    inline void AddToFavoritesBar(const QString& URL, const QString& Title, QVariant& Type);

    /*
    Method AutoCompleteAttach
    */
    inline void AutoCompleteAttach();

    /*
    Method AutoCompleteAttach
    */
    inline void AutoCompleteAttach(QVariant& Reserved);

    /*
    Method AutoCompleteSaveForm
    */
    inline void AutoCompleteSaveForm();

    /*
    Method AutoCompleteSaveForm
    */
    inline void AutoCompleteSaveForm(QVariant& Form);

    /*
    Method AutoScan
    */
    inline void AutoScan(const QString& strSearch, const QString& strFailureUrl);

    /*
    Method AutoScan
    */
    inline void AutoScan(const QString& strSearch, const QString& strFailureUrl, QVariant& pvarTargetFrame);

    /*
    Method BrandImageUri
    */
    inline QString BrandImageUri();

    /*
    Method BuildNewTabPage
    */
    inline void BuildNewTabPage();

    /*
    Method ContentDiscoveryReset
    */
    inline void ContentDiscoveryReset();

    /*
    Method CustomizeClearType
    */
    inline void CustomizeClearType(bool fSet);

    /*
    Method CustomizeSettings
    */
    inline void CustomizeSettings(bool fSQM, bool fPhishing, const QString& bstrLocale);

    /*
    Method DefaultSearchProvider
    */
    inline QString DefaultSearchProvider();

    /*
    Method DiagnoseConnection
    */
    inline void DiagnoseConnection();

    /*
    Method EnableSuggestedSites
    */
    inline void EnableSuggestedSites(bool fEnable);

    /*
    Method ImportExportFavorites
    */
    inline void ImportExportFavorites(bool fImport, const QString& strImpExpPath);

    /*
    Method InPrivateFilteringEnabled
    */
    inline bool InPrivateFilteringEnabled();

    /*
    Method IsSearchMigrated
    */
    inline bool IsSearchMigrated();

    /*
    Method IsSearchProviderInstalled
    */
    inline uint IsSearchProviderInstalled(const QString& URL);

    /*
    Method IsServiceInstalled
    */
    inline uint IsServiceInstalled(const QString& URL, const QString& Verb);

    /*
    Method IsSubscribed
    */
    inline bool IsSubscribed(const QString& URL);

    /*
    Method IsSuggestedSitesEnabled
    */
    inline bool IsSuggestedSitesEnabled();

    /*
    Method NavigateAndFind
    */
    inline void NavigateAndFind(const QString& URL, const QString& strQuery, QVariant& varTargetFrame);

    /*
    Method NavigateToSuggestedSites
    */
    inline void NavigateToSuggestedSites(const QString& bstrRelativeUrl);

    /*
    Method PhishingEnabled
    */
    inline bool PhishingEnabled();

    /*
    Method RefreshOfflineDesktop
    */
    inline void RefreshOfflineDesktop();

    /*
    Method ResetFirstBootMode
    */
    inline void ResetFirstBootMode();

    /*
    Method ResetSafeMode
    */
    inline void ResetSafeMode();

    /*
    Method RunOnceHasShown
    */
    inline bool RunOnceHasShown();

    /*
    Method RunOnceRequiredSettingsComplete
    */
    inline void RunOnceRequiredSettingsComplete(bool fComplete);

    /*
    Method RunOnceShown
    */
    inline void RunOnceShown();

    /*
    Method SearchGuideUrl
    */
    inline QString SearchGuideUrl();

    /*
    Method SetActivitiesVisible
    */
    inline void SetActivitiesVisible(bool fVisible);

    /*
    Method SetRecentlyClosedVisible
    */
    inline void SetRecentlyClosedVisible(bool fVisible);

    /*
    Method ShowBrowserUI
    */
    inline QVariant ShowBrowserUI(const QString& bstrName, QVariant& pvarIn);

    /*
    Method ShowInPrivateHelp
    */
    inline void ShowInPrivateHelp();

    /*
    Method ShowTabsHelp
    */
    inline void ShowTabsHelp();

    /*
    Method SkipRunOnce
    */
    inline void SkipRunOnce();

    /*
    Method SkipTabsWelcome
    */
    inline void SkipTabsWelcome();

    /*
    Method SqmEnabled
    */
    inline bool SqmEnabled();

    /*
    Method msActiveXFilteringEnabled
    */
    inline bool msActiveXFilteringEnabled();

    /*
    Method msAddSiteMode
    */
    inline void msAddSiteMode();

    /*
    Method msAddTrackingProtectionList
    */
    inline void msAddTrackingProtectionList(const QString& URL, const QString& bstrFilterName);

    /*
    Method msChangeDefaultBrowser
    */
    inline void msChangeDefaultBrowser(bool fChange);

    /*
    Method msClearTile
    */
    inline void msClearTile();

    /*
    Method msDiagnoseConnectionUILess
    */
    inline void msDiagnoseConnectionUILess();

    /*
    Method msEnableTileNotificationQueue
    */
    inline void msEnableTileNotificationQueue(bool fChange);

    /*
    Method msEnableTileNotificationQueueForSquare150x150
    */
    inline void msEnableTileNotificationQueueForSquare150x150(bool fChange);

    /*
    Method msEnableTileNotificationQueueForSquare310x310
    */
    inline void msEnableTileNotificationQueueForSquare310x310(bool fChange);

    /*
    Method msEnableTileNotificationQueueForWide310x150
    */
    inline void msEnableTileNotificationQueueForWide310x150(bool fChange);

    /*
    Method msIsSiteMode
    */
    inline bool msIsSiteMode();

    /*
    Method msIsSiteModeFirstRun
    */
    inline QVariant msIsSiteModeFirstRun(bool fPreserveState);

    /*
    Method msLaunchInternetOptions
    */
    inline void msLaunchInternetOptions();

    /*
    Method msLaunchNetworkClientHelp
    */
    inline void msLaunchNetworkClientHelp();

    /*
    Method msPinnedSiteState
    */
    inline QVariant msPinnedSiteState();

    /*
    Method msProvisionNetworks
    */
    inline QVariant msProvisionNetworks(const QString& bstrProvisioningXml);

    /*
    Method msRemoveScheduledTileNotification
    */
    inline void msRemoveScheduledTileNotification(const QString& bstrNotificationId);

    /*
    Method msReportSafeUrl
    */
    inline void msReportSafeUrl();

    /*
    Method msScheduledTileNotification
    */
    inline void msScheduledTileNotification(const QString& bstrNotificationXml, const QString& bstrNotificationId, const QString& bstrNotificationTag);

    /*
    Method msScheduledTileNotification
    */
    inline void msScheduledTileNotification(const QString& bstrNotificationXml, const QString& bstrNotificationId, const QString& bstrNotificationTag, const QVariant& startTime);

    /*
    Method msScheduledTileNotification
    */
    inline void msScheduledTileNotification(const QString& bstrNotificationXml, const QString& bstrNotificationId, const QString& bstrNotificationTag, const QVariant& startTime, const QVariant& expirationTime);

    /*
    Method msSiteModeActivate
    */
    inline void msSiteModeActivate();

    /*
    Method msSiteModeAddButtonStyle
    */
    inline QVariant msSiteModeAddButtonStyle(const QVariant& uiButtonID, const QString& bstrIconURL, const QString& bstrTooltip);

    /*
    Method msSiteModeAddJumpListItem
    */
    inline void msSiteModeAddJumpListItem(const QString& bstrName, const QString& bstrActionUri, const QString& bstrIconUri);

    /*
    Method msSiteModeAddJumpListItem
    */
    inline void msSiteModeAddJumpListItem(const QString& bstrName, const QString& bstrActionUri, const QString& bstrIconUri, QVariant& pvarWindowType);

    /*
    Method msSiteModeAddThumbBarButton
    */
    inline QVariant msSiteModeAddThumbBarButton(const QString& bstrIconURL, const QString& bstrTooltip);

    /*
    Method msSiteModeClearBadge
    */
    inline void msSiteModeClearBadge();

    /*
    Method msSiteModeClearIconOverlay
    */
    inline void msSiteModeClearIconOverlay();

    /*
    Method msSiteModeClearJumpList
    */
    inline void msSiteModeClearJumpList();

    /*
    Method msSiteModeCreateJumpList
    */
    inline void msSiteModeCreateJumpList(const QString& bstrHeader);

    /*
    Method msSiteModeRefreshBadge
    */
    inline void msSiteModeRefreshBadge();

    /*
    Method msSiteModeSetIconOverlay
    */
    inline void msSiteModeSetIconOverlay(const QString& IconUrl);

    /*
    Method msSiteModeSetIconOverlay
    */
    inline void msSiteModeSetIconOverlay(const QString& IconUrl, QVariant& pvarDescription);

    /*
    Method msSiteModeShowButtonStyle
    */
    inline void msSiteModeShowButtonStyle(const QVariant& uiButtonID, const QVariant& uiStyleID);

    /*
    Method msSiteModeShowJumpList
    */
    inline void msSiteModeShowJumpList();

    /*
    Method msSiteModeShowThumbBar
    */
    inline void msSiteModeShowThumbBar();

    /*
    Method msSiteModeUpdateThumbBarButton
    */
    inline void msSiteModeUpdateThumbBarButton(const QVariant& ButtonID, bool fEnabled, bool fVisible);

    /*
    Method msStartPeriodicBadgeUpdate
    */
    inline void msStartPeriodicBadgeUpdate(const QString& pollingUri);

    /*
    Method msStartPeriodicBadgeUpdate
    */
    inline void msStartPeriodicBadgeUpdate(const QString& pollingUri, const QVariant& startTime);

    /*
    Method msStartPeriodicBadgeUpdate
    */
    inline void msStartPeriodicBadgeUpdate(const QString& pollingUri, const QVariant& startTime, const QVariant& uiUpdateRecurrence);

    /*
    Method msStartPeriodicTileUpdate
    */
    inline void msStartPeriodicTileUpdate(const QVariant& pollingUris);

    /*
    Method msStartPeriodicTileUpdate
    */
    inline void msStartPeriodicTileUpdate(const QVariant& pollingUris, const QVariant& startTime);

    /*
    Method msStartPeriodicTileUpdate
    */
    inline void msStartPeriodicTileUpdate(const QVariant& pollingUris, const QVariant& startTime, const QVariant& uiUpdateRecurrence);

    /*
    Method msStartPeriodicTileUpdateBatch
    */
    inline void msStartPeriodicTileUpdateBatch(const QVariant& pollingUris);

    /*
    Method msStartPeriodicTileUpdateBatch
    */
    inline void msStartPeriodicTileUpdateBatch(const QVariant& pollingUris, const QVariant& startTime);

    /*
    Method msStartPeriodicTileUpdateBatch
    */
    inline void msStartPeriodicTileUpdateBatch(const QVariant& pollingUris, const QVariant& startTime, const QVariant& uiUpdateRecurrence);

    /*
    Method msStopPeriodicBadgeUpdate
    */
    inline void msStopPeriodicBadgeUpdate();

    /*
    Method msStopPeriodicTileUpdate
    */
    inline void msStopPeriodicTileUpdate();

    /*
    Method msTrackingProtectionEnabled
    */
    inline bool msTrackingProtectionEnabled();

// meta object functions
    static const QMetaObject staticMetaObject;
    virtual const QMetaObject *metaObject() const { return &staticMetaObject; }
    virtual void *qt_metacast(const char *);
};

// skipping event interface DShellNameSpaceEvents

class SHDOCVW_EXPORT IShellFavoritesNameSpace : public QAxObject
{
public:
    IShellFavoritesNameSpace(IDispatch *subobject = 0, QAxObject *parent = 0)
    : QAxObject((IUnknown*)subobject, parent)
    {
        internalRelease();
    }

    /*
    Property SubscriptionsEnabled

    Query to see if subscriptions are enabled

    */
    inline bool SubscriptionsEnabled() const; //Returns the value of SubscriptionsEnabled

    /*
    Method CreateSubscriptionForSelection

    method CreateSubscriptionForSelection

    */
    inline bool CreateSubscriptionForSelection();

    /*
    Method DeleteSubscriptionForSelection

    method DeleteSubscriptionForSelection

    */
    inline bool DeleteSubscriptionForSelection();

    /*
    Method Export

    method Export

    */
    inline void Export();

    /*
    Method Import

    method Import

    */
    inline void Import();

    /*
    Method InvokeContextMenuCommand

    method InvokeContextMenuCommand

    */
    inline void InvokeContextMenuCommand(const QString& strCommand);

    /*
    Method MoveSelectionDown

    method MoveSelectionDown

    */
    inline void MoveSelectionDown();

    /*
    Method MoveSelectionTo

    method MoveSelectionTo

    */
    inline void MoveSelectionTo();

    /*
    Method MoveSelectionUp

    method MoveSelectionUp

    */
    inline void MoveSelectionUp();

    /*
    Method NewFolder

    method NewFolder

    */
    inline void NewFolder();

    /*
    Method ResetSort

    method ResetSort

    */
    inline void ResetSort();

    /*
    Method SetRoot

    old, use put_Root() instead

    */
    inline void SetRoot(const QString& bstrFullPath);

    /*
    Method Synchronize

    method Synchronize

    */
    inline void Synchronize();

// meta object functions
    static const QMetaObject staticMetaObject;
    virtual const QMetaObject *metaObject() const { return &staticMetaObject; }
    virtual void *qt_metacast(const char *);
};

class SHDOCVW_EXPORT IShellNameSpace : public QAxObject
{
public:
    IShellNameSpace(IDispatch *subobject = 0, QAxObject *parent = 0)
    : QAxObject((IUnknown*)subobject, parent)
    {
        internalRelease();
    }

    /*
    Property Columns
    */
    inline QString Columns() const; //Returns the value of Columns
    inline void SetColumns(const QString& value); //Sets the value of the Columns property

    /*
    Property CountViewTypes

    number of view types

    */
    inline int CountViewTypes() const; //Returns the value of CountViewTypes

    /*
    Property Depth
    */
    inline int Depth() const; //Returns the value of Depth
    inline void SetDepth(int value); //Sets the value of the Depth property

    /*
    Property EnumOptions

    options 

    */
    inline int EnumOptions() const; //Returns the value of EnumOptions
    inline void SetEnumOptions(int value); //Sets the value of the EnumOptions property

    /*
    Property Flags
    */
    inline uint Flags() const; //Returns the value of Flags
    inline void SetFlags(uint value); //Sets the value of the Flags property

    /*
    Property Mode
    */
    inline uint Mode() const; //Returns the value of Mode
    inline void SetMode(uint value); //Sets the value of the Mode property

    /*
    Property Root

    get the root item

    */
    inline QVariant Root() const; //Returns the value of Root
    inline void SetRoot(const QVariant& value); //Sets the value of the Root property

    /*
    Property SelectedItem

    get the selected item

    */
    inline IDispatch* SelectedItem() const; //Returns the value of SelectedItem
    inline void SetSelectedItem(IDispatch* value); //Sets the value of the SelectedItem property

    /*
    Property SubscriptionsEnabled

    Query to see if subscriptions are enabled

    */
    inline bool SubscriptionsEnabled() const; //Returns the value of SubscriptionsEnabled

    /*
    Property TVFlags
    */
    inline uint TVFlags() const; //Returns the value of TVFlags
    inline void SetTVFlags(uint value); //Sets the value of the TVFlags property

    /*
    Method CreateSubscriptionForSelection

    method CreateSubscriptionForSelection

    */
    inline bool CreateSubscriptionForSelection();

    /*
    Method DeleteSubscriptionForSelection

    method DeleteSubscriptionForSelection

    */
    inline bool DeleteSubscriptionForSelection();

    /*
    Method Expand

    expands item specified depth

    */
    inline void Expand(const QVariant& var, int iDepth);

    /*
    Method Export

    method Export

    */
    inline void Export();

    /*
    Method Import

    method Import

    */
    inline void Import();

    /*
    Method InvokeContextMenuCommand

    method InvokeContextMenuCommand

    */
    inline void InvokeContextMenuCommand(const QString& strCommand);

    /*
    Method MoveSelectionDown

    method MoveSelectionDown

    */
    inline void MoveSelectionDown();

    /*
    Method MoveSelectionTo

    method MoveSelectionTo

    */
    inline void MoveSelectionTo();

    /*
    Method MoveSelectionUp

    method MoveSelectionUp

    */
    inline void MoveSelectionUp();

    /*
    Method NewFolder

    method NewFolder

    */
    inline void NewFolder();

    /*
    Method ResetSort

    method ResetSort

    */
    inline void ResetSort();

    /*
    Method SelectedItems

    collection of selected items

    */
    inline IDispatch* SelectedItems();

    /*
    Method SetViewType

    set view type

    */
    inline void SetViewType(int iType);

    /*
    Method Synchronize

    method Synchronize

    */
    inline void Synchronize();

    /*
    Method UnselectAll

    unselects all items

    */
    inline void UnselectAll();

// meta object functions
    static const QMetaObject staticMetaObject;
    virtual const QMetaObject *metaObject() const { return &staticMetaObject; }
    virtual void *qt_metacast(const char *);
};

class SHDOCVW_EXPORT IScriptErrorList : public QAxObject
{
public:
    IScriptErrorList(IDispatch *subobject = 0, QAxObject *parent = 0)
    : QAxObject((IUnknown*)subobject, parent)
    {
        internalRelease();
    }

    /*
    Method advanceError
    */
    inline void advanceError();

    /*
    Method canAdvanceError
    */
    inline int canAdvanceError();

    /*
    Method canRetreatError
    */
    inline int canRetreatError();

    /*
    Method getAlwaysShowLockState
    */
    inline int getAlwaysShowLockState();

    /*
    Method getDetailsPaneOpen
    */
    inline int getDetailsPaneOpen();

    /*
    Method getErrorChar
    */
    inline int getErrorChar();

    /*
    Method getErrorCode
    */
    inline int getErrorCode();

    /*
    Method getErrorLine
    */
    inline int getErrorLine();

    /*
    Method getErrorMsg
    */
    inline QString getErrorMsg();

    /*
    Method getErrorUrl
    */
    inline QString getErrorUrl();

    /*
    Method getPerErrorDisplay
    */
    inline int getPerErrorDisplay();

    /*
    Method retreatError
    */
    inline void retreatError();

    /*
    Method setDetailsPaneOpen
    */
    inline void setDetailsPaneOpen(int fDetailsPaneOpen);

    /*
    Method setPerErrorDisplay
    */
    inline void setPerErrorDisplay(int fPerErrorDisplay);

// meta object functions
    static const QMetaObject staticMetaObject;
    virtual const QMetaObject *metaObject() const { return &staticMetaObject; }
    virtual void *qt_metacast(const char *);
};

// Actual coclasses
class SHDOCVW_EXPORT WebBrowser_V1 : public QAxWidget
{
public:
    WebBrowser_V1(QWidget *parent = 0, Qt::WindowFlags f = 0)
    : QAxWidget(parent, f)
    {
        setControl("{eab22ac3-30c1-11cf-a7eb-0000c05bae0b}");
    }

    /*
    Property AddressBar
    */
    inline bool AddressBar() const; //Returns the value of AddressBar
    inline void SetAddressBar(bool value); //Sets the value of the AddressBar property

    /*
    Property Application

    Returns the application automation object if accessible, this automation object otherwise..

    */
    inline IDispatch* Application() const; //Returns the value of Application

    /*
    Property Busy

    Query to see if something is still in progress.

    */
    inline bool Busy() const; //Returns the value of Busy

    /*
    Property Container

    Returns the container/parent automation object, if any.

    */
    inline IDispatch* Container() const; //Returns the value of Container

    /*
    Property Document

    Returns the active Document automation object, if any.

    */
    inline IDispatch* Document() const; //Returns the value of Document

    /*
    Property FullName
    */
    inline QString FullName() const; //Returns the value of FullName

    /*
    Property FullScreen
    */
    inline bool FullScreen() const; //Returns the value of FullScreen
    inline void SetFullScreen(bool value); //Sets the value of the FullScreen property

    /*
    Property HWND
    */
    inline int HWND() const; //Returns the value of HWND

    /*
    Property Height

    The vertical dimension (pixels) of the frame window/object.

    */
    inline int Height() const; //Returns the value of Height
    inline void SetHeight(int value); //Sets the value of the Height property

    /*
    Property Left

    The horizontal position (pixels) of the frame window relative to the screen/container.

    */
    inline int Left() const; //Returns the value of Left
    inline void SetLeft(int value); //Sets the value of the Left property

    /*
    Property LocationName

    Gets the short (UI-friendly) name of the URL/file currently viewed.

    */
    inline QString LocationName() const; //Returns the value of LocationName

    /*
    Property LocationURL

    Gets the full URL/path currently viewed.

    */
    inline QString LocationURL() const; //Returns the value of LocationURL

    /*
    Property MenuBar
    */
    inline bool MenuBar() const; //Returns the value of MenuBar
    inline void SetMenuBar(bool value); //Sets the value of the MenuBar property

    /*
    Property Name
    */
    inline QString Name() const; //Returns the value of Name

    /*
    Property Offline
    */
    inline bool Offline() const; //Returns the value of Offline
    inline void SetOffline(bool value); //Sets the value of the Offline property

    /*
    Property Parent

    Returns the automation object of the container/parent if one exists or this automation object.

    */
    inline IDispatch* Parent() const; //Returns the value of Parent

    /*
    Property Path
    */
    inline QString Path() const; //Returns the value of Path

    /*
    Property ReadyState
    */
    inline SHDocVw::tagREADYSTATE ReadyState() const; //Returns the value of ReadyState

    /*
    Property RegisterAsBrowser
    */
    inline bool RegisterAsBrowser() const; //Returns the value of RegisterAsBrowser
    inline void SetRegisterAsBrowser(bool value); //Sets the value of the RegisterAsBrowser property

    /*
    Property RegisterAsDropTarget
    */
    inline bool RegisterAsDropTarget() const; //Returns the value of RegisterAsDropTarget
    inline void SetRegisterAsDropTarget(bool value); //Sets the value of the RegisterAsDropTarget property

    /*
    Property Resizable
    */
    inline bool Resizable() const; //Returns the value of Resizable
    inline void SetResizable(bool value); //Sets the value of the Resizable property

    /*
    Property Silent
    */
    inline bool Silent() const; //Returns the value of Silent
    inline void SetSilent(bool value); //Sets the value of the Silent property

    /*
    Property StatusBar
    */
    inline bool StatusBar() const; //Returns the value of StatusBar
    inline void SetStatusBar(bool value); //Sets the value of the StatusBar property

    /*
    Property StatusText
    */
    inline QString StatusText() const; //Returns the value of StatusText
    inline void SetStatusText(const QString& value); //Sets the value of the StatusText property

    /*
    Property TheaterMode
    */
    inline bool TheaterMode() const; //Returns the value of TheaterMode
    inline void SetTheaterMode(bool value); //Sets the value of the TheaterMode property

    /*
    Property ToolBar
    */
    inline int ToolBar() const; //Returns the value of ToolBar
    inline void SetToolBar(int value); //Sets the value of the ToolBar property

    /*
    Property Top

    The vertical position (pixels) of the frame window relative to the screen/container.

    */
    inline int Top() const; //Returns the value of Top
    inline void SetTop(int value); //Sets the value of the Top property

    /*
    Property TopLevelContainer

    Returns True if this is the top level object.

    */
    inline bool TopLevelContainer() const; //Returns the value of TopLevelContainer

    /*
    Property Type

    Returns the type of the contained document object.

    */
    inline QString Type() const; //Returns the value of Type

    /*
    Property Visible
    */
    inline bool Visible() const; //Returns the value of Visible
    inline void SetVisible(bool value); //Sets the value of the Visible property

    /*
    Property Width

    The horizontal dimension (pixels) of the frame window/object.

    */
    inline int Width() const; //Returns the value of Width
    inline void SetWidth(int value); //Sets the value of the Width property

    /*
    Method ClientToWindow
    */
    inline void ClientToWindow(int& pcx, int& pcy);

    /*
    Method ExecWB
    */
    inline void ExecWB(SHDocVw::OLECMDID cmdID, SHDocVw::OLECMDEXECOPT cmdexecopt);

    /*
    Method ExecWB
    */
    inline void ExecWB(SHDocVw::OLECMDID cmdID, SHDocVw::OLECMDEXECOPT cmdexecopt, QVariant& pvaIn);

    /*
    Method ExecWB
    */
    inline void ExecWB(SHDocVw::OLECMDID cmdID, SHDocVw::OLECMDEXECOPT cmdexecopt, QVariant& pvaIn, QVariant& pvaOut);

    /*
    Method GetProperty
    */
    inline QVariant GetProperty(const QString& Property);

    /*
    Method GoBack

    Navigates to the previous item in the history list.

    */
    inline void GoBack();

    /*
    Method GoForward

    Navigates to the next item in the history list.

    */
    inline void GoForward();

    /*
    Method GoHome

    Go home/start page.

    */
    inline void GoHome();

    /*
    Method GoSearch

    Go Search Page.

    */
    inline void GoSearch();

    /*
    Method Navigate

    Navigates to a URL or file.

    */
    inline void Navigate(const QString& URL);

    /*
    Method Navigate

    Navigates to a URL or file.

    */
    inline void Navigate(const QString& URL, QVariant& Flags);

    /*
    Method Navigate

    Navigates to a URL or file.

    */
    inline void Navigate(const QString& URL, QVariant& Flags, QVariant& TargetFrameName);

    /*
    Method Navigate

    Navigates to a URL or file.

    */
    inline void Navigate(const QString& URL, QVariant& Flags, QVariant& TargetFrameName, QVariant& PostData);

    /*
    Method Navigate

    Navigates to a URL or file.

    */
    inline void Navigate(const QString& URL, QVariant& Flags, QVariant& TargetFrameName, QVariant& PostData, QVariant& Headers);

    /*
    Method Navigate2
    */
    inline void Navigate2(QVariant& URL);

    /*
    Method Navigate2
    */
    inline void Navigate2(QVariant& URL, QVariant& Flags);

    /*
    Method Navigate2
    */
    inline void Navigate2(QVariant& URL, QVariant& Flags, QVariant& TargetFrameName);

    /*
    Method Navigate2
    */
    inline void Navigate2(QVariant& URL, QVariant& Flags, QVariant& TargetFrameName, QVariant& PostData);

    /*
    Method Navigate2
    */
    inline void Navigate2(QVariant& URL, QVariant& Flags, QVariant& TargetFrameName, QVariant& PostData, QVariant& Headers);

    /*
    Method PutProperty
    */
    inline void PutProperty(const QString& Property, const QVariant& vtValue);

    /*
    Method QueryStatusWB
    */
    inline OLECMDF QueryStatusWB(SHDocVw::OLECMDID cmdID);

    /*
    Method Quit
    */
    inline void Quit();

    /*
    Method Refresh

    Refresh the currently viewed page.

    */
    inline void Refresh();

    /*
    Method Refresh2

    Refresh the currently viewed page.

    */
    inline void Refresh2();

    /*
    Method Refresh2

    Refresh the currently viewed page.

    */
    inline void Refresh2(QVariant& Level);

    /*
    Method ShowBrowserBar
    */
    inline void ShowBrowserBar(QVariant& pvaClsid);

    /*
    Method ShowBrowserBar
    */
    inline void ShowBrowserBar(QVariant& pvaClsid, QVariant& pvarShow);

    /*
    Method ShowBrowserBar
    */
    inline void ShowBrowserBar(QVariant& pvaClsid, QVariant& pvarShow, QVariant& pvarSize);

    /*
    Method Stop

    Stops opening a file.

    */
    inline void Stop();

// meta object functions
    static const QMetaObject staticMetaObject;
    virtual const QMetaObject *metaObject() const { return &staticMetaObject; }
    virtual void *qt_metacast(const char *);
};

class SHDOCVW_EXPORT WebBrowser : public QAxWidget
{
public:
    WebBrowser(QWidget *parent = 0, Qt::WindowFlags f = 0)
    : QAxWidget(parent, f)
    {
        setControl("{8856f961-340a-11d0-a96b-00c04fd705a2}");
    }

    /*
    Property AddressBar

    Controls whether address bar is shown

    */
    inline bool AddressBar() const; //Returns the value of AddressBar
    inline void SetAddressBar(bool value); //Sets the value of the AddressBar property

    /*
    Property Application

    Returns the application automation object if accessible, this automation object otherwise..

    */
    inline IDispatch* Application() const; //Returns the value of Application

    /*
    Property Busy

    Query to see if something is still in progress.

    */
    inline bool Busy() const; //Returns the value of Busy

    /*
    Property Container

    Returns the container/parent automation object, if any.

    */
    inline IDispatch* Container() const; //Returns the value of Container

    /*
    Property Document

    Returns the active Document automation object, if any.

    */
    inline IDispatch* Document() const; //Returns the value of Document

    /*
    Property FullName

    Returns file specification of the application, including path.

    */
    inline QString FullName() const; //Returns the value of FullName

    /*
    Property FullScreen

    Maximizes window and turns off statusbar, toolbar, menubar, and titlebar.

    */
    inline bool FullScreen() const; //Returns the value of FullScreen
    inline void SetFullScreen(bool value); //Sets the value of the FullScreen property

    /*
    Property HWND

    Returns the HWND of the current IE window.

    */
    inline int HWND() const; //Returns the value of HWND

    /*
    Property Height

    The vertical dimension (pixels) of the frame window/object.

    */
    inline int Height() const; //Returns the value of Height
    inline void SetHeight(int value); //Sets the value of the Height property

    /*
    Property Left

    The horizontal position (pixels) of the frame window relative to the screen/container.

    */
    inline int Left() const; //Returns the value of Left
    inline void SetLeft(int value); //Sets the value of the Left property

    /*
    Property LocationName

    Gets the short (UI-friendly) name of the URL/file currently viewed.

    */
    inline QString LocationName() const; //Returns the value of LocationName

    /*
    Property LocationURL

    Gets the full URL/path currently viewed.

    */
    inline QString LocationURL() const; //Returns the value of LocationURL

    /*
    Property MenuBar

    Controls whether menubar is shown.

    */
    inline bool MenuBar() const; //Returns the value of MenuBar
    inline void SetMenuBar(bool value); //Sets the value of the MenuBar property

    /*
    Property Name

    Returns name of the application.

    */
    inline QString Name() const; //Returns the value of Name

    /*
    Property Offline

    Controls if the frame is offline (read from cache)

    */
    inline bool Offline() const; //Returns the value of Offline
    inline void SetOffline(bool value); //Sets the value of the Offline property

    /*
    Property Parent

    Returns the automation object of the container/parent if one exists or this automation object.

    */
    inline IDispatch* Parent() const; //Returns the value of Parent

    /*
    Property Path

    Returns the path to the application.

    */
    inline QString Path() const; //Returns the value of Path

    /*
    Property ReadyState
    */
    inline SHDocVw::tagREADYSTATE ReadyState() const; //Returns the value of ReadyState

    /*
    Property RegisterAsBrowser

    Registers OC as a top-level browser (for target name resolution)

    */
    inline bool RegisterAsBrowser() const; //Returns the value of RegisterAsBrowser
    inline void SetRegisterAsBrowser(bool value); //Sets the value of the RegisterAsBrowser property

    /*
    Property RegisterAsDropTarget

    Registers OC as a drop target for navigation

    */
    inline bool RegisterAsDropTarget() const; //Returns the value of RegisterAsDropTarget
    inline void SetRegisterAsDropTarget(bool value); //Sets the value of the RegisterAsDropTarget property

    /*
    Property Resizable

    Controls whether the window is resizable

    */
    inline bool Resizable() const; //Returns the value of Resizable
    inline void SetResizable(bool value); //Sets the value of the Resizable property

    /*
    Property Silent

    Controls if any dialog boxes can be shown

    */
    inline bool Silent() const; //Returns the value of Silent
    inline void SetSilent(bool value); //Sets the value of the Silent property

    /*
    Property StatusBar

    Turn on or off the statusbar.

    */
    inline bool StatusBar() const; //Returns the value of StatusBar
    inline void SetStatusBar(bool value); //Sets the value of the StatusBar property

    /*
    Property StatusText

    Text of Status window.

    */
    inline QString StatusText() const; //Returns the value of StatusText
    inline void SetStatusText(const QString& value); //Sets the value of the StatusText property

    /*
    Property TheaterMode

    Controls if the browser is in theater mode

    */
    inline bool TheaterMode() const; //Returns the value of TheaterMode
    inline void SetTheaterMode(bool value); //Sets the value of the TheaterMode property

    /*
    Property ToolBar

    Controls which toolbar is shown.

    */
    inline int ToolBar() const; //Returns the value of ToolBar
    inline void SetToolBar(int value); //Sets the value of the ToolBar property

    /*
    Property Top

    The vertical position (pixels) of the frame window relative to the screen/container.

    */
    inline int Top() const; //Returns the value of Top
    inline void SetTop(int value); //Sets the value of the Top property

    /*
    Property TopLevelContainer

    Returns True if this is the top level object.

    */
    inline bool TopLevelContainer() const; //Returns the value of TopLevelContainer

    /*
    Property Type

    Returns the type of the contained document object.

    */
    inline QString Type() const; //Returns the value of Type

    /*
    Property Visible

    Determines whether the application is visible or hidden.

    */
    inline bool Visible() const; //Returns the value of Visible
    inline void SetVisible(bool value); //Sets the value of the Visible property

    /*
    Property Width

    The horizontal dimension (pixels) of the frame window/object.

    */
    inline int Width() const; //Returns the value of Width
    inline void SetWidth(int value); //Sets the value of the Width property

    /*
    Method ClientToWindow

    Converts client sizes into window sizes.

    */
    inline void ClientToWindow(int& pcx, int& pcy);

    /*
    Method ExecWB

    IOleCommandTarget::Exec

    */
    inline void ExecWB(SHDocVw::OLECMDID cmdID, SHDocVw::OLECMDEXECOPT cmdexecopt);

    /*
    Method ExecWB

    IOleCommandTarget::Exec

    */
    inline void ExecWB(SHDocVw::OLECMDID cmdID, SHDocVw::OLECMDEXECOPT cmdexecopt, QVariant& pvaIn);

    /*
    Method ExecWB

    IOleCommandTarget::Exec

    */
    inline void ExecWB(SHDocVw::OLECMDID cmdID, SHDocVw::OLECMDEXECOPT cmdexecopt, QVariant& pvaIn, QVariant& pvaOut);

    /*
    Method GetProperty

    Retrieve the Associated value for the property vtValue in the context of the object.

    */
    inline QVariant GetProperty(const QString& Property);

    /*
    Method GoBack

    Navigates to the previous item in the history list.

    */
    inline void GoBack();

    /*
    Method GoForward

    Navigates to the next item in the history list.

    */
    inline void GoForward();

    /*
    Method GoHome

    Go home/start page.

    */
    inline void GoHome();

    /*
    Method GoSearch

    Go Search Page.

    */
    inline void GoSearch();

    /*
    Method Navigate

    Navigates to a URL or file.

    */
    inline void Navigate(const QString& URL);

    /*
    Method Navigate

    Navigates to a URL or file.

    */
    inline void Navigate(const QString& URL, QVariant& Flags);

    /*
    Method Navigate

    Navigates to a URL or file.

    */
    inline void Navigate(const QString& URL, QVariant& Flags, QVariant& TargetFrameName);

    /*
    Method Navigate

    Navigates to a URL or file.

    */
    inline void Navigate(const QString& URL, QVariant& Flags, QVariant& TargetFrameName, QVariant& PostData);

    /*
    Method Navigate

    Navigates to a URL or file.

    */
    inline void Navigate(const QString& URL, QVariant& Flags, QVariant& TargetFrameName, QVariant& PostData, QVariant& Headers);

    /*
    Method Navigate2

    Navigates to a URL or file or pidl.

    */
    inline void Navigate2(QVariant& URL);

    /*
    Method Navigate2

    Navigates to a URL or file or pidl.

    */
    inline void Navigate2(QVariant& URL, QVariant& Flags);

    /*
    Method Navigate2

    Navigates to a URL or file or pidl.

    */
    inline void Navigate2(QVariant& URL, QVariant& Flags, QVariant& TargetFrameName);

    /*
    Method Navigate2

    Navigates to a URL or file or pidl.

    */
    inline void Navigate2(QVariant& URL, QVariant& Flags, QVariant& TargetFrameName, QVariant& PostData);

    /*
    Method Navigate2

    Navigates to a URL or file or pidl.

    */
    inline void Navigate2(QVariant& URL, QVariant& Flags, QVariant& TargetFrameName, QVariant& PostData, QVariant& Headers);

    /*
    Method PutProperty

    Associates vtValue with the name szProperty in the context of the object.

    */
    inline void PutProperty(const QString& Property, const QVariant& vtValue);

    /*
    Method QueryStatusWB

    IOleCommandTarget::QueryStatus

    */
    inline OLECMDF QueryStatusWB(SHDocVw::OLECMDID cmdID);

    /*
    Method Quit

    Exits application and closes the open document.

    */
    inline void Quit();

    /*
    Method Refresh

    Refresh the currently viewed page.

    */
    inline void Refresh();

    /*
    Method Refresh2

    Refresh the currently viewed page.

    */
    inline void Refresh2();

    /*
    Method Refresh2

    Refresh the currently viewed page.

    */
    inline void Refresh2(QVariant& Level);

    /*
    Method ShowBrowserBar

    Set BrowserBar to Clsid

    */
    inline void ShowBrowserBar(QVariant& pvaClsid);

    /*
    Method ShowBrowserBar

    Set BrowserBar to Clsid

    */
    inline void ShowBrowserBar(QVariant& pvaClsid, QVariant& pvarShow);

    /*
    Method ShowBrowserBar

    Set BrowserBar to Clsid

    */
    inline void ShowBrowserBar(QVariant& pvaClsid, QVariant& pvarShow, QVariant& pvarSize);

    /*
    Method Stop

    Stops opening a file.

    */
    inline void Stop();

// meta object functions
    static const QMetaObject staticMetaObject;
    virtual const QMetaObject *metaObject() const { return &staticMetaObject; }
    virtual void *qt_metacast(const char *);
};

class SHDOCVW_EXPORT InternetExplorer : public QAxObject
{
public:
    InternetExplorer(QObject *parent = 0)
    : QAxObject(parent)
    {
        setControl("{0002df01-0000-0000-c000-000000000046}");
    }

    /*
    Property AddressBar

    Controls whether address bar is shown

    */
    inline bool AddressBar() const; //Returns the value of AddressBar
    inline void SetAddressBar(bool value); //Sets the value of the AddressBar property

    /*
    Property Application

    Returns the application automation object if accessible, this automation object otherwise..

    */
    inline IDispatch* Application() const; //Returns the value of Application

    /*
    Property Busy

    Query to see if something is still in progress.

    */
    inline bool Busy() const; //Returns the value of Busy

    /*
    Property Container

    Returns the container/parent automation object, if any.

    */
    inline IDispatch* Container() const; //Returns the value of Container

    /*
    Property Document

    Returns the active Document automation object, if any.

    */
    inline IDispatch* Document() const; //Returns the value of Document

    /*
    Property FullName

    Returns file specification of the application, including path.

    */
    inline QString FullName() const; //Returns the value of FullName

    /*
    Property FullScreen

    Maximizes window and turns off statusbar, toolbar, menubar, and titlebar.

    */
    inline bool FullScreen() const; //Returns the value of FullScreen
    inline void SetFullScreen(bool value); //Sets the value of the FullScreen property

    /*
    Property HWND

    Returns the HWND of the current IE window.

    */
    inline int HWND() const; //Returns the value of HWND

    /*
    Property Height

    The vertical dimension (pixels) of the frame window/object.

    */
    inline int Height() const; //Returns the value of Height
    inline void SetHeight(int value); //Sets the value of the Height property

    /*
    Property Left

    The horizontal position (pixels) of the frame window relative to the screen/container.

    */
    inline int Left() const; //Returns the value of Left
    inline void SetLeft(int value); //Sets the value of the Left property

    /*
    Property LocationName

    Gets the short (UI-friendly) name of the URL/file currently viewed.

    */
    inline QString LocationName() const; //Returns the value of LocationName

    /*
    Property LocationURL

    Gets the full URL/path currently viewed.

    */
    inline QString LocationURL() const; //Returns the value of LocationURL

    /*
    Property MenuBar

    Controls whether menubar is shown.

    */
    inline bool MenuBar() const; //Returns the value of MenuBar
    inline void SetMenuBar(bool value); //Sets the value of the MenuBar property

    /*
    Property Name

    Returns name of the application.

    */
    inline QString Name() const; //Returns the value of Name

    /*
    Property Offline

    Controls if the frame is offline (read from cache)

    */
    inline bool Offline() const; //Returns the value of Offline
    inline void SetOffline(bool value); //Sets the value of the Offline property

    /*
    Property Parent

    Returns the automation object of the container/parent if one exists or this automation object.

    */
    inline IDispatch* Parent() const; //Returns the value of Parent

    /*
    Property Path

    Returns the path to the application.

    */
    inline QString Path() const; //Returns the value of Path

    /*
    Property ReadyState
    */
    inline SHDocVw::tagREADYSTATE ReadyState() const; //Returns the value of ReadyState

    /*
    Property RegisterAsBrowser

    Registers OC as a top-level browser (for target name resolution)

    */
    inline bool RegisterAsBrowser() const; //Returns the value of RegisterAsBrowser
    inline void SetRegisterAsBrowser(bool value); //Sets the value of the RegisterAsBrowser property

    /*
    Property RegisterAsDropTarget

    Registers OC as a drop target for navigation

    */
    inline bool RegisterAsDropTarget() const; //Returns the value of RegisterAsDropTarget
    inline void SetRegisterAsDropTarget(bool value); //Sets the value of the RegisterAsDropTarget property

    /*
    Property Resizable

    Controls whether the window is resizable

    */
    inline bool Resizable() const; //Returns the value of Resizable
    inline void SetResizable(bool value); //Sets the value of the Resizable property

    /*
    Property Silent

    Controls if any dialog boxes can be shown

    */
    inline bool Silent() const; //Returns the value of Silent
    inline void SetSilent(bool value); //Sets the value of the Silent property

    /*
    Property StatusBar

    Turn on or off the statusbar.

    */
    inline bool StatusBar() const; //Returns the value of StatusBar
    inline void SetStatusBar(bool value); //Sets the value of the StatusBar property

    /*
    Property StatusText

    Text of Status window.

    */
    inline QString StatusText() const; //Returns the value of StatusText
    inline void SetStatusText(const QString& value); //Sets the value of the StatusText property

    /*
    Property TheaterMode

    Controls if the browser is in theater mode

    */
    inline bool TheaterMode() const; //Returns the value of TheaterMode
    inline void SetTheaterMode(bool value); //Sets the value of the TheaterMode property

    /*
    Property ToolBar

    Controls which toolbar is shown.

    */
    inline int ToolBar() const; //Returns the value of ToolBar
    inline void SetToolBar(int value); //Sets the value of the ToolBar property

    /*
    Property Top

    The vertical position (pixels) of the frame window relative to the screen/container.

    */
    inline int Top() const; //Returns the value of Top
    inline void SetTop(int value); //Sets the value of the Top property

    /*
    Property TopLevelContainer

    Returns True if this is the top level object.

    */
    inline bool TopLevelContainer() const; //Returns the value of TopLevelContainer

    /*
    Property Type

    Returns the type of the contained document object.

    */
    inline QString Type() const; //Returns the value of Type

    /*
    Property Visible

    Determines whether the application is visible or hidden.

    */
    inline bool Visible() const; //Returns the value of Visible
    inline void SetVisible(bool value); //Sets the value of the Visible property

    /*
    Property Width

    The horizontal dimension (pixels) of the frame window/object.

    */
    inline int Width() const; //Returns the value of Width
    inline void SetWidth(int value); //Sets the value of the Width property

    /*
    Method ClientToWindow

    Converts client sizes into window sizes.

    */
    inline void ClientToWindow(int& pcx, int& pcy);

    /*
    Method ExecWB

    IOleCommandTarget::Exec

    */
    inline void ExecWB(SHDocVw::OLECMDID cmdID, SHDocVw::OLECMDEXECOPT cmdexecopt);

    /*
    Method ExecWB

    IOleCommandTarget::Exec

    */
    inline void ExecWB(SHDocVw::OLECMDID cmdID, SHDocVw::OLECMDEXECOPT cmdexecopt, QVariant& pvaIn);

    /*
    Method ExecWB

    IOleCommandTarget::Exec

    */
    inline void ExecWB(SHDocVw::OLECMDID cmdID, SHDocVw::OLECMDEXECOPT cmdexecopt, QVariant& pvaIn, QVariant& pvaOut);

    /*
    Method GetProperty

    Retrieve the Associated value for the property vtValue in the context of the object.

    */
    inline QVariant GetProperty(const QString& Property);

    /*
    Method GoBack

    Navigates to the previous item in the history list.

    */
    inline void GoBack();

    /*
    Method GoForward

    Navigates to the next item in the history list.

    */
    inline void GoForward();

    /*
    Method GoHome

    Go home/start page.

    */
    inline void GoHome();

    /*
    Method GoSearch

    Go Search Page.

    */
    inline void GoSearch();

    /*
    Method Navigate

    Navigates to a URL or file.

    */
    inline void Navigate(const QString& URL);

    /*
    Method Navigate

    Navigates to a URL or file.

    */
    inline void Navigate(const QString& URL, QVariant& Flags);

    /*
    Method Navigate

    Navigates to a URL or file.

    */
    inline void Navigate(const QString& URL, QVariant& Flags, QVariant& TargetFrameName);

    /*
    Method Navigate

    Navigates to a URL or file.

    */
    inline void Navigate(const QString& URL, QVariant& Flags, QVariant& TargetFrameName, QVariant& PostData);

    /*
    Method Navigate

    Navigates to a URL or file.

    */
    inline void Navigate(const QString& URL, QVariant& Flags, QVariant& TargetFrameName, QVariant& PostData, QVariant& Headers);

    /*
    Method Navigate2

    Navigates to a URL or file or pidl.

    */
    inline void Navigate2(QVariant& URL);

    /*
    Method Navigate2

    Navigates to a URL or file or pidl.

    */
    inline void Navigate2(QVariant& URL, QVariant& Flags);

    /*
    Method Navigate2

    Navigates to a URL or file or pidl.

    */
    inline void Navigate2(QVariant& URL, QVariant& Flags, QVariant& TargetFrameName);

    /*
    Method Navigate2

    Navigates to a URL or file or pidl.

    */
    inline void Navigate2(QVariant& URL, QVariant& Flags, QVariant& TargetFrameName, QVariant& PostData);

    /*
    Method Navigate2

    Navigates to a URL or file or pidl.

    */
    inline void Navigate2(QVariant& URL, QVariant& Flags, QVariant& TargetFrameName, QVariant& PostData, QVariant& Headers);

    /*
    Method PutProperty

    Associates vtValue with the name szProperty in the context of the object.

    */
    inline void PutProperty(const QString& Property, const QVariant& vtValue);

    /*
    Method QueryStatusWB

    IOleCommandTarget::QueryStatus

    */
    inline OLECMDF QueryStatusWB(SHDocVw::OLECMDID cmdID);

    /*
    Method Quit

    Exits application and closes the open document.

    */
    inline void Quit();

    /*
    Method Refresh

    Refresh the currently viewed page.

    */
    inline void Refresh();

    /*
    Method Refresh2

    Refresh the currently viewed page.

    */
    inline void Refresh2();

    /*
    Method Refresh2

    Refresh the currently viewed page.

    */
    inline void Refresh2(QVariant& Level);

    /*
    Method ShowBrowserBar

    Set BrowserBar to Clsid

    */
    inline void ShowBrowserBar(QVariant& pvaClsid);

    /*
    Method ShowBrowserBar

    Set BrowserBar to Clsid

    */
    inline void ShowBrowserBar(QVariant& pvaClsid, QVariant& pvarShow);

    /*
    Method ShowBrowserBar

    Set BrowserBar to Clsid

    */
    inline void ShowBrowserBar(QVariant& pvaClsid, QVariant& pvarShow, QVariant& pvarSize);

    /*
    Method Stop

    Stops opening a file.

    */
    inline void Stop();

// meta object functions
    static const QMetaObject staticMetaObject;
    virtual const QMetaObject *metaObject() const { return &staticMetaObject; }
    virtual void *qt_metacast(const char *);
};

class SHDOCVW_EXPORT InternetExplorerMedium : public QAxObject
{
public:
    InternetExplorerMedium(QObject *parent = 0)
    : QAxObject(parent)
    {
        setControl("{d5e8041d-920f-45e9-b8fb-b1deb82c6e5e}");
    }

    /*
    Property AddressBar

    Controls whether address bar is shown

    */
    inline bool AddressBar() const; //Returns the value of AddressBar
    inline void SetAddressBar(bool value); //Sets the value of the AddressBar property

    /*
    Property Application

    Returns the application automation object if accessible, this automation object otherwise..

    */
    inline IDispatch* Application() const; //Returns the value of Application

    /*
    Property Busy

    Query to see if something is still in progress.

    */
    inline bool Busy() const; //Returns the value of Busy

    /*
    Property Container

    Returns the container/parent automation object, if any.

    */
    inline IDispatch* Container() const; //Returns the value of Container

    /*
    Property Document

    Returns the active Document automation object, if any.

    */
    inline IDispatch* Document() const; //Returns the value of Document

    /*
    Property FullName

    Returns file specification of the application, including path.

    */
    inline QString FullName() const; //Returns the value of FullName

    /*
    Property FullScreen

    Maximizes window and turns off statusbar, toolbar, menubar, and titlebar.

    */
    inline bool FullScreen() const; //Returns the value of FullScreen
    inline void SetFullScreen(bool value); //Sets the value of the FullScreen property

    /*
    Property HWND

    Returns the HWND of the current IE window.

    */
    inline int HWND() const; //Returns the value of HWND

    /*
    Property Height

    The vertical dimension (pixels) of the frame window/object.

    */
    inline int Height() const; //Returns the value of Height
    inline void SetHeight(int value); //Sets the value of the Height property

    /*
    Property Left

    The horizontal position (pixels) of the frame window relative to the screen/container.

    */
    inline int Left() const; //Returns the value of Left
    inline void SetLeft(int value); //Sets the value of the Left property

    /*
    Property LocationName

    Gets the short (UI-friendly) name of the URL/file currently viewed.

    */
    inline QString LocationName() const; //Returns the value of LocationName

    /*
    Property LocationURL

    Gets the full URL/path currently viewed.

    */
    inline QString LocationURL() const; //Returns the value of LocationURL

    /*
    Property MenuBar

    Controls whether menubar is shown.

    */
    inline bool MenuBar() const; //Returns the value of MenuBar
    inline void SetMenuBar(bool value); //Sets the value of the MenuBar property

    /*
    Property Name

    Returns name of the application.

    */
    inline QString Name() const; //Returns the value of Name

    /*
    Property Offline

    Controls if the frame is offline (read from cache)

    */
    inline bool Offline() const; //Returns the value of Offline
    inline void SetOffline(bool value); //Sets the value of the Offline property

    /*
    Property Parent

    Returns the automation object of the container/parent if one exists or this automation object.

    */
    inline IDispatch* Parent() const; //Returns the value of Parent

    /*
    Property Path

    Returns the path to the application.

    */
    inline QString Path() const; //Returns the value of Path

    /*
    Property ReadyState
    */
    inline SHDocVw::tagREADYSTATE ReadyState() const; //Returns the value of ReadyState

    /*
    Property RegisterAsBrowser

    Registers OC as a top-level browser (for target name resolution)

    */
    inline bool RegisterAsBrowser() const; //Returns the value of RegisterAsBrowser
    inline void SetRegisterAsBrowser(bool value); //Sets the value of the RegisterAsBrowser property

    /*
    Property RegisterAsDropTarget

    Registers OC as a drop target for navigation

    */
    inline bool RegisterAsDropTarget() const; //Returns the value of RegisterAsDropTarget
    inline void SetRegisterAsDropTarget(bool value); //Sets the value of the RegisterAsDropTarget property

    /*
    Property Resizable

    Controls whether the window is resizable

    */
    inline bool Resizable() const; //Returns the value of Resizable
    inline void SetResizable(bool value); //Sets the value of the Resizable property

    /*
    Property Silent

    Controls if any dialog boxes can be shown

    */
    inline bool Silent() const; //Returns the value of Silent
    inline void SetSilent(bool value); //Sets the value of the Silent property

    /*
    Property StatusBar

    Turn on or off the statusbar.

    */
    inline bool StatusBar() const; //Returns the value of StatusBar
    inline void SetStatusBar(bool value); //Sets the value of the StatusBar property

    /*
    Property StatusText

    Text of Status window.

    */
    inline QString StatusText() const; //Returns the value of StatusText
    inline void SetStatusText(const QString& value); //Sets the value of the StatusText property

    /*
    Property TheaterMode

    Controls if the browser is in theater mode

    */
    inline bool TheaterMode() const; //Returns the value of TheaterMode
    inline void SetTheaterMode(bool value); //Sets the value of the TheaterMode property

    /*
    Property ToolBar

    Controls which toolbar is shown.

    */
    inline int ToolBar() const; //Returns the value of ToolBar
    inline void SetToolBar(int value); //Sets the value of the ToolBar property

    /*
    Property Top

    The vertical position (pixels) of the frame window relative to the screen/container.

    */
    inline int Top() const; //Returns the value of Top
    inline void SetTop(int value); //Sets the value of the Top property

    /*
    Property TopLevelContainer

    Returns True if this is the top level object.

    */
    inline bool TopLevelContainer() const; //Returns the value of TopLevelContainer

    /*
    Property Type

    Returns the type of the contained document object.

    */
    inline QString Type() const; //Returns the value of Type

    /*
    Property Visible

    Determines whether the application is visible or hidden.

    */
    inline bool Visible() const; //Returns the value of Visible
    inline void SetVisible(bool value); //Sets the value of the Visible property

    /*
    Property Width

    The horizontal dimension (pixels) of the frame window/object.

    */
    inline int Width() const; //Returns the value of Width
    inline void SetWidth(int value); //Sets the value of the Width property

    /*
    Method ClientToWindow

    Converts client sizes into window sizes.

    */
    inline void ClientToWindow(int& pcx, int& pcy);

    /*
    Method ExecWB

    IOleCommandTarget::Exec

    */
    inline void ExecWB(SHDocVw::OLECMDID cmdID, SHDocVw::OLECMDEXECOPT cmdexecopt);

    /*
    Method ExecWB

    IOleCommandTarget::Exec

    */
    inline void ExecWB(SHDocVw::OLECMDID cmdID, SHDocVw::OLECMDEXECOPT cmdexecopt, QVariant& pvaIn);

    /*
    Method ExecWB

    IOleCommandTarget::Exec

    */
    inline void ExecWB(SHDocVw::OLECMDID cmdID, SHDocVw::OLECMDEXECOPT cmdexecopt, QVariant& pvaIn, QVariant& pvaOut);

    /*
    Method GetProperty

    Retrieve the Associated value for the property vtValue in the context of the object.

    */
    inline QVariant GetProperty(const QString& Property);

    /*
    Method GoBack

    Navigates to the previous item in the history list.

    */
    inline void GoBack();

    /*
    Method GoForward

    Navigates to the next item in the history list.

    */
    inline void GoForward();

    /*
    Method GoHome

    Go home/start page.

    */
    inline void GoHome();

    /*
    Method GoSearch

    Go Search Page.

    */
    inline void GoSearch();

    /*
    Method Navigate

    Navigates to a URL or file.

    */
    inline void Navigate(const QString& URL);

    /*
    Method Navigate

    Navigates to a URL or file.

    */
    inline void Navigate(const QString& URL, QVariant& Flags);

    /*
    Method Navigate

    Navigates to a URL or file.

    */
    inline void Navigate(const QString& URL, QVariant& Flags, QVariant& TargetFrameName);

    /*
    Method Navigate

    Navigates to a URL or file.

    */
    inline void Navigate(const QString& URL, QVariant& Flags, QVariant& TargetFrameName, QVariant& PostData);

    /*
    Method Navigate

    Navigates to a URL or file.

    */
    inline void Navigate(const QString& URL, QVariant& Flags, QVariant& TargetFrameName, QVariant& PostData, QVariant& Headers);

    /*
    Method Navigate2

    Navigates to a URL or file or pidl.

    */
    inline void Navigate2(QVariant& URL);

    /*
    Method Navigate2

    Navigates to a URL or file or pidl.

    */
    inline void Navigate2(QVariant& URL, QVariant& Flags);

    /*
    Method Navigate2

    Navigates to a URL or file or pidl.

    */
    inline void Navigate2(QVariant& URL, QVariant& Flags, QVariant& TargetFrameName);

    /*
    Method Navigate2

    Navigates to a URL or file or pidl.

    */
    inline void Navigate2(QVariant& URL, QVariant& Flags, QVariant& TargetFrameName, QVariant& PostData);

    /*
    Method Navigate2

    Navigates to a URL or file or pidl.

    */
    inline void Navigate2(QVariant& URL, QVariant& Flags, QVariant& TargetFrameName, QVariant& PostData, QVariant& Headers);

    /*
    Method PutProperty

    Associates vtValue with the name szProperty in the context of the object.

    */
    inline void PutProperty(const QString& Property, const QVariant& vtValue);

    /*
    Method QueryStatusWB

    IOleCommandTarget::QueryStatus

    */
    inline OLECMDF QueryStatusWB(SHDocVw::OLECMDID cmdID);

    /*
    Method Quit

    Exits application and closes the open document.

    */
    inline void Quit();

    /*
    Method Refresh

    Refresh the currently viewed page.

    */
    inline void Refresh();

    /*
    Method Refresh2

    Refresh the currently viewed page.

    */
    inline void Refresh2();

    /*
    Method Refresh2

    Refresh the currently viewed page.

    */
    inline void Refresh2(QVariant& Level);

    /*
    Method ShowBrowserBar

    Set BrowserBar to Clsid

    */
    inline void ShowBrowserBar(QVariant& pvaClsid);

    /*
    Method ShowBrowserBar

    Set BrowserBar to Clsid

    */
    inline void ShowBrowserBar(QVariant& pvaClsid, QVariant& pvarShow);

    /*
    Method ShowBrowserBar

    Set BrowserBar to Clsid

    */
    inline void ShowBrowserBar(QVariant& pvaClsid, QVariant& pvarShow, QVariant& pvarSize);

    /*
    Method Stop

    Stops opening a file.

    */
    inline void Stop();

// meta object functions
    static const QMetaObject staticMetaObject;
    virtual const QMetaObject *metaObject() const { return &staticMetaObject; }
    virtual void *qt_metacast(const char *);
};

class SHDOCVW_EXPORT ShellBrowserWindow : public QAxObject
{
public:
    ShellBrowserWindow(IDispatch *subobject = 0, QAxObject *parent = 0)
    : QAxObject((IUnknown*)subobject, parent)
    {
        internalRelease();
    }

    /*
    Property AddressBar

    Controls whether address bar is shown

    */
    inline bool AddressBar() const; //Returns the value of AddressBar
    inline void SetAddressBar(bool value); //Sets the value of the AddressBar property

    /*
    Property Application

    Returns the application automation object if accessible, this automation object otherwise..

    */
    inline IDispatch* Application() const; //Returns the value of Application

    /*
    Property Busy

    Query to see if something is still in progress.

    */
    inline bool Busy() const; //Returns the value of Busy

    /*
    Property Container

    Returns the container/parent automation object, if any.

    */
    inline IDispatch* Container() const; //Returns the value of Container

    /*
    Property Document

    Returns the active Document automation object, if any.

    */
    inline IDispatch* Document() const; //Returns the value of Document

    /*
    Property FullName

    Returns file specification of the application, including path.

    */
    inline QString FullName() const; //Returns the value of FullName

    /*
    Property FullScreen

    Maximizes window and turns off statusbar, toolbar, menubar, and titlebar.

    */
    inline bool FullScreen() const; //Returns the value of FullScreen
    inline void SetFullScreen(bool value); //Sets the value of the FullScreen property

    /*
    Property HWND

    Returns the HWND of the current IE window.

    */
    inline int HWND() const; //Returns the value of HWND

    /*
    Property Height

    The vertical dimension (pixels) of the frame window/object.

    */
    inline int Height() const; //Returns the value of Height
    inline void SetHeight(int value); //Sets the value of the Height property

    /*
    Property Left

    The horizontal position (pixels) of the frame window relative to the screen/container.

    */
    inline int Left() const; //Returns the value of Left
    inline void SetLeft(int value); //Sets the value of the Left property

    /*
    Property LocationName

    Gets the short (UI-friendly) name of the URL/file currently viewed.

    */
    inline QString LocationName() const; //Returns the value of LocationName

    /*
    Property LocationURL

    Gets the full URL/path currently viewed.

    */
    inline QString LocationURL() const; //Returns the value of LocationURL

    /*
    Property MenuBar

    Controls whether menubar is shown.

    */
    inline bool MenuBar() const; //Returns the value of MenuBar
    inline void SetMenuBar(bool value); //Sets the value of the MenuBar property

    /*
    Property Name

    Returns name of the application.

    */
    inline QString Name() const; //Returns the value of Name

    /*
    Property Offline

    Controls if the frame is offline (read from cache)

    */
    inline bool Offline() const; //Returns the value of Offline
    inline void SetOffline(bool value); //Sets the value of the Offline property

    /*
    Property Parent

    Returns the automation object of the container/parent if one exists or this automation object.

    */
    inline IDispatch* Parent() const; //Returns the value of Parent

    /*
    Property Path

    Returns the path to the application.

    */
    inline QString Path() const; //Returns the value of Path

    /*
    Property ReadyState
    */
    inline SHDocVw::tagREADYSTATE ReadyState() const; //Returns the value of ReadyState

    /*
    Property RegisterAsBrowser

    Registers OC as a top-level browser (for target name resolution)

    */
    inline bool RegisterAsBrowser() const; //Returns the value of RegisterAsBrowser
    inline void SetRegisterAsBrowser(bool value); //Sets the value of the RegisterAsBrowser property

    /*
    Property RegisterAsDropTarget

    Registers OC as a drop target for navigation

    */
    inline bool RegisterAsDropTarget() const; //Returns the value of RegisterAsDropTarget
    inline void SetRegisterAsDropTarget(bool value); //Sets the value of the RegisterAsDropTarget property

    /*
    Property Resizable

    Controls whether the window is resizable

    */
    inline bool Resizable() const; //Returns the value of Resizable
    inline void SetResizable(bool value); //Sets the value of the Resizable property

    /*
    Property Silent

    Controls if any dialog boxes can be shown

    */
    inline bool Silent() const; //Returns the value of Silent
    inline void SetSilent(bool value); //Sets the value of the Silent property

    /*
    Property StatusBar

    Turn on or off the statusbar.

    */
    inline bool StatusBar() const; //Returns the value of StatusBar
    inline void SetStatusBar(bool value); //Sets the value of the StatusBar property

    /*
    Property StatusText

    Text of Status window.

    */
    inline QString StatusText() const; //Returns the value of StatusText
    inline void SetStatusText(const QString& value); //Sets the value of the StatusText property

    /*
    Property TheaterMode

    Controls if the browser is in theater mode

    */
    inline bool TheaterMode() const; //Returns the value of TheaterMode
    inline void SetTheaterMode(bool value); //Sets the value of the TheaterMode property

    /*
    Property ToolBar

    Controls which toolbar is shown.

    */
    inline int ToolBar() const; //Returns the value of ToolBar
    inline void SetToolBar(int value); //Sets the value of the ToolBar property

    /*
    Property Top

    The vertical position (pixels) of the frame window relative to the screen/container.

    */
    inline int Top() const; //Returns the value of Top
    inline void SetTop(int value); //Sets the value of the Top property

    /*
    Property TopLevelContainer

    Returns True if this is the top level object.

    */
    inline bool TopLevelContainer() const; //Returns the value of TopLevelContainer

    /*
    Property Type

    Returns the type of the contained document object.

    */
    inline QString Type() const; //Returns the value of Type

    /*
    Property Visible

    Determines whether the application is visible or hidden.

    */
    inline bool Visible() const; //Returns the value of Visible
    inline void SetVisible(bool value); //Sets the value of the Visible property

    /*
    Property Width

    The horizontal dimension (pixels) of the frame window/object.

    */
    inline int Width() const; //Returns the value of Width
    inline void SetWidth(int value); //Sets the value of the Width property

    /*
    Method ClientToWindow

    Converts client sizes into window sizes.

    */
    inline void ClientToWindow(int& pcx, int& pcy);

    /*
    Method ExecWB

    IOleCommandTarget::Exec

    */
    inline void ExecWB(SHDocVw::OLECMDID cmdID, SHDocVw::OLECMDEXECOPT cmdexecopt);

    /*
    Method ExecWB

    IOleCommandTarget::Exec

    */
    inline void ExecWB(SHDocVw::OLECMDID cmdID, SHDocVw::OLECMDEXECOPT cmdexecopt, QVariant& pvaIn);

    /*
    Method ExecWB

    IOleCommandTarget::Exec

    */
    inline void ExecWB(SHDocVw::OLECMDID cmdID, SHDocVw::OLECMDEXECOPT cmdexecopt, QVariant& pvaIn, QVariant& pvaOut);

    /*
    Method GetProperty

    Retrieve the Associated value for the property vtValue in the context of the object.

    */
    inline QVariant GetProperty(const QString& Property);

    /*
    Method GoBack

    Navigates to the previous item in the history list.

    */
    inline void GoBack();

    /*
    Method GoForward

    Navigates to the next item in the history list.

    */
    inline void GoForward();

    /*
    Method GoHome

    Go home/start page.

    */
    inline void GoHome();

    /*
    Method GoSearch

    Go Search Page.

    */
    inline void GoSearch();

    /*
    Method Navigate

    Navigates to a URL or file.

    */
    inline void Navigate(const QString& URL);

    /*
    Method Navigate

    Navigates to a URL or file.

    */
    inline void Navigate(const QString& URL, QVariant& Flags);

    /*
    Method Navigate

    Navigates to a URL or file.

    */
    inline void Navigate(const QString& URL, QVariant& Flags, QVariant& TargetFrameName);

    /*
    Method Navigate

    Navigates to a URL or file.

    */
    inline void Navigate(const QString& URL, QVariant& Flags, QVariant& TargetFrameName, QVariant& PostData);

    /*
    Method Navigate

    Navigates to a URL or file.

    */
    inline void Navigate(const QString& URL, QVariant& Flags, QVariant& TargetFrameName, QVariant& PostData, QVariant& Headers);

    /*
    Method Navigate2

    Navigates to a URL or file or pidl.

    */
    inline void Navigate2(QVariant& URL);

    /*
    Method Navigate2

    Navigates to a URL or file or pidl.

    */
    inline void Navigate2(QVariant& URL, QVariant& Flags);

    /*
    Method Navigate2

    Navigates to a URL or file or pidl.

    */
    inline void Navigate2(QVariant& URL, QVariant& Flags, QVariant& TargetFrameName);

    /*
    Method Navigate2

    Navigates to a URL or file or pidl.

    */
    inline void Navigate2(QVariant& URL, QVariant& Flags, QVariant& TargetFrameName, QVariant& PostData);

    /*
    Method Navigate2

    Navigates to a URL or file or pidl.

    */
    inline void Navigate2(QVariant& URL, QVariant& Flags, QVariant& TargetFrameName, QVariant& PostData, QVariant& Headers);

    /*
    Method PutProperty

    Associates vtValue with the name szProperty in the context of the object.

    */
    inline void PutProperty(const QString& Property, const QVariant& vtValue);

    /*
    Method QueryStatusWB

    IOleCommandTarget::QueryStatus

    */
    inline OLECMDF QueryStatusWB(SHDocVw::OLECMDID cmdID);

    /*
    Method Quit

    Exits application and closes the open document.

    */
    inline void Quit();

    /*
    Method Refresh

    Refresh the currently viewed page.

    */
    inline void Refresh();

    /*
    Method Refresh2

    Refresh the currently viewed page.

    */
    inline void Refresh2();

    /*
    Method Refresh2

    Refresh the currently viewed page.

    */
    inline void Refresh2(QVariant& Level);

    /*
    Method ShowBrowserBar

    Set BrowserBar to Clsid

    */
    inline void ShowBrowserBar(QVariant& pvaClsid);

    /*
    Method ShowBrowserBar

    Set BrowserBar to Clsid

    */
    inline void ShowBrowserBar(QVariant& pvaClsid, QVariant& pvarShow);

    /*
    Method ShowBrowserBar

    Set BrowserBar to Clsid

    */
    inline void ShowBrowserBar(QVariant& pvaClsid, QVariant& pvarShow, QVariant& pvarSize);

    /*
    Method Stop

    Stops opening a file.

    */
    inline void Stop();

// meta object functions
    static const QMetaObject staticMetaObject;
    virtual const QMetaObject *metaObject() const { return &staticMetaObject; }
    virtual void *qt_metacast(const char *);
};

class SHDOCVW_EXPORT ShellWindows : public QAxObject
{
public:
    ShellWindows(QObject *parent = 0)
    : QAxObject(parent)
    {
        setControl("{9ba05972-f6a8-11cf-a442-00a0c90a8f39}");
    }

    ShellWindows(IShellWindows *iface)
    : QAxObject()
    {
        initializeFrom(iface);
        delete iface;
    }

    /*
    Property Count

    Get count of open Shell windows

    */
    inline int Count() const; //Returns the value of Count

    /*
    Method FindWindowSW

    Find the window based on the location

    */
    inline IDispatch* FindWindowSW(QVariant& pvarloc, QVariant& pvarlocRoot, int swClass, int& pHWND, int swfwOptions);

    /*
    Method Item

    Return the shell window for the given index

    */
    inline IDispatch* Item();

    /*
    Method Item

    Return the shell window for the given index

    */
    inline IDispatch* Item(const QVariant& index);

    /*
    Method OnActivated

    Notifies the activation

    */
    inline void OnActivated(int lCookie, bool fActive);

    /*
    Method OnCreated

    Notifies on creation and frame name set

    */
    inline void OnCreated(int lCookie, IUnknown* punk);

    /*
    Method OnNavigate

    Notifies the new location

    */
    inline void OnNavigate(int lCookie, QVariant& pvarloc);

    /*
    Method ProcessAttachDetach

    Used by IExplore to register different processes

    */
    inline void ProcessAttachDetach(bool fAttach);

    /*
    Method Register

    Register a window with the list

    */
    inline void Register(IDispatch* pid, int HWND, int swClass, int& plCookie);

    /*
    Method RegisterPending

    Register a pending open with the list

    */
    inline void RegisterPending(int lThreadId, QVariant& pvarloc, QVariant& pvarlocRoot, int swClass, int& plCookie);

    /*
    Method Revoke

    Remove a window from the list

    */
    inline void Revoke(int lCookie);

    /*
    Method _NewEnum

    Enumerates the figures

    */
    inline IUnknown* _NewEnum();

// meta object functions
    static const QMetaObject staticMetaObject;
    virtual const QMetaObject *metaObject() const { return &staticMetaObject; }
    virtual void *qt_metacast(const char *);
};

class SHDOCVW_EXPORT ShellUIHelper : public QAxObject
{
public:
    ShellUIHelper(QObject *parent = 0)
    : QAxObject(parent)
    {
        setControl("{64ab4bb7-111e-11d1-8f79-00c04fc2fbe1}");
    }

    ShellUIHelper(IShellUIHelper6 *iface)
    : QAxObject()
    {
        initializeFrom(iface);
        delete iface;
    }

    /*
    Method AddChannel
    */
    inline void AddChannel(const QString& URL);

    /*
    Method AddDesktopComponent
    */
    inline void AddDesktopComponent(const QString& URL, const QString& Type);

    /*
    Method AddDesktopComponent
    */
    inline void AddDesktopComponent(const QString& URL, const QString& Type, QVariant& Left);

    /*
    Method AddDesktopComponent
    */
    inline void AddDesktopComponent(const QString& URL, const QString& Type, QVariant& Left, QVariant& Top);

    /*
    Method AddDesktopComponent
    */
    inline void AddDesktopComponent(const QString& URL, const QString& Type, QVariant& Left, QVariant& Top, QVariant& Width);

    /*
    Method AddDesktopComponent
    */
    inline void AddDesktopComponent(const QString& URL, const QString& Type, QVariant& Left, QVariant& Top, QVariant& Width, QVariant& Height);

    /*
    Method AddFavorite
    */
    inline void AddFavorite(const QString& URL);

    /*
    Method AddFavorite
    */
    inline void AddFavorite(const QString& URL, QVariant& Title);

    /*
    Method AddSearchProvider
    */
    inline void AddSearchProvider(const QString& URL);

    /*
    Method AddService
    */
    inline void AddService(const QString& URL);

    /*
    Method AddToFavoritesBar
    */
    inline void AddToFavoritesBar(const QString& URL, const QString& Title);

    /*
    Method AddToFavoritesBar
    */
    inline void AddToFavoritesBar(const QString& URL, const QString& Title, QVariant& Type);

    /*
    Method AutoCompleteAttach
    */
    inline void AutoCompleteAttach();

    /*
    Method AutoCompleteAttach
    */
    inline void AutoCompleteAttach(QVariant& Reserved);

    /*
    Method AutoCompleteSaveForm
    */
    inline void AutoCompleteSaveForm();

    /*
    Method AutoCompleteSaveForm
    */
    inline void AutoCompleteSaveForm(QVariant& Form);

    /*
    Method AutoScan
    */
    inline void AutoScan(const QString& strSearch, const QString& strFailureUrl);

    /*
    Method AutoScan
    */
    inline void AutoScan(const QString& strSearch, const QString& strFailureUrl, QVariant& pvarTargetFrame);

    /*
    Method BrandImageUri
    */
    inline QString BrandImageUri();

    /*
    Method BuildNewTabPage
    */
    inline void BuildNewTabPage();

    /*
    Method ContentDiscoveryReset
    */
    inline void ContentDiscoveryReset();

    /*
    Method CustomizeClearType
    */
    inline void CustomizeClearType(bool fSet);

    /*
    Method CustomizeSettings
    */
    inline void CustomizeSettings(bool fSQM, bool fPhishing, const QString& bstrLocale);

    /*
    Method DefaultSearchProvider
    */
    inline QString DefaultSearchProvider();

    /*
    Method DiagnoseConnection
    */
    inline void DiagnoseConnection();

    /*
    Method EnableSuggestedSites
    */
    inline void EnableSuggestedSites(bool fEnable);

    /*
    Method ImportExportFavorites
    */
    inline void ImportExportFavorites(bool fImport, const QString& strImpExpPath);

    /*
    Method InPrivateFilteringEnabled
    */
    inline bool InPrivateFilteringEnabled();

    /*
    Method IsSearchMigrated
    */
    inline bool IsSearchMigrated();

    /*
    Method IsSearchProviderInstalled
    */
    inline uint IsSearchProviderInstalled(const QString& URL);

    /*
    Method IsServiceInstalled
    */
    inline uint IsServiceInstalled(const QString& URL, const QString& Verb);

    /*
    Method IsSubscribed
    */
    inline bool IsSubscribed(const QString& URL);

    /*
    Method IsSuggestedSitesEnabled
    */
    inline bool IsSuggestedSitesEnabled();

    /*
    Method NavigateAndFind
    */
    inline void NavigateAndFind(const QString& URL, const QString& strQuery, QVariant& varTargetFrame);

    /*
    Method NavigateToSuggestedSites
    */
    inline void NavigateToSuggestedSites(const QString& bstrRelativeUrl);

    /*
    Method PhishingEnabled
    */
    inline bool PhishingEnabled();

    /*
    Method RefreshOfflineDesktop
    */
    inline void RefreshOfflineDesktop();

    /*
    Method ResetFirstBootMode
    */
    inline void ResetFirstBootMode();

    /*
    Method ResetSafeMode
    */
    inline void ResetSafeMode();

    /*
    Method RunOnceHasShown
    */
    inline bool RunOnceHasShown();

    /*
    Method RunOnceRequiredSettingsComplete
    */
    inline void RunOnceRequiredSettingsComplete(bool fComplete);

    /*
    Method RunOnceShown
    */
    inline void RunOnceShown();

    /*
    Method SearchGuideUrl
    */
    inline QString SearchGuideUrl();

    /*
    Method SetActivitiesVisible
    */
    inline void SetActivitiesVisible(bool fVisible);

    /*
    Method SetRecentlyClosedVisible
    */
    inline void SetRecentlyClosedVisible(bool fVisible);

    /*
    Method ShowBrowserUI
    */
    inline QVariant ShowBrowserUI(const QString& bstrName, QVariant& pvarIn);

    /*
    Method ShowInPrivateHelp
    */
    inline void ShowInPrivateHelp();

    /*
    Method ShowTabsHelp
    */
    inline void ShowTabsHelp();

    /*
    Method SkipRunOnce
    */
    inline void SkipRunOnce();

    /*
    Method SkipTabsWelcome
    */
    inline void SkipTabsWelcome();

    /*
    Method SqmEnabled
    */
    inline bool SqmEnabled();

    /*
    Method msActiveXFilteringEnabled
    */
    inline bool msActiveXFilteringEnabled();

    /*
    Method msAddSiteMode
    */
    inline void msAddSiteMode();

    /*
    Method msAddTrackingProtectionList
    */
    inline void msAddTrackingProtectionList(const QString& URL, const QString& bstrFilterName);

    /*
    Method msChangeDefaultBrowser
    */
    inline void msChangeDefaultBrowser(bool fChange);

    /*
    Method msClearTile
    */
    inline void msClearTile();

    /*
    Method msDiagnoseConnectionUILess
    */
    inline void msDiagnoseConnectionUILess();

    /*
    Method msEnableTileNotificationQueue
    */
    inline void msEnableTileNotificationQueue(bool fChange);

    /*
    Method msEnableTileNotificationQueueForSquare150x150
    */
    inline void msEnableTileNotificationQueueForSquare150x150(bool fChange);

    /*
    Method msEnableTileNotificationQueueForSquare310x310
    */
    inline void msEnableTileNotificationQueueForSquare310x310(bool fChange);

    /*
    Method msEnableTileNotificationQueueForWide310x150
    */
    inline void msEnableTileNotificationQueueForWide310x150(bool fChange);

    /*
    Method msIsSiteMode
    */
    inline bool msIsSiteMode();

    /*
    Method msIsSiteModeFirstRun
    */
    inline QVariant msIsSiteModeFirstRun(bool fPreserveState);

    /*
    Method msLaunchInternetOptions
    */
    inline void msLaunchInternetOptions();

    /*
    Method msLaunchNetworkClientHelp
    */
    inline void msLaunchNetworkClientHelp();

    /*
    Method msPinnedSiteState
    */
    inline QVariant msPinnedSiteState();

    /*
    Method msProvisionNetworks
    */
    inline QVariant msProvisionNetworks(const QString& bstrProvisioningXml);

    /*
    Method msRemoveScheduledTileNotification
    */
    inline void msRemoveScheduledTileNotification(const QString& bstrNotificationId);

    /*
    Method msReportSafeUrl
    */
    inline void msReportSafeUrl();

    /*
    Method msScheduledTileNotification
    */
    inline void msScheduledTileNotification(const QString& bstrNotificationXml, const QString& bstrNotificationId, const QString& bstrNotificationTag);

    /*
    Method msScheduledTileNotification
    */
    inline void msScheduledTileNotification(const QString& bstrNotificationXml, const QString& bstrNotificationId, const QString& bstrNotificationTag, const QVariant& startTime);

    /*
    Method msScheduledTileNotification
    */
    inline void msScheduledTileNotification(const QString& bstrNotificationXml, const QString& bstrNotificationId, const QString& bstrNotificationTag, const QVariant& startTime, const QVariant& expirationTime);

    /*
    Method msSiteModeActivate
    */
    inline void msSiteModeActivate();

    /*
    Method msSiteModeAddButtonStyle
    */
    inline QVariant msSiteModeAddButtonStyle(const QVariant& uiButtonID, const QString& bstrIconURL, const QString& bstrTooltip);

    /*
    Method msSiteModeAddJumpListItem
    */
    inline void msSiteModeAddJumpListItem(const QString& bstrName, const QString& bstrActionUri, const QString& bstrIconUri);

    /*
    Method msSiteModeAddJumpListItem
    */
    inline void msSiteModeAddJumpListItem(const QString& bstrName, const QString& bstrActionUri, const QString& bstrIconUri, QVariant& pvarWindowType);

    /*
    Method msSiteModeAddThumbBarButton
    */
    inline QVariant msSiteModeAddThumbBarButton(const QString& bstrIconURL, const QString& bstrTooltip);

    /*
    Method msSiteModeClearBadge
    */
    inline void msSiteModeClearBadge();

    /*
    Method msSiteModeClearIconOverlay
    */
    inline void msSiteModeClearIconOverlay();

    /*
    Method msSiteModeClearJumpList
    */
    inline void msSiteModeClearJumpList();

    /*
    Method msSiteModeCreateJumpList
    */
    inline void msSiteModeCreateJumpList(const QString& bstrHeader);

    /*
    Method msSiteModeRefreshBadge
    */
    inline void msSiteModeRefreshBadge();

    /*
    Method msSiteModeSetIconOverlay
    */
    inline void msSiteModeSetIconOverlay(const QString& IconUrl);

    /*
    Method msSiteModeSetIconOverlay
    */
    inline void msSiteModeSetIconOverlay(const QString& IconUrl, QVariant& pvarDescription);

    /*
    Method msSiteModeShowButtonStyle
    */
    inline void msSiteModeShowButtonStyle(const QVariant& uiButtonID, const QVariant& uiStyleID);

    /*
    Method msSiteModeShowJumpList
    */
    inline void msSiteModeShowJumpList();

    /*
    Method msSiteModeShowThumbBar
    */
    inline void msSiteModeShowThumbBar();

    /*
    Method msSiteModeUpdateThumbBarButton
    */
    inline void msSiteModeUpdateThumbBarButton(const QVariant& ButtonID, bool fEnabled, bool fVisible);

    /*
    Method msStartPeriodicBadgeUpdate
    */
    inline void msStartPeriodicBadgeUpdate(const QString& pollingUri);

    /*
    Method msStartPeriodicBadgeUpdate
    */
    inline void msStartPeriodicBadgeUpdate(const QString& pollingUri, const QVariant& startTime);

    /*
    Method msStartPeriodicBadgeUpdate
    */
    inline void msStartPeriodicBadgeUpdate(const QString& pollingUri, const QVariant& startTime, const QVariant& uiUpdateRecurrence);

    /*
    Method msStartPeriodicTileUpdate
    */
    inline void msStartPeriodicTileUpdate(const QVariant& pollingUris);

    /*
    Method msStartPeriodicTileUpdate
    */
    inline void msStartPeriodicTileUpdate(const QVariant& pollingUris, const QVariant& startTime);

    /*
    Method msStartPeriodicTileUpdate
    */
    inline void msStartPeriodicTileUpdate(const QVariant& pollingUris, const QVariant& startTime, const QVariant& uiUpdateRecurrence);

    /*
    Method msStartPeriodicTileUpdateBatch
    */
    inline void msStartPeriodicTileUpdateBatch(const QVariant& pollingUris);

    /*
    Method msStartPeriodicTileUpdateBatch
    */
    inline void msStartPeriodicTileUpdateBatch(const QVariant& pollingUris, const QVariant& startTime);

    /*
    Method msStartPeriodicTileUpdateBatch
    */
    inline void msStartPeriodicTileUpdateBatch(const QVariant& pollingUris, const QVariant& startTime, const QVariant& uiUpdateRecurrence);

    /*
    Method msStopPeriodicBadgeUpdate
    */
    inline void msStopPeriodicBadgeUpdate();

    /*
    Method msStopPeriodicTileUpdate
    */
    inline void msStopPeriodicTileUpdate();

    /*
    Method msTrackingProtectionEnabled
    */
    inline bool msTrackingProtectionEnabled();

// meta object functions
    static const QMetaObject staticMetaObject;
    virtual const QMetaObject *metaObject() const { return &staticMetaObject; }
    virtual void *qt_metacast(const char *);
};

class SHDOCVW_EXPORT ShellNameSpace : public QAxObject
{
public:
    ShellNameSpace(QObject *parent = 0)
    : QAxObject(parent)
    {
        setControl("{55136805-b2de-11d1-b9f2-00a0c98bc547}");
    }

    /*
    Property Columns
    */
    inline QString Columns() const; //Returns the value of Columns
    inline void SetColumns(const QString& value); //Sets the value of the Columns property

    /*
    Property CountViewTypes

    number of view types

    */
    inline int CountViewTypes() const; //Returns the value of CountViewTypes

    /*
    Property Depth
    */
    inline int Depth() const; //Returns the value of Depth
    inline void SetDepth(int value); //Sets the value of the Depth property

    /*
    Property EnumOptions

    options 

    */
    inline int EnumOptions() const; //Returns the value of EnumOptions
    inline void SetEnumOptions(int value); //Sets the value of the EnumOptions property

    /*
    Property Flags
    */
    inline uint Flags() const; //Returns the value of Flags
    inline void SetFlags(uint value); //Sets the value of the Flags property

    /*
    Property Mode
    */
    inline uint Mode() const; //Returns the value of Mode
    inline void SetMode(uint value); //Sets the value of the Mode property

    /*
    Property Root

    get the root item

    */
    inline QVariant Root() const; //Returns the value of Root
    inline void SetRoot(const QVariant& value); //Sets the value of the Root property

    /*
    Property SelectedItem

    get the selected item

    */
    inline IDispatch* SelectedItem() const; //Returns the value of SelectedItem
    inline void SetSelectedItem(IDispatch* value); //Sets the value of the SelectedItem property

    /*
    Property SubscriptionsEnabled

    Query to see if subscriptions are enabled

    */
    inline bool SubscriptionsEnabled() const; //Returns the value of SubscriptionsEnabled

    /*
    Property TVFlags
    */
    inline uint TVFlags() const; //Returns the value of TVFlags
    inline void SetTVFlags(uint value); //Sets the value of the TVFlags property

    /*
    Method CreateSubscriptionForSelection

    method CreateSubscriptionForSelection

    */
    inline bool CreateSubscriptionForSelection();

    /*
    Method DeleteSubscriptionForSelection

    method DeleteSubscriptionForSelection

    */
    inline bool DeleteSubscriptionForSelection();

    /*
    Method Expand

    expands item specified depth

    */
    inline void Expand(const QVariant& var, int iDepth);

    /*
    Method Export

    method Export

    */
    inline void Export();

    /*
    Method Import

    method Import

    */
    inline void Import();

    /*
    Method InvokeContextMenuCommand

    method InvokeContextMenuCommand

    */
    inline void InvokeContextMenuCommand(const QString& strCommand);

    /*
    Method MoveSelectionDown

    method MoveSelectionDown

    */
    inline void MoveSelectionDown();

    /*
    Method MoveSelectionTo

    method MoveSelectionTo

    */
    inline void MoveSelectionTo();

    /*
    Method MoveSelectionUp

    method MoveSelectionUp

    */
    inline void MoveSelectionUp();

    /*
    Method NewFolder

    method NewFolder

    */
    inline void NewFolder();

    /*
    Method ResetSort

    method ResetSort

    */
    inline void ResetSort();

    /*
    Method SelectedItems

    collection of selected items

    */
    inline IDispatch* SelectedItems();

    /*
    Method SetViewType

    set view type

    */
    inline void SetViewType(int iType);

    /*
    Method Synchronize

    method Synchronize

    */
    inline void Synchronize();

    /*
    Method UnselectAll

    unselects all items

    */
    inline void UnselectAll();

// meta object functions
    static const QMetaObject staticMetaObject;
    virtual const QMetaObject *metaObject() const { return &staticMetaObject; }
    virtual void *qt_metacast(const char *);
};

class SHDOCVW_EXPORT CScriptErrorList : public QAxObject
{
public:
    CScriptErrorList(IDispatch *subobject = 0, QAxObject *parent = 0)
    : QAxObject((IUnknown*)subobject, parent)
    {
        internalRelease();
    }

    /*
    Method advanceError
    */
    inline void advanceError();

    /*
    Method canAdvanceError
    */
    inline int canAdvanceError();

    /*
    Method canRetreatError
    */
    inline int canRetreatError();

    /*
    Method getAlwaysShowLockState
    */
    inline int getAlwaysShowLockState();

    /*
    Method getDetailsPaneOpen
    */
    inline int getDetailsPaneOpen();

    /*
    Method getErrorChar
    */
    inline int getErrorChar();

    /*
    Method getErrorCode
    */
    inline int getErrorCode();

    /*
    Method getErrorLine
    */
    inline int getErrorLine();

    /*
    Method getErrorMsg
    */
    inline QString getErrorMsg();

    /*
    Method getErrorUrl
    */
    inline QString getErrorUrl();

    /*
    Method getPerErrorDisplay
    */
    inline int getPerErrorDisplay();

    /*
    Method retreatError
    */
    inline void retreatError();

    /*
    Method setDetailsPaneOpen
    */
    inline void setDetailsPaneOpen(int fDetailsPaneOpen);

    /*
    Method setPerErrorDisplay
    */
    inline void setPerErrorDisplay(int fPerErrorDisplay);

// meta object functions
    static const QMetaObject staticMetaObject;
    virtual const QMetaObject *metaObject() const { return &staticMetaObject; }
    virtual void *qt_metacast(const char *);
};

// member function implementation
#ifndef QAX_DUMPCPP_SHDOCVW_NOINLINES
inline IDispatch* IWebBrowser::Application() const
{
    QVariant qax_result = property("Application");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
    return *(IDispatch**)qax_result.constData();
}

inline bool IWebBrowser::Busy() const
{
    QVariant qax_result = property("Busy");
    Q_ASSERT(qax_result.isValid());
    return *(bool*)qax_result.constData();
}

inline IDispatch* IWebBrowser::Container() const
{
    QVariant qax_result = property("Container");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
    return *(IDispatch**)qax_result.constData();
}

inline IDispatch* IWebBrowser::Document() const
{
    QVariant qax_result = property("Document");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
    return *(IDispatch**)qax_result.constData();
}

inline int IWebBrowser::Height() const
{
    QVariant qax_result = property("Height");
    Q_ASSERT(qax_result.isValid());
    return *(int*)qax_result.constData();
}
inline void IWebBrowser::SetHeight(int value){ setProperty("Height", QVariant(value)); }

inline int IWebBrowser::Left() const
{
    QVariant qax_result = property("Left");
    Q_ASSERT(qax_result.isValid());
    return *(int*)qax_result.constData();
}
inline void IWebBrowser::SetLeft(int value){ setProperty("Left", QVariant(value)); }

inline QString IWebBrowser::LocationName() const
{
    QVariant qax_result = property("LocationName");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}

inline QString IWebBrowser::LocationURL() const
{
    QVariant qax_result = property("LocationURL");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}

inline IDispatch* IWebBrowser::Parent() const
{
    QVariant qax_result = property("Parent");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
    return *(IDispatch**)qax_result.constData();
}

inline int IWebBrowser::Top() const
{
    QVariant qax_result = property("Top");
    Q_ASSERT(qax_result.isValid());
    return *(int*)qax_result.constData();
}
inline void IWebBrowser::SetTop(int value){ setProperty("Top", QVariant(value)); }

inline bool IWebBrowser::TopLevelContainer() const
{
    QVariant qax_result = property("TopLevelContainer");
    Q_ASSERT(qax_result.isValid());
    return *(bool*)qax_result.constData();
}

inline QString IWebBrowser::Type() const
{
    QVariant qax_result = property("Type");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}

inline int IWebBrowser::Width() const
{
    QVariant qax_result = property("Width");
    Q_ASSERT(qax_result.isValid());
    return *(int*)qax_result.constData();
}
inline void IWebBrowser::SetWidth(int value){ setProperty("Width", QVariant(value)); }

inline void IWebBrowser::GoBack()
{
    void *_a[] = {0};
    qt_metacall(QMetaObject::InvokeMetaMethod, 8, _a);
}

inline void IWebBrowser::GoForward()
{
    void *_a[] = {0};
    qt_metacall(QMetaObject::InvokeMetaMethod, 9, _a);
}

inline void IWebBrowser::GoHome()
{
    void *_a[] = {0};
    qt_metacall(QMetaObject::InvokeMetaMethod, 10, _a);
}

inline void IWebBrowser::GoSearch()
{
    void *_a[] = {0};
    qt_metacall(QMetaObject::InvokeMetaMethod, 11, _a);
}

inline void IWebBrowser::Navigate(const QString& URL)
{
    void *_a[] = {0, (void*)&URL};
    qt_metacall(QMetaObject::InvokeMetaMethod, 12, _a);
}

inline void IWebBrowser::Navigate(const QString& URL, QVariant& Flags)
{
    void *_a[] = {0, (void*)&URL, (void*)&Flags};
    qt_metacall(QMetaObject::InvokeMetaMethod, 13, _a);
}

inline void IWebBrowser::Navigate(const QString& URL, QVariant& Flags, QVariant& TargetFrameName)
{
    void *_a[] = {0, (void*)&URL, (void*)&Flags, (void*)&TargetFrameName};
    qt_metacall(QMetaObject::InvokeMetaMethod, 14, _a);
}

inline void IWebBrowser::Navigate(const QString& URL, QVariant& Flags, QVariant& TargetFrameName, QVariant& PostData)
{
    void *_a[] = {0, (void*)&URL, (void*)&Flags, (void*)&TargetFrameName, (void*)&PostData};
    qt_metacall(QMetaObject::InvokeMetaMethod, 15, _a);
}

inline void IWebBrowser::Navigate(const QString& URL, QVariant& Flags, QVariant& TargetFrameName, QVariant& PostData, QVariant& Headers)
{
    void *_a[] = {0, (void*)&URL, (void*)&Flags, (void*)&TargetFrameName, (void*)&PostData, (void*)&Headers};
    qt_metacall(QMetaObject::InvokeMetaMethod, 16, _a);
}

inline void IWebBrowser::Refresh()
{
    void *_a[] = {0};
    qt_metacall(QMetaObject::InvokeMetaMethod, 17, _a);
}

inline void IWebBrowser::Refresh2()
{
    void *_a[] = {0};
    qt_metacall(QMetaObject::InvokeMetaMethod, 18, _a);
}

inline void IWebBrowser::Refresh2(QVariant& Level)
{
    void *_a[] = {0, (void*)&Level};
    qt_metacall(QMetaObject::InvokeMetaMethod, 19, _a);
}

inline void IWebBrowser::Stop()
{
    void *_a[] = {0};
    qt_metacall(QMetaObject::InvokeMetaMethod, 24, _a);
}


inline IDispatch* IWebBrowserApp::Application() const
{
    QVariant qax_result = property("Application");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
    return *(IDispatch**)qax_result.constData();
}

inline bool IWebBrowserApp::Busy() const
{
    QVariant qax_result = property("Busy");
    Q_ASSERT(qax_result.isValid());
    return *(bool*)qax_result.constData();
}

inline IDispatch* IWebBrowserApp::Container() const
{
    QVariant qax_result = property("Container");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
    return *(IDispatch**)qax_result.constData();
}

inline IDispatch* IWebBrowserApp::Document() const
{
    QVariant qax_result = property("Document");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
    return *(IDispatch**)qax_result.constData();
}

inline QString IWebBrowserApp::FullName() const
{
    QVariant qax_result = property("FullName");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}

inline bool IWebBrowserApp::FullScreen() const
{
    QVariant qax_result = property("FullScreen");
    Q_ASSERT(qax_result.isValid());
    return *(bool*)qax_result.constData();
}
inline void IWebBrowserApp::SetFullScreen(bool value){ setProperty("FullScreen", QVariant(value)); }

inline int IWebBrowserApp::HWND() const
{
    QVariant qax_result = property("HWND");
    Q_ASSERT(qax_result.isValid());
    return *(int*)qax_result.constData();
}

inline int IWebBrowserApp::Height() const
{
    QVariant qax_result = property("Height");
    Q_ASSERT(qax_result.isValid());
    return *(int*)qax_result.constData();
}
inline void IWebBrowserApp::SetHeight(int value){ setProperty("Height", QVariant(value)); }

inline int IWebBrowserApp::Left() const
{
    QVariant qax_result = property("Left");
    Q_ASSERT(qax_result.isValid());
    return *(int*)qax_result.constData();
}
inline void IWebBrowserApp::SetLeft(int value){ setProperty("Left", QVariant(value)); }

inline QString IWebBrowserApp::LocationName() const
{
    QVariant qax_result = property("LocationName");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}

inline QString IWebBrowserApp::LocationURL() const
{
    QVariant qax_result = property("LocationURL");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}

inline bool IWebBrowserApp::MenuBar() const
{
    QVariant qax_result = property("MenuBar");
    Q_ASSERT(qax_result.isValid());
    return *(bool*)qax_result.constData();
}
inline void IWebBrowserApp::SetMenuBar(bool value){ setProperty("MenuBar", QVariant(value)); }

inline QString IWebBrowserApp::Name() const
{
    QVariant qax_result = property("Name");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}

inline IDispatch* IWebBrowserApp::Parent() const
{
    QVariant qax_result = property("Parent");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
    return *(IDispatch**)qax_result.constData();
}

inline QString IWebBrowserApp::Path() const
{
    QVariant qax_result = property("Path");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}

inline bool IWebBrowserApp::StatusBar() const
{
    QVariant qax_result = property("StatusBar");
    Q_ASSERT(qax_result.isValid());
    return *(bool*)qax_result.constData();
}
inline void IWebBrowserApp::SetStatusBar(bool value){ setProperty("StatusBar", QVariant(value)); }

inline QString IWebBrowserApp::StatusText() const
{
    QVariant qax_result = property("StatusText");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}
inline void IWebBrowserApp::SetStatusText(const QString& value){ setProperty("StatusText", QVariant(value)); }

inline int IWebBrowserApp::ToolBar() const
{
    QVariant qax_result = property("ToolBar");
    Q_ASSERT(qax_result.isValid());
    return *(int*)qax_result.constData();
}
inline void IWebBrowserApp::SetToolBar(int value){ setProperty("ToolBar", QVariant(value)); }

inline int IWebBrowserApp::Top() const
{
    QVariant qax_result = property("Top");
    Q_ASSERT(qax_result.isValid());
    return *(int*)qax_result.constData();
}
inline void IWebBrowserApp::SetTop(int value){ setProperty("Top", QVariant(value)); }

inline bool IWebBrowserApp::TopLevelContainer() const
{
    QVariant qax_result = property("TopLevelContainer");
    Q_ASSERT(qax_result.isValid());
    return *(bool*)qax_result.constData();
}

inline QString IWebBrowserApp::Type() const
{
    QVariant qax_result = property("Type");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}

inline bool IWebBrowserApp::Visible() const
{
    QVariant qax_result = property("Visible");
    Q_ASSERT(qax_result.isValid());
    return *(bool*)qax_result.constData();
}
inline void IWebBrowserApp::SetVisible(bool value){ setProperty("Visible", QVariant(value)); }

inline int IWebBrowserApp::Width() const
{
    QVariant qax_result = property("Width");
    Q_ASSERT(qax_result.isValid());
    return *(int*)qax_result.constData();
}
inline void IWebBrowserApp::SetWidth(int value){ setProperty("Width", QVariant(value)); }

inline void IWebBrowserApp::ClientToWindow(int& pcx, int& pcy)
{
    void *_a[] = {0, (void*)&pcx, (void*)&pcy};
    qt_metacall(QMetaObject::InvokeMetaMethod, 8, _a);
}

inline QVariant IWebBrowserApp::GetProperty(const QString& Property)
{
    QVariant qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&Property};
    qt_metacall(QMetaObject::InvokeMetaMethod, 9, _a);
    return qax_result;
}

inline void IWebBrowserApp::GoBack()
{
    void *_a[] = {0};
    qt_metacall(QMetaObject::InvokeMetaMethod, 10, _a);
}

inline void IWebBrowserApp::GoForward()
{
    void *_a[] = {0};
    qt_metacall(QMetaObject::InvokeMetaMethod, 11, _a);
}

inline void IWebBrowserApp::GoHome()
{
    void *_a[] = {0};
    qt_metacall(QMetaObject::InvokeMetaMethod, 12, _a);
}

inline void IWebBrowserApp::GoSearch()
{
    void *_a[] = {0};
    qt_metacall(QMetaObject::InvokeMetaMethod, 13, _a);
}

inline void IWebBrowserApp::Navigate(const QString& URL)
{
    void *_a[] = {0, (void*)&URL};
    qt_metacall(QMetaObject::InvokeMetaMethod, 14, _a);
}

inline void IWebBrowserApp::Navigate(const QString& URL, QVariant& Flags)
{
    void *_a[] = {0, (void*)&URL, (void*)&Flags};
    qt_metacall(QMetaObject::InvokeMetaMethod, 15, _a);
}

inline void IWebBrowserApp::Navigate(const QString& URL, QVariant& Flags, QVariant& TargetFrameName)
{
    void *_a[] = {0, (void*)&URL, (void*)&Flags, (void*)&TargetFrameName};
    qt_metacall(QMetaObject::InvokeMetaMethod, 16, _a);
}

inline void IWebBrowserApp::Navigate(const QString& URL, QVariant& Flags, QVariant& TargetFrameName, QVariant& PostData)
{
    void *_a[] = {0, (void*)&URL, (void*)&Flags, (void*)&TargetFrameName, (void*)&PostData};
    qt_metacall(QMetaObject::InvokeMetaMethod, 17, _a);
}

inline void IWebBrowserApp::Navigate(const QString& URL, QVariant& Flags, QVariant& TargetFrameName, QVariant& PostData, QVariant& Headers)
{
    void *_a[] = {0, (void*)&URL, (void*)&Flags, (void*)&TargetFrameName, (void*)&PostData, (void*)&Headers};
    qt_metacall(QMetaObject::InvokeMetaMethod, 18, _a);
}

inline void IWebBrowserApp::PutProperty(const QString& Property, const QVariant& vtValue)
{
    void *_a[] = {0, (void*)&Property, (void*)&vtValue};
    qt_metacall(QMetaObject::InvokeMetaMethod, 19, _a);
}

inline void IWebBrowserApp::Quit()
{
    void *_a[] = {0};
    qt_metacall(QMetaObject::InvokeMetaMethod, 20, _a);
}

inline void IWebBrowserApp::Refresh()
{
    void *_a[] = {0};
    qt_metacall(QMetaObject::InvokeMetaMethod, 21, _a);
}

inline void IWebBrowserApp::Refresh2()
{
    void *_a[] = {0};
    qt_metacall(QMetaObject::InvokeMetaMethod, 22, _a);
}

inline void IWebBrowserApp::Refresh2(QVariant& Level)
{
    void *_a[] = {0, (void*)&Level};
    qt_metacall(QMetaObject::InvokeMetaMethod, 23, _a);
}

inline void IWebBrowserApp::Stop()
{
    void *_a[] = {0};
    qt_metacall(QMetaObject::InvokeMetaMethod, 34, _a);
}


inline bool IWebBrowser2::AddressBar() const
{
    QVariant qax_result = property("AddressBar");
    Q_ASSERT(qax_result.isValid());
    return *(bool*)qax_result.constData();
}
inline void IWebBrowser2::SetAddressBar(bool value){ setProperty("AddressBar", QVariant(value)); }

inline IDispatch* IWebBrowser2::Application() const
{
    QVariant qax_result = property("Application");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
    return *(IDispatch**)qax_result.constData();
}

inline bool IWebBrowser2::Busy() const
{
    QVariant qax_result = property("Busy");
    Q_ASSERT(qax_result.isValid());
    return *(bool*)qax_result.constData();
}

inline IDispatch* IWebBrowser2::Container() const
{
    QVariant qax_result = property("Container");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
    return *(IDispatch**)qax_result.constData();
}

inline IDispatch* IWebBrowser2::Document() const
{
    QVariant qax_result = property("Document");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
    return *(IDispatch**)qax_result.constData();
}

inline QString IWebBrowser2::FullName() const
{
    QVariant qax_result = property("FullName");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}

inline bool IWebBrowser2::FullScreen() const
{
    QVariant qax_result = property("FullScreen");
    Q_ASSERT(qax_result.isValid());
    return *(bool*)qax_result.constData();
}
inline void IWebBrowser2::SetFullScreen(bool value){ setProperty("FullScreen", QVariant(value)); }

inline int IWebBrowser2::HWND() const
{
    QVariant qax_result = property("HWND");
    Q_ASSERT(qax_result.isValid());
    return *(int*)qax_result.constData();
}

inline int IWebBrowser2::Height() const
{
    QVariant qax_result = property("Height");
    Q_ASSERT(qax_result.isValid());
    return *(int*)qax_result.constData();
}
inline void IWebBrowser2::SetHeight(int value){ setProperty("Height", QVariant(value)); }

inline int IWebBrowser2::Left() const
{
    QVariant qax_result = property("Left");
    Q_ASSERT(qax_result.isValid());
    return *(int*)qax_result.constData();
}
inline void IWebBrowser2::SetLeft(int value){ setProperty("Left", QVariant(value)); }

inline QString IWebBrowser2::LocationName() const
{
    QVariant qax_result = property("LocationName");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}

inline QString IWebBrowser2::LocationURL() const
{
    QVariant qax_result = property("LocationURL");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}

inline bool IWebBrowser2::MenuBar() const
{
    QVariant qax_result = property("MenuBar");
    Q_ASSERT(qax_result.isValid());
    return *(bool*)qax_result.constData();
}
inline void IWebBrowser2::SetMenuBar(bool value){ setProperty("MenuBar", QVariant(value)); }

inline QString IWebBrowser2::Name() const
{
    QVariant qax_result = property("Name");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}

inline bool IWebBrowser2::Offline() const
{
    QVariant qax_result = property("Offline");
    Q_ASSERT(qax_result.isValid());
    return *(bool*)qax_result.constData();
}
inline void IWebBrowser2::SetOffline(bool value){ setProperty("Offline", QVariant(value)); }

inline IDispatch* IWebBrowser2::Parent() const
{
    QVariant qax_result = property("Parent");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
    return *(IDispatch**)qax_result.constData();
}

inline QString IWebBrowser2::Path() const
{
    QVariant qax_result = property("Path");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}

inline SHDocVw::tagREADYSTATE IWebBrowser2::ReadyState() const
{
    QVariant qax_result = property("ReadyState");
    Q_ASSERT(qax_result.isValid());
    return *(SHDocVw::tagREADYSTATE*)qax_result.constData();
}

inline bool IWebBrowser2::RegisterAsBrowser() const
{
    QVariant qax_result = property("RegisterAsBrowser");
    Q_ASSERT(qax_result.isValid());
    return *(bool*)qax_result.constData();
}
inline void IWebBrowser2::SetRegisterAsBrowser(bool value){ setProperty("RegisterAsBrowser", QVariant(value)); }

inline bool IWebBrowser2::RegisterAsDropTarget() const
{
    QVariant qax_result = property("RegisterAsDropTarget");
    Q_ASSERT(qax_result.isValid());
    return *(bool*)qax_result.constData();
}
inline void IWebBrowser2::SetRegisterAsDropTarget(bool value){ setProperty("RegisterAsDropTarget", QVariant(value)); }

inline bool IWebBrowser2::Resizable() const
{
    QVariant qax_result = property("Resizable");
    Q_ASSERT(qax_result.isValid());
    return *(bool*)qax_result.constData();
}
inline void IWebBrowser2::SetResizable(bool value){ setProperty("Resizable", QVariant(value)); }

inline bool IWebBrowser2::Silent() const
{
    QVariant qax_result = property("Silent");
    Q_ASSERT(qax_result.isValid());
    return *(bool*)qax_result.constData();
}
inline void IWebBrowser2::SetSilent(bool value){ setProperty("Silent", QVariant(value)); }

inline bool IWebBrowser2::StatusBar() const
{
    QVariant qax_result = property("StatusBar");
    Q_ASSERT(qax_result.isValid());
    return *(bool*)qax_result.constData();
}
inline void IWebBrowser2::SetStatusBar(bool value){ setProperty("StatusBar", QVariant(value)); }

inline QString IWebBrowser2::StatusText() const
{
    QVariant qax_result = property("StatusText");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}
inline void IWebBrowser2::SetStatusText(const QString& value){ setProperty("StatusText", QVariant(value)); }

inline bool IWebBrowser2::TheaterMode() const
{
    QVariant qax_result = property("TheaterMode");
    Q_ASSERT(qax_result.isValid());
    return *(bool*)qax_result.constData();
}
inline void IWebBrowser2::SetTheaterMode(bool value){ setProperty("TheaterMode", QVariant(value)); }

inline int IWebBrowser2::ToolBar() const
{
    QVariant qax_result = property("ToolBar");
    Q_ASSERT(qax_result.isValid());
    return *(int*)qax_result.constData();
}
inline void IWebBrowser2::SetToolBar(int value){ setProperty("ToolBar", QVariant(value)); }

inline int IWebBrowser2::Top() const
{
    QVariant qax_result = property("Top");
    Q_ASSERT(qax_result.isValid());
    return *(int*)qax_result.constData();
}
inline void IWebBrowser2::SetTop(int value){ setProperty("Top", QVariant(value)); }

inline bool IWebBrowser2::TopLevelContainer() const
{
    QVariant qax_result = property("TopLevelContainer");
    Q_ASSERT(qax_result.isValid());
    return *(bool*)qax_result.constData();
}

inline QString IWebBrowser2::Type() const
{
    QVariant qax_result = property("Type");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}

inline bool IWebBrowser2::Visible() const
{
    QVariant qax_result = property("Visible");
    Q_ASSERT(qax_result.isValid());
    return *(bool*)qax_result.constData();
}
inline void IWebBrowser2::SetVisible(bool value){ setProperty("Visible", QVariant(value)); }

inline int IWebBrowser2::Width() const
{
    QVariant qax_result = property("Width");
    Q_ASSERT(qax_result.isValid());
    return *(int*)qax_result.constData();
}
inline void IWebBrowser2::SetWidth(int value){ setProperty("Width", QVariant(value)); }

inline void IWebBrowser2::ClientToWindow(int& pcx, int& pcy)
{
    void *_a[] = {0, (void*)&pcx, (void*)&pcy};
    qt_metacall(QMetaObject::InvokeMetaMethod, 9, _a);
}

inline void IWebBrowser2::ExecWB(SHDocVw::OLECMDID cmdID, SHDocVw::OLECMDEXECOPT cmdexecopt)
{
    void *_a[] = {0, (void*)&cmdID, (void*)&cmdexecopt};
    qt_metacall(QMetaObject::InvokeMetaMethod, 10, _a);
}

inline void IWebBrowser2::ExecWB(SHDocVw::OLECMDID cmdID, SHDocVw::OLECMDEXECOPT cmdexecopt, QVariant& pvaIn)
{
    void *_a[] = {0, (void*)&cmdID, (void*)&cmdexecopt, (void*)&pvaIn};
    qt_metacall(QMetaObject::InvokeMetaMethod, 11, _a);
}

inline void IWebBrowser2::ExecWB(SHDocVw::OLECMDID cmdID, SHDocVw::OLECMDEXECOPT cmdexecopt, QVariant& pvaIn, QVariant& pvaOut)
{
    void *_a[] = {0, (void*)&cmdID, (void*)&cmdexecopt, (void*)&pvaIn, (void*)&pvaOut};
    qt_metacall(QMetaObject::InvokeMetaMethod, 12, _a);
}

inline QVariant IWebBrowser2::GetProperty(const QString& Property)
{
    QVariant qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&Property};
    qt_metacall(QMetaObject::InvokeMetaMethod, 13, _a);
    return qax_result;
}

inline void IWebBrowser2::GoBack()
{
    void *_a[] = {0};
    qt_metacall(QMetaObject::InvokeMetaMethod, 14, _a);
}

inline void IWebBrowser2::GoForward()
{
    void *_a[] = {0};
    qt_metacall(QMetaObject::InvokeMetaMethod, 15, _a);
}

inline void IWebBrowser2::GoHome()
{
    void *_a[] = {0};
    qt_metacall(QMetaObject::InvokeMetaMethod, 16, _a);
}

inline void IWebBrowser2::GoSearch()
{
    void *_a[] = {0};
    qt_metacall(QMetaObject::InvokeMetaMethod, 17, _a);
}

inline void IWebBrowser2::Navigate(const QString& URL)
{
    void *_a[] = {0, (void*)&URL};
    qt_metacall(QMetaObject::InvokeMetaMethod, 18, _a);
}

inline void IWebBrowser2::Navigate(const QString& URL, QVariant& Flags)
{
    void *_a[] = {0, (void*)&URL, (void*)&Flags};
    qt_metacall(QMetaObject::InvokeMetaMethod, 19, _a);
}

inline void IWebBrowser2::Navigate(const QString& URL, QVariant& Flags, QVariant& TargetFrameName)
{
    void *_a[] = {0, (void*)&URL, (void*)&Flags, (void*)&TargetFrameName};
    qt_metacall(QMetaObject::InvokeMetaMethod, 20, _a);
}

inline void IWebBrowser2::Navigate(const QString& URL, QVariant& Flags, QVariant& TargetFrameName, QVariant& PostData)
{
    void *_a[] = {0, (void*)&URL, (void*)&Flags, (void*)&TargetFrameName, (void*)&PostData};
    qt_metacall(QMetaObject::InvokeMetaMethod, 21, _a);
}

inline void IWebBrowser2::Navigate(const QString& URL, QVariant& Flags, QVariant& TargetFrameName, QVariant& PostData, QVariant& Headers)
{
    void *_a[] = {0, (void*)&URL, (void*)&Flags, (void*)&TargetFrameName, (void*)&PostData, (void*)&Headers};
    qt_metacall(QMetaObject::InvokeMetaMethod, 22, _a);
}

inline void IWebBrowser2::Navigate2(QVariant& URL)
{
    void *_a[] = {0, (void*)&URL};
    qt_metacall(QMetaObject::InvokeMetaMethod, 23, _a);
}

inline void IWebBrowser2::Navigate2(QVariant& URL, QVariant& Flags)
{
    void *_a[] = {0, (void*)&URL, (void*)&Flags};
    qt_metacall(QMetaObject::InvokeMetaMethod, 24, _a);
}

inline void IWebBrowser2::Navigate2(QVariant& URL, QVariant& Flags, QVariant& TargetFrameName)
{
    void *_a[] = {0, (void*)&URL, (void*)&Flags, (void*)&TargetFrameName};
    qt_metacall(QMetaObject::InvokeMetaMethod, 25, _a);
}

inline void IWebBrowser2::Navigate2(QVariant& URL, QVariant& Flags, QVariant& TargetFrameName, QVariant& PostData)
{
    void *_a[] = {0, (void*)&URL, (void*)&Flags, (void*)&TargetFrameName, (void*)&PostData};
    qt_metacall(QMetaObject::InvokeMetaMethod, 26, _a);
}

inline void IWebBrowser2::Navigate2(QVariant& URL, QVariant& Flags, QVariant& TargetFrameName, QVariant& PostData, QVariant& Headers)
{
    void *_a[] = {0, (void*)&URL, (void*)&Flags, (void*)&TargetFrameName, (void*)&PostData, (void*)&Headers};
    qt_metacall(QMetaObject::InvokeMetaMethod, 27, _a);
}

inline void IWebBrowser2::PutProperty(const QString& Property, const QVariant& vtValue)
{
    void *_a[] = {0, (void*)&Property, (void*)&vtValue};
    qt_metacall(QMetaObject::InvokeMetaMethod, 28, _a);
}

inline OLECMDF IWebBrowser2::QueryStatusWB(SHDocVw::OLECMDID cmdID)
{
    OLECMDF qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&cmdID};
    qt_metacall(QMetaObject::InvokeMetaMethod, 29, _a);
    return qax_result;
}

inline void IWebBrowser2::Quit()
{
    void *_a[] = {0};
    qt_metacall(QMetaObject::InvokeMetaMethod, 30, _a);
}

inline void IWebBrowser2::Refresh()
{
    void *_a[] = {0};
    qt_metacall(QMetaObject::InvokeMetaMethod, 31, _a);
}

inline void IWebBrowser2::Refresh2()
{
    void *_a[] = {0};
    qt_metacall(QMetaObject::InvokeMetaMethod, 32, _a);
}

inline void IWebBrowser2::Refresh2(QVariant& Level)
{
    void *_a[] = {0, (void*)&Level};
    qt_metacall(QMetaObject::InvokeMetaMethod, 33, _a);
}

inline void IWebBrowser2::ShowBrowserBar(QVariant& pvaClsid)
{
    void *_a[] = {0, (void*)&pvaClsid};
    qt_metacall(QMetaObject::InvokeMetaMethod, 51, _a);
}

inline void IWebBrowser2::ShowBrowserBar(QVariant& pvaClsid, QVariant& pvarShow)
{
    void *_a[] = {0, (void*)&pvaClsid, (void*)&pvarShow};
    qt_metacall(QMetaObject::InvokeMetaMethod, 52, _a);
}

inline void IWebBrowser2::ShowBrowserBar(QVariant& pvaClsid, QVariant& pvarShow, QVariant& pvarSize)
{
    void *_a[] = {0, (void*)&pvaClsid, (void*)&pvarShow, (void*)&pvarSize};
    qt_metacall(QMetaObject::InvokeMetaMethod, 53, _a);
}

inline void IWebBrowser2::Stop()
{
    void *_a[] = {0};
    qt_metacall(QMetaObject::InvokeMetaMethod, 54, _a);
}


inline bool WebBrowser_V1::AddressBar() const
{
    QVariant qax_result = property("AddressBar");
    Q_ASSERT(qax_result.isValid());
    return *(bool*)qax_result.constData();
}
inline void WebBrowser_V1::SetAddressBar(bool value){ setProperty("AddressBar", QVariant(value)); }

inline IDispatch* WebBrowser_V1::Application() const
{
    QVariant qax_result = property("Application");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
    return *(IDispatch**)qax_result.constData();
}

inline bool WebBrowser_V1::Busy() const
{
    QVariant qax_result = property("Busy");
    Q_ASSERT(qax_result.isValid());
    return *(bool*)qax_result.constData();
}

inline IDispatch* WebBrowser_V1::Container() const
{
    QVariant qax_result = property("Container");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
    return *(IDispatch**)qax_result.constData();
}

inline IDispatch* WebBrowser_V1::Document() const
{
    QVariant qax_result = property("Document");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
    return *(IDispatch**)qax_result.constData();
}

inline QString WebBrowser_V1::FullName() const
{
    QVariant qax_result = property("FullName");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}

inline bool WebBrowser_V1::FullScreen() const
{
    QVariant qax_result = property("FullScreen");
    Q_ASSERT(qax_result.isValid());
    return *(bool*)qax_result.constData();
}
inline void WebBrowser_V1::SetFullScreen(bool value){ setProperty("FullScreen", QVariant(value)); }

inline int WebBrowser_V1::HWND() const
{
    QVariant qax_result = property("HWND");
    Q_ASSERT(qax_result.isValid());
    return *(int*)qax_result.constData();
}

inline int WebBrowser_V1::Height() const
{
    QVariant qax_result = property("Height");
    Q_ASSERT(qax_result.isValid());
    return *(int*)qax_result.constData();
}
inline void WebBrowser_V1::SetHeight(int value){ setProperty("Height", QVariant(value)); }

inline int WebBrowser_V1::Left() const
{
    QVariant qax_result = property("Left");
    Q_ASSERT(qax_result.isValid());
    return *(int*)qax_result.constData();
}
inline void WebBrowser_V1::SetLeft(int value){ setProperty("Left", QVariant(value)); }

inline QString WebBrowser_V1::LocationName() const
{
    QVariant qax_result = property("LocationName");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}

inline QString WebBrowser_V1::LocationURL() const
{
    QVariant qax_result = property("LocationURL");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}

inline bool WebBrowser_V1::MenuBar() const
{
    QVariant qax_result = property("MenuBar");
    Q_ASSERT(qax_result.isValid());
    return *(bool*)qax_result.constData();
}
inline void WebBrowser_V1::SetMenuBar(bool value){ setProperty("MenuBar", QVariant(value)); }

inline QString WebBrowser_V1::Name() const
{
    QVariant qax_result = property("Name");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}

inline bool WebBrowser_V1::Offline() const
{
    QVariant qax_result = property("Offline");
    Q_ASSERT(qax_result.isValid());
    return *(bool*)qax_result.constData();
}
inline void WebBrowser_V1::SetOffline(bool value){ setProperty("Offline", QVariant(value)); }

inline IDispatch* WebBrowser_V1::Parent() const
{
    QVariant qax_result = property("Parent");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
    return *(IDispatch**)qax_result.constData();
}

inline QString WebBrowser_V1::Path() const
{
    QVariant qax_result = property("Path");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}

inline SHDocVw::tagREADYSTATE WebBrowser_V1::ReadyState() const
{
    QVariant qax_result = property("ReadyState");
    Q_ASSERT(qax_result.isValid());
    return *(SHDocVw::tagREADYSTATE*)qax_result.constData();
}

inline bool WebBrowser_V1::RegisterAsBrowser() const
{
    QVariant qax_result = property("RegisterAsBrowser");
    Q_ASSERT(qax_result.isValid());
    return *(bool*)qax_result.constData();
}
inline void WebBrowser_V1::SetRegisterAsBrowser(bool value){ setProperty("RegisterAsBrowser", QVariant(value)); }

inline bool WebBrowser_V1::RegisterAsDropTarget() const
{
    QVariant qax_result = property("RegisterAsDropTarget");
    Q_ASSERT(qax_result.isValid());
    return *(bool*)qax_result.constData();
}
inline void WebBrowser_V1::SetRegisterAsDropTarget(bool value){ setProperty("RegisterAsDropTarget", QVariant(value)); }

inline bool WebBrowser_V1::Resizable() const
{
    QVariant qax_result = property("Resizable");
    Q_ASSERT(qax_result.isValid());
    return *(bool*)qax_result.constData();
}
inline void WebBrowser_V1::SetResizable(bool value){ setProperty("Resizable", QVariant(value)); }

inline bool WebBrowser_V1::Silent() const
{
    QVariant qax_result = property("Silent");
    Q_ASSERT(qax_result.isValid());
    return *(bool*)qax_result.constData();
}
inline void WebBrowser_V1::SetSilent(bool value){ setProperty("Silent", QVariant(value)); }

inline bool WebBrowser_V1::StatusBar() const
{
    QVariant qax_result = property("StatusBar");
    Q_ASSERT(qax_result.isValid());
    return *(bool*)qax_result.constData();
}
inline void WebBrowser_V1::SetStatusBar(bool value){ setProperty("StatusBar", QVariant(value)); }

inline QString WebBrowser_V1::StatusText() const
{
    QVariant qax_result = property("StatusText");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}
inline void WebBrowser_V1::SetStatusText(const QString& value){ setProperty("StatusText", QVariant(value)); }

inline bool WebBrowser_V1::TheaterMode() const
{
    QVariant qax_result = property("TheaterMode");
    Q_ASSERT(qax_result.isValid());
    return *(bool*)qax_result.constData();
}
inline void WebBrowser_V1::SetTheaterMode(bool value){ setProperty("TheaterMode", QVariant(value)); }

inline int WebBrowser_V1::ToolBar() const
{
    QVariant qax_result = property("ToolBar");
    Q_ASSERT(qax_result.isValid());
    return *(int*)qax_result.constData();
}
inline void WebBrowser_V1::SetToolBar(int value){ setProperty("ToolBar", QVariant(value)); }

inline int WebBrowser_V1::Top() const
{
    QVariant qax_result = property("Top");
    Q_ASSERT(qax_result.isValid());
    return *(int*)qax_result.constData();
}
inline void WebBrowser_V1::SetTop(int value){ setProperty("Top", QVariant(value)); }

inline bool WebBrowser_V1::TopLevelContainer() const
{
    QVariant qax_result = property("TopLevelContainer");
    Q_ASSERT(qax_result.isValid());
    return *(bool*)qax_result.constData();
}

inline QString WebBrowser_V1::Type() const
{
    QVariant qax_result = property("Type");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}

inline bool WebBrowser_V1::Visible() const
{
    QVariant qax_result = property("Visible");
    Q_ASSERT(qax_result.isValid());
    return *(bool*)qax_result.constData();
}
inline void WebBrowser_V1::SetVisible(bool value){ setProperty("Visible", QVariant(value)); }

inline int WebBrowser_V1::Width() const
{
    QVariant qax_result = property("Width");
    Q_ASSERT(qax_result.isValid());
    return *(int*)qax_result.constData();
}
inline void WebBrowser_V1::SetWidth(int value){ setProperty("Width", QVariant(value)); }

inline void WebBrowser_V1::ClientToWindow(int& pcx, int& pcy)
{
    void *_a[] = {0, (void*)&pcx, (void*)&pcy};
    qt_metacall(QMetaObject::InvokeMetaMethod, 87, _a);
}

inline void WebBrowser_V1::ExecWB(SHDocVw::OLECMDID cmdID, SHDocVw::OLECMDEXECOPT cmdexecopt)
{
    void *_a[] = {0, (void*)&cmdID, (void*)&cmdexecopt};
    qt_metacall(QMetaObject::InvokeMetaMethod, 88, _a);
}

inline void WebBrowser_V1::ExecWB(SHDocVw::OLECMDID cmdID, SHDocVw::OLECMDEXECOPT cmdexecopt, QVariant& pvaIn)
{
    void *_a[] = {0, (void*)&cmdID, (void*)&cmdexecopt, (void*)&pvaIn};
    qt_metacall(QMetaObject::InvokeMetaMethod, 89, _a);
}

inline void WebBrowser_V1::ExecWB(SHDocVw::OLECMDID cmdID, SHDocVw::OLECMDEXECOPT cmdexecopt, QVariant& pvaIn, QVariant& pvaOut)
{
    void *_a[] = {0, (void*)&cmdID, (void*)&cmdexecopt, (void*)&pvaIn, (void*)&pvaOut};
    qt_metacall(QMetaObject::InvokeMetaMethod, 90, _a);
}

inline QVariant WebBrowser_V1::GetProperty(const QString& Property)
{
    QVariant qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&Property};
    qt_metacall(QMetaObject::InvokeMetaMethod, 91, _a);
    return qax_result;
}

inline void WebBrowser_V1::GoBack()
{
    void *_a[] = {0};
    qt_metacall(QMetaObject::InvokeMetaMethod, 92, _a);
}

inline void WebBrowser_V1::GoForward()
{
    void *_a[] = {0};
    qt_metacall(QMetaObject::InvokeMetaMethod, 93, _a);
}

inline void WebBrowser_V1::GoHome()
{
    void *_a[] = {0};
    qt_metacall(QMetaObject::InvokeMetaMethod, 94, _a);
}

inline void WebBrowser_V1::GoSearch()
{
    void *_a[] = {0};
    qt_metacall(QMetaObject::InvokeMetaMethod, 95, _a);
}

inline void WebBrowser_V1::Navigate(const QString& URL)
{
    void *_a[] = {0, (void*)&URL};
    qt_metacall(QMetaObject::InvokeMetaMethod, 96, _a);
}

inline void WebBrowser_V1::Navigate(const QString& URL, QVariant& Flags)
{
    void *_a[] = {0, (void*)&URL, (void*)&Flags};
    qt_metacall(QMetaObject::InvokeMetaMethod, 97, _a);
}

inline void WebBrowser_V1::Navigate(const QString& URL, QVariant& Flags, QVariant& TargetFrameName)
{
    void *_a[] = {0, (void*)&URL, (void*)&Flags, (void*)&TargetFrameName};
    qt_metacall(QMetaObject::InvokeMetaMethod, 98, _a);
}

inline void WebBrowser_V1::Navigate(const QString& URL, QVariant& Flags, QVariant& TargetFrameName, QVariant& PostData)
{
    void *_a[] = {0, (void*)&URL, (void*)&Flags, (void*)&TargetFrameName, (void*)&PostData};
    qt_metacall(QMetaObject::InvokeMetaMethod, 99, _a);
}

inline void WebBrowser_V1::Navigate(const QString& URL, QVariant& Flags, QVariant& TargetFrameName, QVariant& PostData, QVariant& Headers)
{
    void *_a[] = {0, (void*)&URL, (void*)&Flags, (void*)&TargetFrameName, (void*)&PostData, (void*)&Headers};
    qt_metacall(QMetaObject::InvokeMetaMethod, 100, _a);
}

inline void WebBrowser_V1::Navigate2(QVariant& URL)
{
    void *_a[] = {0, (void*)&URL};
    qt_metacall(QMetaObject::InvokeMetaMethod, 101, _a);
}

inline void WebBrowser_V1::Navigate2(QVariant& URL, QVariant& Flags)
{
    void *_a[] = {0, (void*)&URL, (void*)&Flags};
    qt_metacall(QMetaObject::InvokeMetaMethod, 102, _a);
}

inline void WebBrowser_V1::Navigate2(QVariant& URL, QVariant& Flags, QVariant& TargetFrameName)
{
    void *_a[] = {0, (void*)&URL, (void*)&Flags, (void*)&TargetFrameName};
    qt_metacall(QMetaObject::InvokeMetaMethod, 103, _a);
}

inline void WebBrowser_V1::Navigate2(QVariant& URL, QVariant& Flags, QVariant& TargetFrameName, QVariant& PostData)
{
    void *_a[] = {0, (void*)&URL, (void*)&Flags, (void*)&TargetFrameName, (void*)&PostData};
    qt_metacall(QMetaObject::InvokeMetaMethod, 104, _a);
}

inline void WebBrowser_V1::Navigate2(QVariant& URL, QVariant& Flags, QVariant& TargetFrameName, QVariant& PostData, QVariant& Headers)
{
    void *_a[] = {0, (void*)&URL, (void*)&Flags, (void*)&TargetFrameName, (void*)&PostData, (void*)&Headers};
    qt_metacall(QMetaObject::InvokeMetaMethod, 105, _a);
}

inline void WebBrowser_V1::PutProperty(const QString& Property, const QVariant& vtValue)
{
    void *_a[] = {0, (void*)&Property, (void*)&vtValue};
    qt_metacall(QMetaObject::InvokeMetaMethod, 106, _a);
}

inline OLECMDF WebBrowser_V1::QueryStatusWB(SHDocVw::OLECMDID cmdID)
{
    OLECMDF qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&cmdID};
    qt_metacall(QMetaObject::InvokeMetaMethod, 107, _a);
    return qax_result;
}

inline void WebBrowser_V1::Quit()
{
    void *_a[] = {0};
    qt_metacall(QMetaObject::InvokeMetaMethod, 108, _a);
}

inline void WebBrowser_V1::Refresh()
{
    void *_a[] = {0};
    qt_metacall(QMetaObject::InvokeMetaMethod, 109, _a);
}

inline void WebBrowser_V1::Refresh2()
{
    void *_a[] = {0};
    qt_metacall(QMetaObject::InvokeMetaMethod, 110, _a);
}

inline void WebBrowser_V1::Refresh2(QVariant& Level)
{
    void *_a[] = {0, (void*)&Level};
    qt_metacall(QMetaObject::InvokeMetaMethod, 111, _a);
}

inline void WebBrowser_V1::ShowBrowserBar(QVariant& pvaClsid)
{
    void *_a[] = {0, (void*)&pvaClsid};
    qt_metacall(QMetaObject::InvokeMetaMethod, 129, _a);
}

inline void WebBrowser_V1::ShowBrowserBar(QVariant& pvaClsid, QVariant& pvarShow)
{
    void *_a[] = {0, (void*)&pvaClsid, (void*)&pvarShow};
    qt_metacall(QMetaObject::InvokeMetaMethod, 130, _a);
}

inline void WebBrowser_V1::ShowBrowserBar(QVariant& pvaClsid, QVariant& pvarShow, QVariant& pvarSize)
{
    void *_a[] = {0, (void*)&pvaClsid, (void*)&pvarShow, (void*)&pvarSize};
    qt_metacall(QMetaObject::InvokeMetaMethod, 131, _a);
}

inline void WebBrowser_V1::Stop()
{
    void *_a[] = {0};
    qt_metacall(QMetaObject::InvokeMetaMethod, 132, _a);
}


inline bool WebBrowser::AddressBar() const
{
    QVariant qax_result = property("AddressBar");
    Q_ASSERT(qax_result.isValid());
    return *(bool*)qax_result.constData();
}
inline void WebBrowser::SetAddressBar(bool value){ setProperty("AddressBar", QVariant(value)); }

inline IDispatch* WebBrowser::Application() const
{
    QVariant qax_result = property("Application");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
    return *(IDispatch**)qax_result.constData();
}

inline bool WebBrowser::Busy() const
{
    QVariant qax_result = property("Busy");
    Q_ASSERT(qax_result.isValid());
    return *(bool*)qax_result.constData();
}

inline IDispatch* WebBrowser::Container() const
{
    QVariant qax_result = property("Container");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
    return *(IDispatch**)qax_result.constData();
}

inline IDispatch* WebBrowser::Document() const
{
    QVariant qax_result = property("Document");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
    return *(IDispatch**)qax_result.constData();
}

inline QString WebBrowser::FullName() const
{
    QVariant qax_result = property("FullName");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}

inline bool WebBrowser::FullScreen() const
{
    QVariant qax_result = property("FullScreen");
    Q_ASSERT(qax_result.isValid());
    return *(bool*)qax_result.constData();
}
inline void WebBrowser::SetFullScreen(bool value){ setProperty("FullScreen", QVariant(value)); }

inline int WebBrowser::HWND() const
{
    QVariant qax_result = property("HWND");
    Q_ASSERT(qax_result.isValid());
    return *(int*)qax_result.constData();
}

inline int WebBrowser::Height() const
{
    QVariant qax_result = property("Height");
    Q_ASSERT(qax_result.isValid());
    return *(int*)qax_result.constData();
}
inline void WebBrowser::SetHeight(int value){ setProperty("Height", QVariant(value)); }

inline int WebBrowser::Left() const
{
    QVariant qax_result = property("Left");
    Q_ASSERT(qax_result.isValid());
    return *(int*)qax_result.constData();
}
inline void WebBrowser::SetLeft(int value){ setProperty("Left", QVariant(value)); }

inline QString WebBrowser::LocationName() const
{
    QVariant qax_result = property("LocationName");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}

inline QString WebBrowser::LocationURL() const
{
    QVariant qax_result = property("LocationURL");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}

inline bool WebBrowser::MenuBar() const
{
    QVariant qax_result = property("MenuBar");
    Q_ASSERT(qax_result.isValid());
    return *(bool*)qax_result.constData();
}
inline void WebBrowser::SetMenuBar(bool value){ setProperty("MenuBar", QVariant(value)); }

inline QString WebBrowser::Name() const
{
    QVariant qax_result = property("Name");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}

inline bool WebBrowser::Offline() const
{
    QVariant qax_result = property("Offline");
    Q_ASSERT(qax_result.isValid());
    return *(bool*)qax_result.constData();
}
inline void WebBrowser::SetOffline(bool value){ setProperty("Offline", QVariant(value)); }

inline IDispatch* WebBrowser::Parent() const
{
    QVariant qax_result = property("Parent");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
    return *(IDispatch**)qax_result.constData();
}

inline QString WebBrowser::Path() const
{
    QVariant qax_result = property("Path");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}

inline SHDocVw::tagREADYSTATE WebBrowser::ReadyState() const
{
    QVariant qax_result = property("ReadyState");
    Q_ASSERT(qax_result.isValid());
    return *(SHDocVw::tagREADYSTATE*)qax_result.constData();
}

inline bool WebBrowser::RegisterAsBrowser() const
{
    QVariant qax_result = property("RegisterAsBrowser");
    Q_ASSERT(qax_result.isValid());
    return *(bool*)qax_result.constData();
}
inline void WebBrowser::SetRegisterAsBrowser(bool value){ setProperty("RegisterAsBrowser", QVariant(value)); }

inline bool WebBrowser::RegisterAsDropTarget() const
{
    QVariant qax_result = property("RegisterAsDropTarget");
    Q_ASSERT(qax_result.isValid());
    return *(bool*)qax_result.constData();
}
inline void WebBrowser::SetRegisterAsDropTarget(bool value){ setProperty("RegisterAsDropTarget", QVariant(value)); }

inline bool WebBrowser::Resizable() const
{
    QVariant qax_result = property("Resizable");
    Q_ASSERT(qax_result.isValid());
    return *(bool*)qax_result.constData();
}
inline void WebBrowser::SetResizable(bool value){ setProperty("Resizable", QVariant(value)); }

inline bool WebBrowser::Silent() const
{
    QVariant qax_result = property("Silent");
    Q_ASSERT(qax_result.isValid());
    return *(bool*)qax_result.constData();
}
inline void WebBrowser::SetSilent(bool value){ setProperty("Silent", QVariant(value)); }

inline bool WebBrowser::StatusBar() const
{
    QVariant qax_result = property("StatusBar");
    Q_ASSERT(qax_result.isValid());
    return *(bool*)qax_result.constData();
}
inline void WebBrowser::SetStatusBar(bool value){ setProperty("StatusBar", QVariant(value)); }

inline QString WebBrowser::StatusText() const
{
    QVariant qax_result = property("StatusText");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}
inline void WebBrowser::SetStatusText(const QString& value){ setProperty("StatusText", QVariant(value)); }

inline bool WebBrowser::TheaterMode() const
{
    QVariant qax_result = property("TheaterMode");
    Q_ASSERT(qax_result.isValid());
    return *(bool*)qax_result.constData();
}
inline void WebBrowser::SetTheaterMode(bool value){ setProperty("TheaterMode", QVariant(value)); }

inline int WebBrowser::ToolBar() const
{
    QVariant qax_result = property("ToolBar");
    Q_ASSERT(qax_result.isValid());
    return *(int*)qax_result.constData();
}
inline void WebBrowser::SetToolBar(int value){ setProperty("ToolBar", QVariant(value)); }

inline int WebBrowser::Top() const
{
    QVariant qax_result = property("Top");
    Q_ASSERT(qax_result.isValid());
    return *(int*)qax_result.constData();
}
inline void WebBrowser::SetTop(int value){ setProperty("Top", QVariant(value)); }

inline bool WebBrowser::TopLevelContainer() const
{
    QVariant qax_result = property("TopLevelContainer");
    Q_ASSERT(qax_result.isValid());
    return *(bool*)qax_result.constData();
}

inline QString WebBrowser::Type() const
{
    QVariant qax_result = property("Type");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}

inline bool WebBrowser::Visible() const
{
    QVariant qax_result = property("Visible");
    Q_ASSERT(qax_result.isValid());
    return *(bool*)qax_result.constData();
}
inline void WebBrowser::SetVisible(bool value){ setProperty("Visible", QVariant(value)); }

inline int WebBrowser::Width() const
{
    QVariant qax_result = property("Width");
    Q_ASSERT(qax_result.isValid());
    return *(int*)qax_result.constData();
}
inline void WebBrowser::SetWidth(int value){ setProperty("Width", QVariant(value)); }

inline void WebBrowser::ClientToWindow(int& pcx, int& pcy)
{
    void *_a[] = {0, (void*)&pcx, (void*)&pcy};
    qt_metacall(QMetaObject::InvokeMetaMethod, 87, _a);
}

inline void WebBrowser::ExecWB(SHDocVw::OLECMDID cmdID, SHDocVw::OLECMDEXECOPT cmdexecopt)
{
    void *_a[] = {0, (void*)&cmdID, (void*)&cmdexecopt};
    qt_metacall(QMetaObject::InvokeMetaMethod, 88, _a);
}

inline void WebBrowser::ExecWB(SHDocVw::OLECMDID cmdID, SHDocVw::OLECMDEXECOPT cmdexecopt, QVariant& pvaIn)
{
    void *_a[] = {0, (void*)&cmdID, (void*)&cmdexecopt, (void*)&pvaIn};
    qt_metacall(QMetaObject::InvokeMetaMethod, 89, _a);
}

inline void WebBrowser::ExecWB(SHDocVw::OLECMDID cmdID, SHDocVw::OLECMDEXECOPT cmdexecopt, QVariant& pvaIn, QVariant& pvaOut)
{
    void *_a[] = {0, (void*)&cmdID, (void*)&cmdexecopt, (void*)&pvaIn, (void*)&pvaOut};
    qt_metacall(QMetaObject::InvokeMetaMethod, 90, _a);
}

inline QVariant WebBrowser::GetProperty(const QString& Property)
{
    QVariant qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&Property};
    qt_metacall(QMetaObject::InvokeMetaMethod, 91, _a);
    return qax_result;
}

inline void WebBrowser::GoBack()
{
    void *_a[] = {0};
    qt_metacall(QMetaObject::InvokeMetaMethod, 92, _a);
}

inline void WebBrowser::GoForward()
{
    void *_a[] = {0};
    qt_metacall(QMetaObject::InvokeMetaMethod, 93, _a);
}

inline void WebBrowser::GoHome()
{
    void *_a[] = {0};
    qt_metacall(QMetaObject::InvokeMetaMethod, 94, _a);
}

inline void WebBrowser::GoSearch()
{
    void *_a[] = {0};
    qt_metacall(QMetaObject::InvokeMetaMethod, 95, _a);
}

inline void WebBrowser::Navigate(const QString& URL)
{
    void *_a[] = {0, (void*)&URL};
    qt_metacall(QMetaObject::InvokeMetaMethod, 96, _a);
}

inline void WebBrowser::Navigate(const QString& URL, QVariant& Flags)
{
    void *_a[] = {0, (void*)&URL, (void*)&Flags};
    qt_metacall(QMetaObject::InvokeMetaMethod, 97, _a);
}

inline void WebBrowser::Navigate(const QString& URL, QVariant& Flags, QVariant& TargetFrameName)
{
    void *_a[] = {0, (void*)&URL, (void*)&Flags, (void*)&TargetFrameName};
    qt_metacall(QMetaObject::InvokeMetaMethod, 98, _a);
}

inline void WebBrowser::Navigate(const QString& URL, QVariant& Flags, QVariant& TargetFrameName, QVariant& PostData)
{
    void *_a[] = {0, (void*)&URL, (void*)&Flags, (void*)&TargetFrameName, (void*)&PostData};
    qt_metacall(QMetaObject::InvokeMetaMethod, 99, _a);
}

inline void WebBrowser::Navigate(const QString& URL, QVariant& Flags, QVariant& TargetFrameName, QVariant& PostData, QVariant& Headers)
{
    void *_a[] = {0, (void*)&URL, (void*)&Flags, (void*)&TargetFrameName, (void*)&PostData, (void*)&Headers};
    qt_metacall(QMetaObject::InvokeMetaMethod, 100, _a);
}

inline void WebBrowser::Navigate2(QVariant& URL)
{
    void *_a[] = {0, (void*)&URL};
    qt_metacall(QMetaObject::InvokeMetaMethod, 101, _a);
}

inline void WebBrowser::Navigate2(QVariant& URL, QVariant& Flags)
{
    void *_a[] = {0, (void*)&URL, (void*)&Flags};
    qt_metacall(QMetaObject::InvokeMetaMethod, 102, _a);
}

inline void WebBrowser::Navigate2(QVariant& URL, QVariant& Flags, QVariant& TargetFrameName)
{
    void *_a[] = {0, (void*)&URL, (void*)&Flags, (void*)&TargetFrameName};
    qt_metacall(QMetaObject::InvokeMetaMethod, 103, _a);
}

inline void WebBrowser::Navigate2(QVariant& URL, QVariant& Flags, QVariant& TargetFrameName, QVariant& PostData)
{
    void *_a[] = {0, (void*)&URL, (void*)&Flags, (void*)&TargetFrameName, (void*)&PostData};
    qt_metacall(QMetaObject::InvokeMetaMethod, 104, _a);
}

inline void WebBrowser::Navigate2(QVariant& URL, QVariant& Flags, QVariant& TargetFrameName, QVariant& PostData, QVariant& Headers)
{
    void *_a[] = {0, (void*)&URL, (void*)&Flags, (void*)&TargetFrameName, (void*)&PostData, (void*)&Headers};
    qt_metacall(QMetaObject::InvokeMetaMethod, 105, _a);
}

inline void WebBrowser::PutProperty(const QString& Property, const QVariant& vtValue)
{
    void *_a[] = {0, (void*)&Property, (void*)&vtValue};
    qt_metacall(QMetaObject::InvokeMetaMethod, 106, _a);
}

inline OLECMDF WebBrowser::QueryStatusWB(SHDocVw::OLECMDID cmdID)
{
    OLECMDF qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&cmdID};
    qt_metacall(QMetaObject::InvokeMetaMethod, 107, _a);
    return qax_result;
}

inline void WebBrowser::Quit()
{
    void *_a[] = {0};
    qt_metacall(QMetaObject::InvokeMetaMethod, 108, _a);
}

inline void WebBrowser::Refresh()
{
    void *_a[] = {0};
    qt_metacall(QMetaObject::InvokeMetaMethod, 109, _a);
}

inline void WebBrowser::Refresh2()
{
    void *_a[] = {0};
    qt_metacall(QMetaObject::InvokeMetaMethod, 110, _a);
}

inline void WebBrowser::Refresh2(QVariant& Level)
{
    void *_a[] = {0, (void*)&Level};
    qt_metacall(QMetaObject::InvokeMetaMethod, 111, _a);
}

inline void WebBrowser::ShowBrowserBar(QVariant& pvaClsid)
{
    void *_a[] = {0, (void*)&pvaClsid};
    qt_metacall(QMetaObject::InvokeMetaMethod, 129, _a);
}

inline void WebBrowser::ShowBrowserBar(QVariant& pvaClsid, QVariant& pvarShow)
{
    void *_a[] = {0, (void*)&pvaClsid, (void*)&pvarShow};
    qt_metacall(QMetaObject::InvokeMetaMethod, 130, _a);
}

inline void WebBrowser::ShowBrowserBar(QVariant& pvaClsid, QVariant& pvarShow, QVariant& pvarSize)
{
    void *_a[] = {0, (void*)&pvaClsid, (void*)&pvarShow, (void*)&pvarSize};
    qt_metacall(QMetaObject::InvokeMetaMethod, 131, _a);
}

inline void WebBrowser::Stop()
{
    void *_a[] = {0};
    qt_metacall(QMetaObject::InvokeMetaMethod, 132, _a);
}


inline bool InternetExplorer::AddressBar() const
{
    QVariant qax_result = property("AddressBar");
    Q_ASSERT(qax_result.isValid());
    return *(bool*)qax_result.constData();
}
inline void InternetExplorer::SetAddressBar(bool value){ setProperty("AddressBar", QVariant(value)); }

inline IDispatch* InternetExplorer::Application() const
{
    QVariant qax_result = property("Application");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
    return *(IDispatch**)qax_result.constData();
}

inline bool InternetExplorer::Busy() const
{
    QVariant qax_result = property("Busy");
    Q_ASSERT(qax_result.isValid());
    return *(bool*)qax_result.constData();
}

inline IDispatch* InternetExplorer::Container() const
{
    QVariant qax_result = property("Container");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
    return *(IDispatch**)qax_result.constData();
}

inline IDispatch* InternetExplorer::Document() const
{
    QVariant qax_result = property("Document");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
    return *(IDispatch**)qax_result.constData();
}

inline QString InternetExplorer::FullName() const
{
    QVariant qax_result = property("FullName");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}

inline bool InternetExplorer::FullScreen() const
{
    QVariant qax_result = property("FullScreen");
    Q_ASSERT(qax_result.isValid());
    return *(bool*)qax_result.constData();
}
inline void InternetExplorer::SetFullScreen(bool value){ setProperty("FullScreen", QVariant(value)); }

inline int InternetExplorer::HWND() const
{
    QVariant qax_result = property("HWND");
    Q_ASSERT(qax_result.isValid());
    return *(int*)qax_result.constData();
}

inline int InternetExplorer::Height() const
{
    QVariant qax_result = property("Height");
    Q_ASSERT(qax_result.isValid());
    return *(int*)qax_result.constData();
}
inline void InternetExplorer::SetHeight(int value){ setProperty("Height", QVariant(value)); }

inline int InternetExplorer::Left() const
{
    QVariant qax_result = property("Left");
    Q_ASSERT(qax_result.isValid());
    return *(int*)qax_result.constData();
}
inline void InternetExplorer::SetLeft(int value){ setProperty("Left", QVariant(value)); }

inline QString InternetExplorer::LocationName() const
{
    QVariant qax_result = property("LocationName");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}

inline QString InternetExplorer::LocationURL() const
{
    QVariant qax_result = property("LocationURL");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}

inline bool InternetExplorer::MenuBar() const
{
    QVariant qax_result = property("MenuBar");
    Q_ASSERT(qax_result.isValid());
    return *(bool*)qax_result.constData();
}
inline void InternetExplorer::SetMenuBar(bool value){ setProperty("MenuBar", QVariant(value)); }

inline QString InternetExplorer::Name() const
{
    QVariant qax_result = property("Name");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}

inline bool InternetExplorer::Offline() const
{
    QVariant qax_result = property("Offline");
    Q_ASSERT(qax_result.isValid());
    return *(bool*)qax_result.constData();
}
inline void InternetExplorer::SetOffline(bool value){ setProperty("Offline", QVariant(value)); }

inline IDispatch* InternetExplorer::Parent() const
{
    QVariant qax_result = property("Parent");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
    return *(IDispatch**)qax_result.constData();
}

inline QString InternetExplorer::Path() const
{
    QVariant qax_result = property("Path");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}

inline SHDocVw::tagREADYSTATE InternetExplorer::ReadyState() const
{
    QVariant qax_result = property("ReadyState");
    Q_ASSERT(qax_result.isValid());
    return *(SHDocVw::tagREADYSTATE*)qax_result.constData();
}

inline bool InternetExplorer::RegisterAsBrowser() const
{
    QVariant qax_result = property("RegisterAsBrowser");
    Q_ASSERT(qax_result.isValid());
    return *(bool*)qax_result.constData();
}
inline void InternetExplorer::SetRegisterAsBrowser(bool value){ setProperty("RegisterAsBrowser", QVariant(value)); }

inline bool InternetExplorer::RegisterAsDropTarget() const
{
    QVariant qax_result = property("RegisterAsDropTarget");
    Q_ASSERT(qax_result.isValid());
    return *(bool*)qax_result.constData();
}
inline void InternetExplorer::SetRegisterAsDropTarget(bool value){ setProperty("RegisterAsDropTarget", QVariant(value)); }

inline bool InternetExplorer::Resizable() const
{
    QVariant qax_result = property("Resizable");
    Q_ASSERT(qax_result.isValid());
    return *(bool*)qax_result.constData();
}
inline void InternetExplorer::SetResizable(bool value){ setProperty("Resizable", QVariant(value)); }

inline bool InternetExplorer::Silent() const
{
    QVariant qax_result = property("Silent");
    Q_ASSERT(qax_result.isValid());
    return *(bool*)qax_result.constData();
}
inline void InternetExplorer::SetSilent(bool value){ setProperty("Silent", QVariant(value)); }

inline bool InternetExplorer::StatusBar() const
{
    QVariant qax_result = property("StatusBar");
    Q_ASSERT(qax_result.isValid());
    return *(bool*)qax_result.constData();
}
inline void InternetExplorer::SetStatusBar(bool value){ setProperty("StatusBar", QVariant(value)); }

inline QString InternetExplorer::StatusText() const
{
    QVariant qax_result = property("StatusText");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}
inline void InternetExplorer::SetStatusText(const QString& value){ setProperty("StatusText", QVariant(value)); }

inline bool InternetExplorer::TheaterMode() const
{
    QVariant qax_result = property("TheaterMode");
    Q_ASSERT(qax_result.isValid());
    return *(bool*)qax_result.constData();
}
inline void InternetExplorer::SetTheaterMode(bool value){ setProperty("TheaterMode", QVariant(value)); }

inline int InternetExplorer::ToolBar() const
{
    QVariant qax_result = property("ToolBar");
    Q_ASSERT(qax_result.isValid());
    return *(int*)qax_result.constData();
}
inline void InternetExplorer::SetToolBar(int value){ setProperty("ToolBar", QVariant(value)); }

inline int InternetExplorer::Top() const
{
    QVariant qax_result = property("Top");
    Q_ASSERT(qax_result.isValid());
    return *(int*)qax_result.constData();
}
inline void InternetExplorer::SetTop(int value){ setProperty("Top", QVariant(value)); }

inline bool InternetExplorer::TopLevelContainer() const
{
    QVariant qax_result = property("TopLevelContainer");
    Q_ASSERT(qax_result.isValid());
    return *(bool*)qax_result.constData();
}

inline QString InternetExplorer::Type() const
{
    QVariant qax_result = property("Type");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}

inline bool InternetExplorer::Visible() const
{
    QVariant qax_result = property("Visible");
    Q_ASSERT(qax_result.isValid());
    return *(bool*)qax_result.constData();
}
inline void InternetExplorer::SetVisible(bool value){ setProperty("Visible", QVariant(value)); }

inline int InternetExplorer::Width() const
{
    QVariant qax_result = property("Width");
    Q_ASSERT(qax_result.isValid());
    return *(int*)qax_result.constData();
}
inline void InternetExplorer::SetWidth(int value){ setProperty("Width", QVariant(value)); }

inline void InternetExplorer::ClientToWindow(int& pcx, int& pcy)
{
    void *_a[] = {0, (void*)&pcx, (void*)&pcy};
    qt_metacall(QMetaObject::InvokeMetaMethod, 60, _a);
}

inline void InternetExplorer::ExecWB(SHDocVw::OLECMDID cmdID, SHDocVw::OLECMDEXECOPT cmdexecopt)
{
    void *_a[] = {0, (void*)&cmdID, (void*)&cmdexecopt};
    qt_metacall(QMetaObject::InvokeMetaMethod, 61, _a);
}

inline void InternetExplorer::ExecWB(SHDocVw::OLECMDID cmdID, SHDocVw::OLECMDEXECOPT cmdexecopt, QVariant& pvaIn)
{
    void *_a[] = {0, (void*)&cmdID, (void*)&cmdexecopt, (void*)&pvaIn};
    qt_metacall(QMetaObject::InvokeMetaMethod, 62, _a);
}

inline void InternetExplorer::ExecWB(SHDocVw::OLECMDID cmdID, SHDocVw::OLECMDEXECOPT cmdexecopt, QVariant& pvaIn, QVariant& pvaOut)
{
    void *_a[] = {0, (void*)&cmdID, (void*)&cmdexecopt, (void*)&pvaIn, (void*)&pvaOut};
    qt_metacall(QMetaObject::InvokeMetaMethod, 63, _a);
}

inline QVariant InternetExplorer::GetProperty(const QString& Property)
{
    QVariant qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&Property};
    qt_metacall(QMetaObject::InvokeMetaMethod, 64, _a);
    return qax_result;
}

inline void InternetExplorer::GoBack()
{
    void *_a[] = {0};
    qt_metacall(QMetaObject::InvokeMetaMethod, 65, _a);
}

inline void InternetExplorer::GoForward()
{
    void *_a[] = {0};
    qt_metacall(QMetaObject::InvokeMetaMethod, 66, _a);
}

inline void InternetExplorer::GoHome()
{
    void *_a[] = {0};
    qt_metacall(QMetaObject::InvokeMetaMethod, 67, _a);
}

inline void InternetExplorer::GoSearch()
{
    void *_a[] = {0};
    qt_metacall(QMetaObject::InvokeMetaMethod, 68, _a);
}

inline void InternetExplorer::Navigate(const QString& URL)
{
    void *_a[] = {0, (void*)&URL};
    qt_metacall(QMetaObject::InvokeMetaMethod, 69, _a);
}

inline void InternetExplorer::Navigate(const QString& URL, QVariant& Flags)
{
    void *_a[] = {0, (void*)&URL, (void*)&Flags};
    qt_metacall(QMetaObject::InvokeMetaMethod, 70, _a);
}

inline void InternetExplorer::Navigate(const QString& URL, QVariant& Flags, QVariant& TargetFrameName)
{
    void *_a[] = {0, (void*)&URL, (void*)&Flags, (void*)&TargetFrameName};
    qt_metacall(QMetaObject::InvokeMetaMethod, 71, _a);
}

inline void InternetExplorer::Navigate(const QString& URL, QVariant& Flags, QVariant& TargetFrameName, QVariant& PostData)
{
    void *_a[] = {0, (void*)&URL, (void*)&Flags, (void*)&TargetFrameName, (void*)&PostData};
    qt_metacall(QMetaObject::InvokeMetaMethod, 72, _a);
}

inline void InternetExplorer::Navigate(const QString& URL, QVariant& Flags, QVariant& TargetFrameName, QVariant& PostData, QVariant& Headers)
{
    void *_a[] = {0, (void*)&URL, (void*)&Flags, (void*)&TargetFrameName, (void*)&PostData, (void*)&Headers};
    qt_metacall(QMetaObject::InvokeMetaMethod, 73, _a);
}

inline void InternetExplorer::Navigate2(QVariant& URL)
{
    void *_a[] = {0, (void*)&URL};
    qt_metacall(QMetaObject::InvokeMetaMethod, 74, _a);
}

inline void InternetExplorer::Navigate2(QVariant& URL, QVariant& Flags)
{
    void *_a[] = {0, (void*)&URL, (void*)&Flags};
    qt_metacall(QMetaObject::InvokeMetaMethod, 75, _a);
}

inline void InternetExplorer::Navigate2(QVariant& URL, QVariant& Flags, QVariant& TargetFrameName)
{
    void *_a[] = {0, (void*)&URL, (void*)&Flags, (void*)&TargetFrameName};
    qt_metacall(QMetaObject::InvokeMetaMethod, 76, _a);
}

inline void InternetExplorer::Navigate2(QVariant& URL, QVariant& Flags, QVariant& TargetFrameName, QVariant& PostData)
{
    void *_a[] = {0, (void*)&URL, (void*)&Flags, (void*)&TargetFrameName, (void*)&PostData};
    qt_metacall(QMetaObject::InvokeMetaMethod, 77, _a);
}

inline void InternetExplorer::Navigate2(QVariant& URL, QVariant& Flags, QVariant& TargetFrameName, QVariant& PostData, QVariant& Headers)
{
    void *_a[] = {0, (void*)&URL, (void*)&Flags, (void*)&TargetFrameName, (void*)&PostData, (void*)&Headers};
    qt_metacall(QMetaObject::InvokeMetaMethod, 78, _a);
}

inline void InternetExplorer::PutProperty(const QString& Property, const QVariant& vtValue)
{
    void *_a[] = {0, (void*)&Property, (void*)&vtValue};
    qt_metacall(QMetaObject::InvokeMetaMethod, 79, _a);
}

inline OLECMDF InternetExplorer::QueryStatusWB(SHDocVw::OLECMDID cmdID)
{
    OLECMDF qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&cmdID};
    qt_metacall(QMetaObject::InvokeMetaMethod, 80, _a);
    return qax_result;
}

inline void InternetExplorer::Quit()
{
    void *_a[] = {0};
    qt_metacall(QMetaObject::InvokeMetaMethod, 81, _a);
}

inline void InternetExplorer::Refresh()
{
    void *_a[] = {0};
    qt_metacall(QMetaObject::InvokeMetaMethod, 82, _a);
}

inline void InternetExplorer::Refresh2()
{
    void *_a[] = {0};
    qt_metacall(QMetaObject::InvokeMetaMethod, 83, _a);
}

inline void InternetExplorer::Refresh2(QVariant& Level)
{
    void *_a[] = {0, (void*)&Level};
    qt_metacall(QMetaObject::InvokeMetaMethod, 84, _a);
}

inline void InternetExplorer::ShowBrowserBar(QVariant& pvaClsid)
{
    void *_a[] = {0, (void*)&pvaClsid};
    qt_metacall(QMetaObject::InvokeMetaMethod, 102, _a);
}

inline void InternetExplorer::ShowBrowserBar(QVariant& pvaClsid, QVariant& pvarShow)
{
    void *_a[] = {0, (void*)&pvaClsid, (void*)&pvarShow};
    qt_metacall(QMetaObject::InvokeMetaMethod, 103, _a);
}

inline void InternetExplorer::ShowBrowserBar(QVariant& pvaClsid, QVariant& pvarShow, QVariant& pvarSize)
{
    void *_a[] = {0, (void*)&pvaClsid, (void*)&pvarShow, (void*)&pvarSize};
    qt_metacall(QMetaObject::InvokeMetaMethod, 104, _a);
}

inline void InternetExplorer::Stop()
{
    void *_a[] = {0};
    qt_metacall(QMetaObject::InvokeMetaMethod, 105, _a);
}


inline bool InternetExplorerMedium::AddressBar() const
{
    QVariant qax_result = property("AddressBar");
    Q_ASSERT(qax_result.isValid());
    return *(bool*)qax_result.constData();
}
inline void InternetExplorerMedium::SetAddressBar(bool value){ setProperty("AddressBar", QVariant(value)); }

inline IDispatch* InternetExplorerMedium::Application() const
{
    QVariant qax_result = property("Application");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
    return *(IDispatch**)qax_result.constData();
}

inline bool InternetExplorerMedium::Busy() const
{
    QVariant qax_result = property("Busy");
    Q_ASSERT(qax_result.isValid());
    return *(bool*)qax_result.constData();
}

inline IDispatch* InternetExplorerMedium::Container() const
{
    QVariant qax_result = property("Container");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
    return *(IDispatch**)qax_result.constData();
}

inline IDispatch* InternetExplorerMedium::Document() const
{
    QVariant qax_result = property("Document");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
    return *(IDispatch**)qax_result.constData();
}

inline QString InternetExplorerMedium::FullName() const
{
    QVariant qax_result = property("FullName");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}

inline bool InternetExplorerMedium::FullScreen() const
{
    QVariant qax_result = property("FullScreen");
    Q_ASSERT(qax_result.isValid());
    return *(bool*)qax_result.constData();
}
inline void InternetExplorerMedium::SetFullScreen(bool value){ setProperty("FullScreen", QVariant(value)); }

inline int InternetExplorerMedium::HWND() const
{
    QVariant qax_result = property("HWND");
    Q_ASSERT(qax_result.isValid());
    return *(int*)qax_result.constData();
}

inline int InternetExplorerMedium::Height() const
{
    QVariant qax_result = property("Height");
    Q_ASSERT(qax_result.isValid());
    return *(int*)qax_result.constData();
}
inline void InternetExplorerMedium::SetHeight(int value){ setProperty("Height", QVariant(value)); }

inline int InternetExplorerMedium::Left() const
{
    QVariant qax_result = property("Left");
    Q_ASSERT(qax_result.isValid());
    return *(int*)qax_result.constData();
}
inline void InternetExplorerMedium::SetLeft(int value){ setProperty("Left", QVariant(value)); }

inline QString InternetExplorerMedium::LocationName() const
{
    QVariant qax_result = property("LocationName");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}

inline QString InternetExplorerMedium::LocationURL() const
{
    QVariant qax_result = property("LocationURL");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}

inline bool InternetExplorerMedium::MenuBar() const
{
    QVariant qax_result = property("MenuBar");
    Q_ASSERT(qax_result.isValid());
    return *(bool*)qax_result.constData();
}
inline void InternetExplorerMedium::SetMenuBar(bool value){ setProperty("MenuBar", QVariant(value)); }

inline QString InternetExplorerMedium::Name() const
{
    QVariant qax_result = property("Name");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}

inline bool InternetExplorerMedium::Offline() const
{
    QVariant qax_result = property("Offline");
    Q_ASSERT(qax_result.isValid());
    return *(bool*)qax_result.constData();
}
inline void InternetExplorerMedium::SetOffline(bool value){ setProperty("Offline", QVariant(value)); }

inline IDispatch* InternetExplorerMedium::Parent() const
{
    QVariant qax_result = property("Parent");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
    return *(IDispatch**)qax_result.constData();
}

inline QString InternetExplorerMedium::Path() const
{
    QVariant qax_result = property("Path");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}

inline SHDocVw::tagREADYSTATE InternetExplorerMedium::ReadyState() const
{
    QVariant qax_result = property("ReadyState");
    Q_ASSERT(qax_result.isValid());
    return *(SHDocVw::tagREADYSTATE*)qax_result.constData();
}

inline bool InternetExplorerMedium::RegisterAsBrowser() const
{
    QVariant qax_result = property("RegisterAsBrowser");
    Q_ASSERT(qax_result.isValid());
    return *(bool*)qax_result.constData();
}
inline void InternetExplorerMedium::SetRegisterAsBrowser(bool value){ setProperty("RegisterAsBrowser", QVariant(value)); }

inline bool InternetExplorerMedium::RegisterAsDropTarget() const
{
    QVariant qax_result = property("RegisterAsDropTarget");
    Q_ASSERT(qax_result.isValid());
    return *(bool*)qax_result.constData();
}
inline void InternetExplorerMedium::SetRegisterAsDropTarget(bool value){ setProperty("RegisterAsDropTarget", QVariant(value)); }

inline bool InternetExplorerMedium::Resizable() const
{
    QVariant qax_result = property("Resizable");
    Q_ASSERT(qax_result.isValid());
    return *(bool*)qax_result.constData();
}
inline void InternetExplorerMedium::SetResizable(bool value){ setProperty("Resizable", QVariant(value)); }

inline bool InternetExplorerMedium::Silent() const
{
    QVariant qax_result = property("Silent");
    Q_ASSERT(qax_result.isValid());
    return *(bool*)qax_result.constData();
}
inline void InternetExplorerMedium::SetSilent(bool value){ setProperty("Silent", QVariant(value)); }

inline bool InternetExplorerMedium::StatusBar() const
{
    QVariant qax_result = property("StatusBar");
    Q_ASSERT(qax_result.isValid());
    return *(bool*)qax_result.constData();
}
inline void InternetExplorerMedium::SetStatusBar(bool value){ setProperty("StatusBar", QVariant(value)); }

inline QString InternetExplorerMedium::StatusText() const
{
    QVariant qax_result = property("StatusText");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}
inline void InternetExplorerMedium::SetStatusText(const QString& value){ setProperty("StatusText", QVariant(value)); }

inline bool InternetExplorerMedium::TheaterMode() const
{
    QVariant qax_result = property("TheaterMode");
    Q_ASSERT(qax_result.isValid());
    return *(bool*)qax_result.constData();
}
inline void InternetExplorerMedium::SetTheaterMode(bool value){ setProperty("TheaterMode", QVariant(value)); }

inline int InternetExplorerMedium::ToolBar() const
{
    QVariant qax_result = property("ToolBar");
    Q_ASSERT(qax_result.isValid());
    return *(int*)qax_result.constData();
}
inline void InternetExplorerMedium::SetToolBar(int value){ setProperty("ToolBar", QVariant(value)); }

inline int InternetExplorerMedium::Top() const
{
    QVariant qax_result = property("Top");
    Q_ASSERT(qax_result.isValid());
    return *(int*)qax_result.constData();
}
inline void InternetExplorerMedium::SetTop(int value){ setProperty("Top", QVariant(value)); }

inline bool InternetExplorerMedium::TopLevelContainer() const
{
    QVariant qax_result = property("TopLevelContainer");
    Q_ASSERT(qax_result.isValid());
    return *(bool*)qax_result.constData();
}

inline QString InternetExplorerMedium::Type() const
{
    QVariant qax_result = property("Type");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}

inline bool InternetExplorerMedium::Visible() const
{
    QVariant qax_result = property("Visible");
    Q_ASSERT(qax_result.isValid());
    return *(bool*)qax_result.constData();
}
inline void InternetExplorerMedium::SetVisible(bool value){ setProperty("Visible", QVariant(value)); }

inline int InternetExplorerMedium::Width() const
{
    QVariant qax_result = property("Width");
    Q_ASSERT(qax_result.isValid());
    return *(int*)qax_result.constData();
}
inline void InternetExplorerMedium::SetWidth(int value){ setProperty("Width", QVariant(value)); }

inline void InternetExplorerMedium::ClientToWindow(int& pcx, int& pcy)
{
    void *_a[] = {0, (void*)&pcx, (void*)&pcy};
    qt_metacall(QMetaObject::InvokeMetaMethod, 60, _a);
}

inline void InternetExplorerMedium::ExecWB(SHDocVw::OLECMDID cmdID, SHDocVw::OLECMDEXECOPT cmdexecopt)
{
    void *_a[] = {0, (void*)&cmdID, (void*)&cmdexecopt};
    qt_metacall(QMetaObject::InvokeMetaMethod, 61, _a);
}

inline void InternetExplorerMedium::ExecWB(SHDocVw::OLECMDID cmdID, SHDocVw::OLECMDEXECOPT cmdexecopt, QVariant& pvaIn)
{
    void *_a[] = {0, (void*)&cmdID, (void*)&cmdexecopt, (void*)&pvaIn};
    qt_metacall(QMetaObject::InvokeMetaMethod, 62, _a);
}

inline void InternetExplorerMedium::ExecWB(SHDocVw::OLECMDID cmdID, SHDocVw::OLECMDEXECOPT cmdexecopt, QVariant& pvaIn, QVariant& pvaOut)
{
    void *_a[] = {0, (void*)&cmdID, (void*)&cmdexecopt, (void*)&pvaIn, (void*)&pvaOut};
    qt_metacall(QMetaObject::InvokeMetaMethod, 63, _a);
}

inline QVariant InternetExplorerMedium::GetProperty(const QString& Property)
{
    QVariant qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&Property};
    qt_metacall(QMetaObject::InvokeMetaMethod, 64, _a);
    return qax_result;
}

inline void InternetExplorerMedium::GoBack()
{
    void *_a[] = {0};
    qt_metacall(QMetaObject::InvokeMetaMethod, 65, _a);
}

inline void InternetExplorerMedium::GoForward()
{
    void *_a[] = {0};
    qt_metacall(QMetaObject::InvokeMetaMethod, 66, _a);
}

inline void InternetExplorerMedium::GoHome()
{
    void *_a[] = {0};
    qt_metacall(QMetaObject::InvokeMetaMethod, 67, _a);
}

inline void InternetExplorerMedium::GoSearch()
{
    void *_a[] = {0};
    qt_metacall(QMetaObject::InvokeMetaMethod, 68, _a);
}

inline void InternetExplorerMedium::Navigate(const QString& URL)
{
    void *_a[] = {0, (void*)&URL};
    qt_metacall(QMetaObject::InvokeMetaMethod, 69, _a);
}

inline void InternetExplorerMedium::Navigate(const QString& URL, QVariant& Flags)
{
    void *_a[] = {0, (void*)&URL, (void*)&Flags};
    qt_metacall(QMetaObject::InvokeMetaMethod, 70, _a);
}

inline void InternetExplorerMedium::Navigate(const QString& URL, QVariant& Flags, QVariant& TargetFrameName)
{
    void *_a[] = {0, (void*)&URL, (void*)&Flags, (void*)&TargetFrameName};
    qt_metacall(QMetaObject::InvokeMetaMethod, 71, _a);
}

inline void InternetExplorerMedium::Navigate(const QString& URL, QVariant& Flags, QVariant& TargetFrameName, QVariant& PostData)
{
    void *_a[] = {0, (void*)&URL, (void*)&Flags, (void*)&TargetFrameName, (void*)&PostData};
    qt_metacall(QMetaObject::InvokeMetaMethod, 72, _a);
}

inline void InternetExplorerMedium::Navigate(const QString& URL, QVariant& Flags, QVariant& TargetFrameName, QVariant& PostData, QVariant& Headers)
{
    void *_a[] = {0, (void*)&URL, (void*)&Flags, (void*)&TargetFrameName, (void*)&PostData, (void*)&Headers};
    qt_metacall(QMetaObject::InvokeMetaMethod, 73, _a);
}

inline void InternetExplorerMedium::Navigate2(QVariant& URL)
{
    void *_a[] = {0, (void*)&URL};
    qt_metacall(QMetaObject::InvokeMetaMethod, 74, _a);
}

inline void InternetExplorerMedium::Navigate2(QVariant& URL, QVariant& Flags)
{
    void *_a[] = {0, (void*)&URL, (void*)&Flags};
    qt_metacall(QMetaObject::InvokeMetaMethod, 75, _a);
}

inline void InternetExplorerMedium::Navigate2(QVariant& URL, QVariant& Flags, QVariant& TargetFrameName)
{
    void *_a[] = {0, (void*)&URL, (void*)&Flags, (void*)&TargetFrameName};
    qt_metacall(QMetaObject::InvokeMetaMethod, 76, _a);
}

inline void InternetExplorerMedium::Navigate2(QVariant& URL, QVariant& Flags, QVariant& TargetFrameName, QVariant& PostData)
{
    void *_a[] = {0, (void*)&URL, (void*)&Flags, (void*)&TargetFrameName, (void*)&PostData};
    qt_metacall(QMetaObject::InvokeMetaMethod, 77, _a);
}

inline void InternetExplorerMedium::Navigate2(QVariant& URL, QVariant& Flags, QVariant& TargetFrameName, QVariant& PostData, QVariant& Headers)
{
    void *_a[] = {0, (void*)&URL, (void*)&Flags, (void*)&TargetFrameName, (void*)&PostData, (void*)&Headers};
    qt_metacall(QMetaObject::InvokeMetaMethod, 78, _a);
}

inline void InternetExplorerMedium::PutProperty(const QString& Property, const QVariant& vtValue)
{
    void *_a[] = {0, (void*)&Property, (void*)&vtValue};
    qt_metacall(QMetaObject::InvokeMetaMethod, 79, _a);
}

inline OLECMDF InternetExplorerMedium::QueryStatusWB(SHDocVw::OLECMDID cmdID)
{
    OLECMDF qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&cmdID};
    qt_metacall(QMetaObject::InvokeMetaMethod, 80, _a);
    return qax_result;
}

inline void InternetExplorerMedium::Quit()
{
    void *_a[] = {0};
    qt_metacall(QMetaObject::InvokeMetaMethod, 81, _a);
}

inline void InternetExplorerMedium::Refresh()
{
    void *_a[] = {0};
    qt_metacall(QMetaObject::InvokeMetaMethod, 82, _a);
}

inline void InternetExplorerMedium::Refresh2()
{
    void *_a[] = {0};
    qt_metacall(QMetaObject::InvokeMetaMethod, 83, _a);
}

inline void InternetExplorerMedium::Refresh2(QVariant& Level)
{
    void *_a[] = {0, (void*)&Level};
    qt_metacall(QMetaObject::InvokeMetaMethod, 84, _a);
}

inline void InternetExplorerMedium::ShowBrowserBar(QVariant& pvaClsid)
{
    void *_a[] = {0, (void*)&pvaClsid};
    qt_metacall(QMetaObject::InvokeMetaMethod, 102, _a);
}

inline void InternetExplorerMedium::ShowBrowserBar(QVariant& pvaClsid, QVariant& pvarShow)
{
    void *_a[] = {0, (void*)&pvaClsid, (void*)&pvarShow};
    qt_metacall(QMetaObject::InvokeMetaMethod, 103, _a);
}

inline void InternetExplorerMedium::ShowBrowserBar(QVariant& pvaClsid, QVariant& pvarShow, QVariant& pvarSize)
{
    void *_a[] = {0, (void*)&pvaClsid, (void*)&pvarShow, (void*)&pvarSize};
    qt_metacall(QMetaObject::InvokeMetaMethod, 104, _a);
}

inline void InternetExplorerMedium::Stop()
{
    void *_a[] = {0};
    qt_metacall(QMetaObject::InvokeMetaMethod, 105, _a);
}


inline bool ShellBrowserWindow::AddressBar() const
{
    QVariant qax_result = property("AddressBar");
    Q_ASSERT(qax_result.isValid());
    return *(bool*)qax_result.constData();
}
inline void ShellBrowserWindow::SetAddressBar(bool value){ setProperty("AddressBar", QVariant(value)); }

inline IDispatch* ShellBrowserWindow::Application() const
{
    QVariant qax_result = property("Application");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
    return *(IDispatch**)qax_result.constData();
}

inline bool ShellBrowserWindow::Busy() const
{
    QVariant qax_result = property("Busy");
    Q_ASSERT(qax_result.isValid());
    return *(bool*)qax_result.constData();
}

inline IDispatch* ShellBrowserWindow::Container() const
{
    QVariant qax_result = property("Container");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
    return *(IDispatch**)qax_result.constData();
}

inline IDispatch* ShellBrowserWindow::Document() const
{
    QVariant qax_result = property("Document");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
    return *(IDispatch**)qax_result.constData();
}

inline QString ShellBrowserWindow::FullName() const
{
    QVariant qax_result = property("FullName");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}

inline bool ShellBrowserWindow::FullScreen() const
{
    QVariant qax_result = property("FullScreen");
    Q_ASSERT(qax_result.isValid());
    return *(bool*)qax_result.constData();
}
inline void ShellBrowserWindow::SetFullScreen(bool value){ setProperty("FullScreen", QVariant(value)); }

inline int ShellBrowserWindow::HWND() const
{
    QVariant qax_result = property("HWND");
    Q_ASSERT(qax_result.isValid());
    return *(int*)qax_result.constData();
}

inline int ShellBrowserWindow::Height() const
{
    QVariant qax_result = property("Height");
    Q_ASSERT(qax_result.isValid());
    return *(int*)qax_result.constData();
}
inline void ShellBrowserWindow::SetHeight(int value){ setProperty("Height", QVariant(value)); }

inline int ShellBrowserWindow::Left() const
{
    QVariant qax_result = property("Left");
    Q_ASSERT(qax_result.isValid());
    return *(int*)qax_result.constData();
}
inline void ShellBrowserWindow::SetLeft(int value){ setProperty("Left", QVariant(value)); }

inline QString ShellBrowserWindow::LocationName() const
{
    QVariant qax_result = property("LocationName");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}

inline QString ShellBrowserWindow::LocationURL() const
{
    QVariant qax_result = property("LocationURL");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}

inline bool ShellBrowserWindow::MenuBar() const
{
    QVariant qax_result = property("MenuBar");
    Q_ASSERT(qax_result.isValid());
    return *(bool*)qax_result.constData();
}
inline void ShellBrowserWindow::SetMenuBar(bool value){ setProperty("MenuBar", QVariant(value)); }

inline QString ShellBrowserWindow::Name() const
{
    QVariant qax_result = property("Name");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}

inline bool ShellBrowserWindow::Offline() const
{
    QVariant qax_result = property("Offline");
    Q_ASSERT(qax_result.isValid());
    return *(bool*)qax_result.constData();
}
inline void ShellBrowserWindow::SetOffline(bool value){ setProperty("Offline", QVariant(value)); }

inline IDispatch* ShellBrowserWindow::Parent() const
{
    QVariant qax_result = property("Parent");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
    return *(IDispatch**)qax_result.constData();
}

inline QString ShellBrowserWindow::Path() const
{
    QVariant qax_result = property("Path");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}

inline SHDocVw::tagREADYSTATE ShellBrowserWindow::ReadyState() const
{
    QVariant qax_result = property("ReadyState");
    Q_ASSERT(qax_result.isValid());
    return *(SHDocVw::tagREADYSTATE*)qax_result.constData();
}

inline bool ShellBrowserWindow::RegisterAsBrowser() const
{
    QVariant qax_result = property("RegisterAsBrowser");
    Q_ASSERT(qax_result.isValid());
    return *(bool*)qax_result.constData();
}
inline void ShellBrowserWindow::SetRegisterAsBrowser(bool value){ setProperty("RegisterAsBrowser", QVariant(value)); }

inline bool ShellBrowserWindow::RegisterAsDropTarget() const
{
    QVariant qax_result = property("RegisterAsDropTarget");
    Q_ASSERT(qax_result.isValid());
    return *(bool*)qax_result.constData();
}
inline void ShellBrowserWindow::SetRegisterAsDropTarget(bool value){ setProperty("RegisterAsDropTarget", QVariant(value)); }

inline bool ShellBrowserWindow::Resizable() const
{
    QVariant qax_result = property("Resizable");
    Q_ASSERT(qax_result.isValid());
    return *(bool*)qax_result.constData();
}
inline void ShellBrowserWindow::SetResizable(bool value){ setProperty("Resizable", QVariant(value)); }

inline bool ShellBrowserWindow::Silent() const
{
    QVariant qax_result = property("Silent");
    Q_ASSERT(qax_result.isValid());
    return *(bool*)qax_result.constData();
}
inline void ShellBrowserWindow::SetSilent(bool value){ setProperty("Silent", QVariant(value)); }

inline bool ShellBrowserWindow::StatusBar() const
{
    QVariant qax_result = property("StatusBar");
    Q_ASSERT(qax_result.isValid());
    return *(bool*)qax_result.constData();
}
inline void ShellBrowserWindow::SetStatusBar(bool value){ setProperty("StatusBar", QVariant(value)); }

inline QString ShellBrowserWindow::StatusText() const
{
    QVariant qax_result = property("StatusText");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}
inline void ShellBrowserWindow::SetStatusText(const QString& value){ setProperty("StatusText", QVariant(value)); }

inline bool ShellBrowserWindow::TheaterMode() const
{
    QVariant qax_result = property("TheaterMode");
    Q_ASSERT(qax_result.isValid());
    return *(bool*)qax_result.constData();
}
inline void ShellBrowserWindow::SetTheaterMode(bool value){ setProperty("TheaterMode", QVariant(value)); }

inline int ShellBrowserWindow::ToolBar() const
{
    QVariant qax_result = property("ToolBar");
    Q_ASSERT(qax_result.isValid());
    return *(int*)qax_result.constData();
}
inline void ShellBrowserWindow::SetToolBar(int value){ setProperty("ToolBar", QVariant(value)); }

inline int ShellBrowserWindow::Top() const
{
    QVariant qax_result = property("Top");
    Q_ASSERT(qax_result.isValid());
    return *(int*)qax_result.constData();
}
inline void ShellBrowserWindow::SetTop(int value){ setProperty("Top", QVariant(value)); }

inline bool ShellBrowserWindow::TopLevelContainer() const
{
    QVariant qax_result = property("TopLevelContainer");
    Q_ASSERT(qax_result.isValid());
    return *(bool*)qax_result.constData();
}

inline QString ShellBrowserWindow::Type() const
{
    QVariant qax_result = property("Type");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}

inline bool ShellBrowserWindow::Visible() const
{
    QVariant qax_result = property("Visible");
    Q_ASSERT(qax_result.isValid());
    return *(bool*)qax_result.constData();
}
inline void ShellBrowserWindow::SetVisible(bool value){ setProperty("Visible", QVariant(value)); }

inline int ShellBrowserWindow::Width() const
{
    QVariant qax_result = property("Width");
    Q_ASSERT(qax_result.isValid());
    return *(int*)qax_result.constData();
}
inline void ShellBrowserWindow::SetWidth(int value){ setProperty("Width", QVariant(value)); }

inline void ShellBrowserWindow::ClientToWindow(int& pcx, int& pcy)
{
    void *_a[] = {0, (void*)&pcx, (void*)&pcy};
    qt_metacall(QMetaObject::InvokeMetaMethod, 60, _a);
}

inline void ShellBrowserWindow::ExecWB(SHDocVw::OLECMDID cmdID, SHDocVw::OLECMDEXECOPT cmdexecopt)
{
    void *_a[] = {0, (void*)&cmdID, (void*)&cmdexecopt};
    qt_metacall(QMetaObject::InvokeMetaMethod, 61, _a);
}

inline void ShellBrowserWindow::ExecWB(SHDocVw::OLECMDID cmdID, SHDocVw::OLECMDEXECOPT cmdexecopt, QVariant& pvaIn)
{
    void *_a[] = {0, (void*)&cmdID, (void*)&cmdexecopt, (void*)&pvaIn};
    qt_metacall(QMetaObject::InvokeMetaMethod, 62, _a);
}

inline void ShellBrowserWindow::ExecWB(SHDocVw::OLECMDID cmdID, SHDocVw::OLECMDEXECOPT cmdexecopt, QVariant& pvaIn, QVariant& pvaOut)
{
    void *_a[] = {0, (void*)&cmdID, (void*)&cmdexecopt, (void*)&pvaIn, (void*)&pvaOut};
    qt_metacall(QMetaObject::InvokeMetaMethod, 63, _a);
}

inline QVariant ShellBrowserWindow::GetProperty(const QString& Property)
{
    QVariant qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&Property};
    qt_metacall(QMetaObject::InvokeMetaMethod, 64, _a);
    return qax_result;
}

inline void ShellBrowserWindow::GoBack()
{
    void *_a[] = {0};
    qt_metacall(QMetaObject::InvokeMetaMethod, 65, _a);
}

inline void ShellBrowserWindow::GoForward()
{
    void *_a[] = {0};
    qt_metacall(QMetaObject::InvokeMetaMethod, 66, _a);
}

inline void ShellBrowserWindow::GoHome()
{
    void *_a[] = {0};
    qt_metacall(QMetaObject::InvokeMetaMethod, 67, _a);
}

inline void ShellBrowserWindow::GoSearch()
{
    void *_a[] = {0};
    qt_metacall(QMetaObject::InvokeMetaMethod, 68, _a);
}

inline void ShellBrowserWindow::Navigate(const QString& URL)
{
    void *_a[] = {0, (void*)&URL};
    qt_metacall(QMetaObject::InvokeMetaMethod, 69, _a);
}

inline void ShellBrowserWindow::Navigate(const QString& URL, QVariant& Flags)
{
    void *_a[] = {0, (void*)&URL, (void*)&Flags};
    qt_metacall(QMetaObject::InvokeMetaMethod, 70, _a);
}

inline void ShellBrowserWindow::Navigate(const QString& URL, QVariant& Flags, QVariant& TargetFrameName)
{
    void *_a[] = {0, (void*)&URL, (void*)&Flags, (void*)&TargetFrameName};
    qt_metacall(QMetaObject::InvokeMetaMethod, 71, _a);
}

inline void ShellBrowserWindow::Navigate(const QString& URL, QVariant& Flags, QVariant& TargetFrameName, QVariant& PostData)
{
    void *_a[] = {0, (void*)&URL, (void*)&Flags, (void*)&TargetFrameName, (void*)&PostData};
    qt_metacall(QMetaObject::InvokeMetaMethod, 72, _a);
}

inline void ShellBrowserWindow::Navigate(const QString& URL, QVariant& Flags, QVariant& TargetFrameName, QVariant& PostData, QVariant& Headers)
{
    void *_a[] = {0, (void*)&URL, (void*)&Flags, (void*)&TargetFrameName, (void*)&PostData, (void*)&Headers};
    qt_metacall(QMetaObject::InvokeMetaMethod, 73, _a);
}

inline void ShellBrowserWindow::Navigate2(QVariant& URL)
{
    void *_a[] = {0, (void*)&URL};
    qt_metacall(QMetaObject::InvokeMetaMethod, 74, _a);
}

inline void ShellBrowserWindow::Navigate2(QVariant& URL, QVariant& Flags)
{
    void *_a[] = {0, (void*)&URL, (void*)&Flags};
    qt_metacall(QMetaObject::InvokeMetaMethod, 75, _a);
}

inline void ShellBrowserWindow::Navigate2(QVariant& URL, QVariant& Flags, QVariant& TargetFrameName)
{
    void *_a[] = {0, (void*)&URL, (void*)&Flags, (void*)&TargetFrameName};
    qt_metacall(QMetaObject::InvokeMetaMethod, 76, _a);
}

inline void ShellBrowserWindow::Navigate2(QVariant& URL, QVariant& Flags, QVariant& TargetFrameName, QVariant& PostData)
{
    void *_a[] = {0, (void*)&URL, (void*)&Flags, (void*)&TargetFrameName, (void*)&PostData};
    qt_metacall(QMetaObject::InvokeMetaMethod, 77, _a);
}

inline void ShellBrowserWindow::Navigate2(QVariant& URL, QVariant& Flags, QVariant& TargetFrameName, QVariant& PostData, QVariant& Headers)
{
    void *_a[] = {0, (void*)&URL, (void*)&Flags, (void*)&TargetFrameName, (void*)&PostData, (void*)&Headers};
    qt_metacall(QMetaObject::InvokeMetaMethod, 78, _a);
}

inline void ShellBrowserWindow::PutProperty(const QString& Property, const QVariant& vtValue)
{
    void *_a[] = {0, (void*)&Property, (void*)&vtValue};
    qt_metacall(QMetaObject::InvokeMetaMethod, 79, _a);
}

inline OLECMDF ShellBrowserWindow::QueryStatusWB(SHDocVw::OLECMDID cmdID)
{
    OLECMDF qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&cmdID};
    qt_metacall(QMetaObject::InvokeMetaMethod, 80, _a);
    return qax_result;
}

inline void ShellBrowserWindow::Quit()
{
    void *_a[] = {0};
    qt_metacall(QMetaObject::InvokeMetaMethod, 81, _a);
}

inline void ShellBrowserWindow::Refresh()
{
    void *_a[] = {0};
    qt_metacall(QMetaObject::InvokeMetaMethod, 82, _a);
}

inline void ShellBrowserWindow::Refresh2()
{
    void *_a[] = {0};
    qt_metacall(QMetaObject::InvokeMetaMethod, 83, _a);
}

inline void ShellBrowserWindow::Refresh2(QVariant& Level)
{
    void *_a[] = {0, (void*)&Level};
    qt_metacall(QMetaObject::InvokeMetaMethod, 84, _a);
}

inline void ShellBrowserWindow::ShowBrowserBar(QVariant& pvaClsid)
{
    void *_a[] = {0, (void*)&pvaClsid};
    qt_metacall(QMetaObject::InvokeMetaMethod, 102, _a);
}

inline void ShellBrowserWindow::ShowBrowserBar(QVariant& pvaClsid, QVariant& pvarShow)
{
    void *_a[] = {0, (void*)&pvaClsid, (void*)&pvarShow};
    qt_metacall(QMetaObject::InvokeMetaMethod, 103, _a);
}

inline void ShellBrowserWindow::ShowBrowserBar(QVariant& pvaClsid, QVariant& pvarShow, QVariant& pvarSize)
{
    void *_a[] = {0, (void*)&pvaClsid, (void*)&pvarShow, (void*)&pvarSize};
    qt_metacall(QMetaObject::InvokeMetaMethod, 104, _a);
}

inline void ShellBrowserWindow::Stop()
{
    void *_a[] = {0};
    qt_metacall(QMetaObject::InvokeMetaMethod, 105, _a);
}


inline int IShellWindows::Count() const
{
    QVariant qax_result = property("Count");
    Q_ASSERT(qax_result.isValid());
    return *(int*)qax_result.constData();
}

inline IDispatch* IShellWindows::FindWindowSW(QVariant& pvarloc, QVariant& pvarlocRoot, int swClass, int& pHWND, int swfwOptions)
{
    IDispatch* qax_result = 0;
    void *_a[] = {(void*)&qax_result, (void*)&pvarloc, (void*)&pvarlocRoot, (void*)&swClass, (void*)&pHWND, (void*)&swfwOptions};
    qt_metacall(QMetaObject::InvokeMetaMethod, 8, _a);
    return qax_result;
}

inline IDispatch* IShellWindows::Item()
{
    IDispatch* qax_result = 0;
    void *_a[] = {(void*)&qax_result};
    qt_metacall(QMetaObject::InvokeMetaMethod, 9, _a);
    return qax_result;
}

inline IDispatch* IShellWindows::Item(const QVariant& index)
{
    IDispatch* qax_result = 0;
    void *_a[] = {(void*)&qax_result, (void*)&index};
    qt_metacall(QMetaObject::InvokeMetaMethod, 10, _a);
    return qax_result;
}

inline void IShellWindows::OnActivated(int lCookie, bool fActive)
{
    void *_a[] = {0, (void*)&lCookie, (void*)&fActive};
    qt_metacall(QMetaObject::InvokeMetaMethod, 11, _a);
}

inline void IShellWindows::OnCreated(int lCookie, IUnknown* punk)
{
    void *_a[] = {0, (void*)&lCookie, (void*)&punk};
    qt_metacall(QMetaObject::InvokeMetaMethod, 12, _a);
}

inline void IShellWindows::OnNavigate(int lCookie, QVariant& pvarloc)
{
    void *_a[] = {0, (void*)&lCookie, (void*)&pvarloc};
    qt_metacall(QMetaObject::InvokeMetaMethod, 13, _a);
}

inline void IShellWindows::ProcessAttachDetach(bool fAttach)
{
    void *_a[] = {0, (void*)&fAttach};
    qt_metacall(QMetaObject::InvokeMetaMethod, 14, _a);
}

inline void IShellWindows::Register(IDispatch* pid, int HWND, int swClass, int& plCookie)
{
    void *_a[] = {0, (void*)&pid, (void*)&HWND, (void*)&swClass, (void*)&plCookie};
    qt_metacall(QMetaObject::InvokeMetaMethod, 15, _a);
}

inline void IShellWindows::RegisterPending(int lThreadId, QVariant& pvarloc, QVariant& pvarlocRoot, int swClass, int& plCookie)
{
    void *_a[] = {0, (void*)&lThreadId, (void*)&pvarloc, (void*)&pvarlocRoot, (void*)&swClass, (void*)&plCookie};
    qt_metacall(QMetaObject::InvokeMetaMethod, 16, _a);
}

inline void IShellWindows::Revoke(int lCookie)
{
    void *_a[] = {0, (void*)&lCookie};
    qt_metacall(QMetaObject::InvokeMetaMethod, 17, _a);
}

inline IUnknown* IShellWindows::_NewEnum()
{
    IUnknown* qax_result = 0;
    void *_a[] = {(void*)&qax_result};
    qt_metacall(QMetaObject::InvokeMetaMethod, 18, _a);
    return qax_result;
}


inline int ShellWindows::Count() const
{
    QVariant qax_result = property("Count");
    Q_ASSERT(qax_result.isValid());
    return *(int*)qax_result.constData();
}

inline IDispatch* ShellWindows::FindWindowSW(QVariant& pvarloc, QVariant& pvarlocRoot, int swClass, int& pHWND, int swfwOptions)
{
    IDispatch* qax_result = 0;
    void *_a[] = {(void*)&qax_result, (void*)&pvarloc, (void*)&pvarlocRoot, (void*)&swClass, (void*)&pHWND, (void*)&swfwOptions};
    qt_metacall(QMetaObject::InvokeMetaMethod, 10, _a);
    return qax_result;
}

inline IDispatch* ShellWindows::Item()
{
    IDispatch* qax_result = 0;
    void *_a[] = {(void*)&qax_result};
    qt_metacall(QMetaObject::InvokeMetaMethod, 11, _a);
    return qax_result;
}

inline IDispatch* ShellWindows::Item(const QVariant& index)
{
    IDispatch* qax_result = 0;
    void *_a[] = {(void*)&qax_result, (void*)&index};
    qt_metacall(QMetaObject::InvokeMetaMethod, 12, _a);
    return qax_result;
}

inline void ShellWindows::OnActivated(int lCookie, bool fActive)
{
    void *_a[] = {0, (void*)&lCookie, (void*)&fActive};
    qt_metacall(QMetaObject::InvokeMetaMethod, 13, _a);
}

inline void ShellWindows::OnCreated(int lCookie, IUnknown* punk)
{
    void *_a[] = {0, (void*)&lCookie, (void*)&punk};
    qt_metacall(QMetaObject::InvokeMetaMethod, 14, _a);
}

inline void ShellWindows::OnNavigate(int lCookie, QVariant& pvarloc)
{
    void *_a[] = {0, (void*)&lCookie, (void*)&pvarloc};
    qt_metacall(QMetaObject::InvokeMetaMethod, 15, _a);
}

inline void ShellWindows::ProcessAttachDetach(bool fAttach)
{
    void *_a[] = {0, (void*)&fAttach};
    qt_metacall(QMetaObject::InvokeMetaMethod, 16, _a);
}

inline void ShellWindows::Register(IDispatch* pid, int HWND, int swClass, int& plCookie)
{
    void *_a[] = {0, (void*)&pid, (void*)&HWND, (void*)&swClass, (void*)&plCookie};
    qt_metacall(QMetaObject::InvokeMetaMethod, 17, _a);
}

inline void ShellWindows::RegisterPending(int lThreadId, QVariant& pvarloc, QVariant& pvarlocRoot, int swClass, int& plCookie)
{
    void *_a[] = {0, (void*)&lThreadId, (void*)&pvarloc, (void*)&pvarlocRoot, (void*)&swClass, (void*)&plCookie};
    qt_metacall(QMetaObject::InvokeMetaMethod, 18, _a);
}

inline void ShellWindows::Revoke(int lCookie)
{
    void *_a[] = {0, (void*)&lCookie};
    qt_metacall(QMetaObject::InvokeMetaMethod, 19, _a);
}

inline IUnknown* ShellWindows::_NewEnum()
{
    IUnknown* qax_result = 0;
    void *_a[] = {(void*)&qax_result};
    qt_metacall(QMetaObject::InvokeMetaMethod, 20, _a);
    return qax_result;
}


inline void IShellUIHelper::AddChannel(const QString& URL)
{
    void *_a[] = {0, (void*)&URL};
    qt_metacall(QMetaObject::InvokeMetaMethod, 8, _a);
}

inline void IShellUIHelper::AddDesktopComponent(const QString& URL, const QString& Type)
{
    void *_a[] = {0, (void*)&URL, (void*)&Type};
    qt_metacall(QMetaObject::InvokeMetaMethod, 9, _a);
}

inline void IShellUIHelper::AddDesktopComponent(const QString& URL, const QString& Type, QVariant& Left)
{
    void *_a[] = {0, (void*)&URL, (void*)&Type, (void*)&Left};
    qt_metacall(QMetaObject::InvokeMetaMethod, 10, _a);
}

inline void IShellUIHelper::AddDesktopComponent(const QString& URL, const QString& Type, QVariant& Left, QVariant& Top)
{
    void *_a[] = {0, (void*)&URL, (void*)&Type, (void*)&Left, (void*)&Top};
    qt_metacall(QMetaObject::InvokeMetaMethod, 11, _a);
}

inline void IShellUIHelper::AddDesktopComponent(const QString& URL, const QString& Type, QVariant& Left, QVariant& Top, QVariant& Width)
{
    void *_a[] = {0, (void*)&URL, (void*)&Type, (void*)&Left, (void*)&Top, (void*)&Width};
    qt_metacall(QMetaObject::InvokeMetaMethod, 12, _a);
}

inline void IShellUIHelper::AddDesktopComponent(const QString& URL, const QString& Type, QVariant& Left, QVariant& Top, QVariant& Width, QVariant& Height)
{
    void *_a[] = {0, (void*)&URL, (void*)&Type, (void*)&Left, (void*)&Top, (void*)&Width, (void*)&Height};
    qt_metacall(QMetaObject::InvokeMetaMethod, 13, _a);
}

inline void IShellUIHelper::AddFavorite(const QString& URL)
{
    void *_a[] = {0, (void*)&URL};
    qt_metacall(QMetaObject::InvokeMetaMethod, 14, _a);
}

inline void IShellUIHelper::AddFavorite(const QString& URL, QVariant& Title)
{
    void *_a[] = {0, (void*)&URL, (void*)&Title};
    qt_metacall(QMetaObject::InvokeMetaMethod, 15, _a);
}

inline void IShellUIHelper::AutoCompleteAttach()
{
    void *_a[] = {0};
    qt_metacall(QMetaObject::InvokeMetaMethod, 16, _a);
}

inline void IShellUIHelper::AutoCompleteAttach(QVariant& Reserved)
{
    void *_a[] = {0, (void*)&Reserved};
    qt_metacall(QMetaObject::InvokeMetaMethod, 17, _a);
}

inline void IShellUIHelper::AutoCompleteSaveForm()
{
    void *_a[] = {0};
    qt_metacall(QMetaObject::InvokeMetaMethod, 18, _a);
}

inline void IShellUIHelper::AutoCompleteSaveForm(QVariant& Form)
{
    void *_a[] = {0, (void*)&Form};
    qt_metacall(QMetaObject::InvokeMetaMethod, 19, _a);
}

inline void IShellUIHelper::AutoScan(const QString& strSearch, const QString& strFailureUrl)
{
    void *_a[] = {0, (void*)&strSearch, (void*)&strFailureUrl};
    qt_metacall(QMetaObject::InvokeMetaMethod, 20, _a);
}

inline void IShellUIHelper::AutoScan(const QString& strSearch, const QString& strFailureUrl, QVariant& pvarTargetFrame)
{
    void *_a[] = {0, (void*)&strSearch, (void*)&strFailureUrl, (void*)&pvarTargetFrame};
    qt_metacall(QMetaObject::InvokeMetaMethod, 21, _a);
}

inline void IShellUIHelper::ImportExportFavorites(bool fImport, const QString& strImpExpPath)
{
    void *_a[] = {0, (void*)&fImport, (void*)&strImpExpPath};
    qt_metacall(QMetaObject::InvokeMetaMethod, 22, _a);
}

inline bool IShellUIHelper::IsSubscribed(const QString& URL)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&URL};
    qt_metacall(QMetaObject::InvokeMetaMethod, 23, _a);
    return qax_result;
}

inline void IShellUIHelper::NavigateAndFind(const QString& URL, const QString& strQuery, QVariant& varTargetFrame)
{
    void *_a[] = {0, (void*)&URL, (void*)&strQuery, (void*)&varTargetFrame};
    qt_metacall(QMetaObject::InvokeMetaMethod, 24, _a);
}

inline void IShellUIHelper::RefreshOfflineDesktop()
{
    void *_a[] = {0};
    qt_metacall(QMetaObject::InvokeMetaMethod, 25, _a);
}

inline void IShellUIHelper::ResetFirstBootMode()
{
    void *_a[] = {0};
    qt_metacall(QMetaObject::InvokeMetaMethod, 26, _a);
}

inline void IShellUIHelper::ResetSafeMode()
{
    void *_a[] = {0};
    qt_metacall(QMetaObject::InvokeMetaMethod, 27, _a);
}

inline QVariant IShellUIHelper::ShowBrowserUI(const QString& bstrName, QVariant& pvarIn)
{
    QVariant qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&bstrName, (void*)&pvarIn};
    qt_metacall(QMetaObject::InvokeMetaMethod, 28, _a);
    return qax_result;
}


inline void IShellUIHelper2::AddChannel(const QString& URL)
{
    void *_a[] = {0, (void*)&URL};
    qt_metacall(QMetaObject::InvokeMetaMethod, 8, _a);
}

inline void IShellUIHelper2::AddDesktopComponent(const QString& URL, const QString& Type)
{
    void *_a[] = {0, (void*)&URL, (void*)&Type};
    qt_metacall(QMetaObject::InvokeMetaMethod, 9, _a);
}

inline void IShellUIHelper2::AddDesktopComponent(const QString& URL, const QString& Type, QVariant& Left)
{
    void *_a[] = {0, (void*)&URL, (void*)&Type, (void*)&Left};
    qt_metacall(QMetaObject::InvokeMetaMethod, 10, _a);
}

inline void IShellUIHelper2::AddDesktopComponent(const QString& URL, const QString& Type, QVariant& Left, QVariant& Top)
{
    void *_a[] = {0, (void*)&URL, (void*)&Type, (void*)&Left, (void*)&Top};
    qt_metacall(QMetaObject::InvokeMetaMethod, 11, _a);
}

inline void IShellUIHelper2::AddDesktopComponent(const QString& URL, const QString& Type, QVariant& Left, QVariant& Top, QVariant& Width)
{
    void *_a[] = {0, (void*)&URL, (void*)&Type, (void*)&Left, (void*)&Top, (void*)&Width};
    qt_metacall(QMetaObject::InvokeMetaMethod, 12, _a);
}

inline void IShellUIHelper2::AddDesktopComponent(const QString& URL, const QString& Type, QVariant& Left, QVariant& Top, QVariant& Width, QVariant& Height)
{
    void *_a[] = {0, (void*)&URL, (void*)&Type, (void*)&Left, (void*)&Top, (void*)&Width, (void*)&Height};
    qt_metacall(QMetaObject::InvokeMetaMethod, 13, _a);
}

inline void IShellUIHelper2::AddFavorite(const QString& URL)
{
    void *_a[] = {0, (void*)&URL};
    qt_metacall(QMetaObject::InvokeMetaMethod, 14, _a);
}

inline void IShellUIHelper2::AddFavorite(const QString& URL, QVariant& Title)
{
    void *_a[] = {0, (void*)&URL, (void*)&Title};
    qt_metacall(QMetaObject::InvokeMetaMethod, 15, _a);
}

inline void IShellUIHelper2::AddSearchProvider(const QString& URL)
{
    void *_a[] = {0, (void*)&URL};
    qt_metacall(QMetaObject::InvokeMetaMethod, 16, _a);
}

inline void IShellUIHelper2::AutoCompleteAttach()
{
    void *_a[] = {0};
    qt_metacall(QMetaObject::InvokeMetaMethod, 17, _a);
}

inline void IShellUIHelper2::AutoCompleteAttach(QVariant& Reserved)
{
    void *_a[] = {0, (void*)&Reserved};
    qt_metacall(QMetaObject::InvokeMetaMethod, 18, _a);
}

inline void IShellUIHelper2::AutoCompleteSaveForm()
{
    void *_a[] = {0};
    qt_metacall(QMetaObject::InvokeMetaMethod, 19, _a);
}

inline void IShellUIHelper2::AutoCompleteSaveForm(QVariant& Form)
{
    void *_a[] = {0, (void*)&Form};
    qt_metacall(QMetaObject::InvokeMetaMethod, 20, _a);
}

inline void IShellUIHelper2::AutoScan(const QString& strSearch, const QString& strFailureUrl)
{
    void *_a[] = {0, (void*)&strSearch, (void*)&strFailureUrl};
    qt_metacall(QMetaObject::InvokeMetaMethod, 21, _a);
}

inline void IShellUIHelper2::AutoScan(const QString& strSearch, const QString& strFailureUrl, QVariant& pvarTargetFrame)
{
    void *_a[] = {0, (void*)&strSearch, (void*)&strFailureUrl, (void*)&pvarTargetFrame};
    qt_metacall(QMetaObject::InvokeMetaMethod, 22, _a);
}

inline QString IShellUIHelper2::BrandImageUri()
{
    QString qax_result;
    void *_a[] = {(void*)&qax_result};
    qt_metacall(QMetaObject::InvokeMetaMethod, 23, _a);
    return qax_result;
}

inline void IShellUIHelper2::CustomizeClearType(bool fSet)
{
    void *_a[] = {0, (void*)&fSet};
    qt_metacall(QMetaObject::InvokeMetaMethod, 24, _a);
}

inline void IShellUIHelper2::CustomizeSettings(bool fSQM, bool fPhishing, const QString& bstrLocale)
{
    void *_a[] = {0, (void*)&fSQM, (void*)&fPhishing, (void*)&bstrLocale};
    qt_metacall(QMetaObject::InvokeMetaMethod, 25, _a);
}

inline QString IShellUIHelper2::DefaultSearchProvider()
{
    QString qax_result;
    void *_a[] = {(void*)&qax_result};
    qt_metacall(QMetaObject::InvokeMetaMethod, 26, _a);
    return qax_result;
}

inline void IShellUIHelper2::DiagnoseConnection()
{
    void *_a[] = {0};
    qt_metacall(QMetaObject::InvokeMetaMethod, 27, _a);
}

inline void IShellUIHelper2::ImportExportFavorites(bool fImport, const QString& strImpExpPath)
{
    void *_a[] = {0, (void*)&fImport, (void*)&strImpExpPath};
    qt_metacall(QMetaObject::InvokeMetaMethod, 28, _a);
}

inline bool IShellUIHelper2::IsSearchMigrated()
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result};
    qt_metacall(QMetaObject::InvokeMetaMethod, 29, _a);
    return qax_result;
}

inline uint IShellUIHelper2::IsSearchProviderInstalled(const QString& URL)
{
    uint qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&URL};
    qt_metacall(QMetaObject::InvokeMetaMethod, 30, _a);
    return qax_result;
}

inline bool IShellUIHelper2::IsSubscribed(const QString& URL)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&URL};
    qt_metacall(QMetaObject::InvokeMetaMethod, 31, _a);
    return qax_result;
}

inline void IShellUIHelper2::NavigateAndFind(const QString& URL, const QString& strQuery, QVariant& varTargetFrame)
{
    void *_a[] = {0, (void*)&URL, (void*)&strQuery, (void*)&varTargetFrame};
    qt_metacall(QMetaObject::InvokeMetaMethod, 32, _a);
}

inline bool IShellUIHelper2::PhishingEnabled()
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result};
    qt_metacall(QMetaObject::InvokeMetaMethod, 33, _a);
    return qax_result;
}

inline void IShellUIHelper2::RefreshOfflineDesktop()
{
    void *_a[] = {0};
    qt_metacall(QMetaObject::InvokeMetaMethod, 34, _a);
}

inline void IShellUIHelper2::ResetFirstBootMode()
{
    void *_a[] = {0};
    qt_metacall(QMetaObject::InvokeMetaMethod, 35, _a);
}

inline void IShellUIHelper2::ResetSafeMode()
{
    void *_a[] = {0};
    qt_metacall(QMetaObject::InvokeMetaMethod, 36, _a);
}

inline bool IShellUIHelper2::RunOnceHasShown()
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result};
    qt_metacall(QMetaObject::InvokeMetaMethod, 37, _a);
    return qax_result;
}

inline void IShellUIHelper2::RunOnceRequiredSettingsComplete(bool fComplete)
{
    void *_a[] = {0, (void*)&fComplete};
    qt_metacall(QMetaObject::InvokeMetaMethod, 38, _a);
}

inline void IShellUIHelper2::RunOnceShown()
{
    void *_a[] = {0};
    qt_metacall(QMetaObject::InvokeMetaMethod, 39, _a);
}

inline QString IShellUIHelper2::SearchGuideUrl()
{
    QString qax_result;
    void *_a[] = {(void*)&qax_result};
    qt_metacall(QMetaObject::InvokeMetaMethod, 40, _a);
    return qax_result;
}

inline QVariant IShellUIHelper2::ShowBrowserUI(const QString& bstrName, QVariant& pvarIn)
{
    QVariant qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&bstrName, (void*)&pvarIn};
    qt_metacall(QMetaObject::InvokeMetaMethod, 41, _a);
    return qax_result;
}

inline void IShellUIHelper2::SkipRunOnce()
{
    void *_a[] = {0};
    qt_metacall(QMetaObject::InvokeMetaMethod, 42, _a);
}

inline void IShellUIHelper2::SkipTabsWelcome()
{
    void *_a[] = {0};
    qt_metacall(QMetaObject::InvokeMetaMethod, 43, _a);
}

inline bool IShellUIHelper2::SqmEnabled()
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result};
    qt_metacall(QMetaObject::InvokeMetaMethod, 44, _a);
    return qax_result;
}


inline void IShellUIHelper3::AddChannel(const QString& URL)
{
    void *_a[] = {0, (void*)&URL};
    qt_metacall(QMetaObject::InvokeMetaMethod, 8, _a);
}

inline void IShellUIHelper3::AddDesktopComponent(const QString& URL, const QString& Type)
{
    void *_a[] = {0, (void*)&URL, (void*)&Type};
    qt_metacall(QMetaObject::InvokeMetaMethod, 9, _a);
}

inline void IShellUIHelper3::AddDesktopComponent(const QString& URL, const QString& Type, QVariant& Left)
{
    void *_a[] = {0, (void*)&URL, (void*)&Type, (void*)&Left};
    qt_metacall(QMetaObject::InvokeMetaMethod, 10, _a);
}

inline void IShellUIHelper3::AddDesktopComponent(const QString& URL, const QString& Type, QVariant& Left, QVariant& Top)
{
    void *_a[] = {0, (void*)&URL, (void*)&Type, (void*)&Left, (void*)&Top};
    qt_metacall(QMetaObject::InvokeMetaMethod, 11, _a);
}

inline void IShellUIHelper3::AddDesktopComponent(const QString& URL, const QString& Type, QVariant& Left, QVariant& Top, QVariant& Width)
{
    void *_a[] = {0, (void*)&URL, (void*)&Type, (void*)&Left, (void*)&Top, (void*)&Width};
    qt_metacall(QMetaObject::InvokeMetaMethod, 12, _a);
}

inline void IShellUIHelper3::AddDesktopComponent(const QString& URL, const QString& Type, QVariant& Left, QVariant& Top, QVariant& Width, QVariant& Height)
{
    void *_a[] = {0, (void*)&URL, (void*)&Type, (void*)&Left, (void*)&Top, (void*)&Width, (void*)&Height};
    qt_metacall(QMetaObject::InvokeMetaMethod, 13, _a);
}

inline void IShellUIHelper3::AddFavorite(const QString& URL)
{
    void *_a[] = {0, (void*)&URL};
    qt_metacall(QMetaObject::InvokeMetaMethod, 14, _a);
}

inline void IShellUIHelper3::AddFavorite(const QString& URL, QVariant& Title)
{
    void *_a[] = {0, (void*)&URL, (void*)&Title};
    qt_metacall(QMetaObject::InvokeMetaMethod, 15, _a);
}

inline void IShellUIHelper3::AddSearchProvider(const QString& URL)
{
    void *_a[] = {0, (void*)&URL};
    qt_metacall(QMetaObject::InvokeMetaMethod, 16, _a);
}

inline void IShellUIHelper3::AddService(const QString& URL)
{
    void *_a[] = {0, (void*)&URL};
    qt_metacall(QMetaObject::InvokeMetaMethod, 17, _a);
}

inline void IShellUIHelper3::AddToFavoritesBar(const QString& URL, const QString& Title)
{
    void *_a[] = {0, (void*)&URL, (void*)&Title};
    qt_metacall(QMetaObject::InvokeMetaMethod, 18, _a);
}

inline void IShellUIHelper3::AddToFavoritesBar(const QString& URL, const QString& Title, QVariant& Type)
{
    void *_a[] = {0, (void*)&URL, (void*)&Title, (void*)&Type};
    qt_metacall(QMetaObject::InvokeMetaMethod, 19, _a);
}

inline void IShellUIHelper3::AutoCompleteAttach()
{
    void *_a[] = {0};
    qt_metacall(QMetaObject::InvokeMetaMethod, 20, _a);
}

inline void IShellUIHelper3::AutoCompleteAttach(QVariant& Reserved)
{
    void *_a[] = {0, (void*)&Reserved};
    qt_metacall(QMetaObject::InvokeMetaMethod, 21, _a);
}

inline void IShellUIHelper3::AutoCompleteSaveForm()
{
    void *_a[] = {0};
    qt_metacall(QMetaObject::InvokeMetaMethod, 22, _a);
}

inline void IShellUIHelper3::AutoCompleteSaveForm(QVariant& Form)
{
    void *_a[] = {0, (void*)&Form};
    qt_metacall(QMetaObject::InvokeMetaMethod, 23, _a);
}

inline void IShellUIHelper3::AutoScan(const QString& strSearch, const QString& strFailureUrl)
{
    void *_a[] = {0, (void*)&strSearch, (void*)&strFailureUrl};
    qt_metacall(QMetaObject::InvokeMetaMethod, 24, _a);
}

inline void IShellUIHelper3::AutoScan(const QString& strSearch, const QString& strFailureUrl, QVariant& pvarTargetFrame)
{
    void *_a[] = {0, (void*)&strSearch, (void*)&strFailureUrl, (void*)&pvarTargetFrame};
    qt_metacall(QMetaObject::InvokeMetaMethod, 25, _a);
}

inline QString IShellUIHelper3::BrandImageUri()
{
    QString qax_result;
    void *_a[] = {(void*)&qax_result};
    qt_metacall(QMetaObject::InvokeMetaMethod, 26, _a);
    return qax_result;
}

inline void IShellUIHelper3::BuildNewTabPage()
{
    void *_a[] = {0};
    qt_metacall(QMetaObject::InvokeMetaMethod, 27, _a);
}

inline void IShellUIHelper3::ContentDiscoveryReset()
{
    void *_a[] = {0};
    qt_metacall(QMetaObject::InvokeMetaMethod, 28, _a);
}

inline void IShellUIHelper3::CustomizeClearType(bool fSet)
{
    void *_a[] = {0, (void*)&fSet};
    qt_metacall(QMetaObject::InvokeMetaMethod, 29, _a);
}

inline void IShellUIHelper3::CustomizeSettings(bool fSQM, bool fPhishing, const QString& bstrLocale)
{
    void *_a[] = {0, (void*)&fSQM, (void*)&fPhishing, (void*)&bstrLocale};
    qt_metacall(QMetaObject::InvokeMetaMethod, 30, _a);
}

inline QString IShellUIHelper3::DefaultSearchProvider()
{
    QString qax_result;
    void *_a[] = {(void*)&qax_result};
    qt_metacall(QMetaObject::InvokeMetaMethod, 31, _a);
    return qax_result;
}

inline void IShellUIHelper3::DiagnoseConnection()
{
    void *_a[] = {0};
    qt_metacall(QMetaObject::InvokeMetaMethod, 32, _a);
}

inline void IShellUIHelper3::EnableSuggestedSites(bool fEnable)
{
    void *_a[] = {0, (void*)&fEnable};
    qt_metacall(QMetaObject::InvokeMetaMethod, 33, _a);
}

inline void IShellUIHelper3::ImportExportFavorites(bool fImport, const QString& strImpExpPath)
{
    void *_a[] = {0, (void*)&fImport, (void*)&strImpExpPath};
    qt_metacall(QMetaObject::InvokeMetaMethod, 34, _a);
}

inline bool IShellUIHelper3::InPrivateFilteringEnabled()
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result};
    qt_metacall(QMetaObject::InvokeMetaMethod, 35, _a);
    return qax_result;
}

inline bool IShellUIHelper3::IsSearchMigrated()
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result};
    qt_metacall(QMetaObject::InvokeMetaMethod, 36, _a);
    return qax_result;
}

inline uint IShellUIHelper3::IsSearchProviderInstalled(const QString& URL)
{
    uint qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&URL};
    qt_metacall(QMetaObject::InvokeMetaMethod, 37, _a);
    return qax_result;
}

inline uint IShellUIHelper3::IsServiceInstalled(const QString& URL, const QString& Verb)
{
    uint qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&URL, (void*)&Verb};
    qt_metacall(QMetaObject::InvokeMetaMethod, 38, _a);
    return qax_result;
}

inline bool IShellUIHelper3::IsSubscribed(const QString& URL)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&URL};
    qt_metacall(QMetaObject::InvokeMetaMethod, 39, _a);
    return qax_result;
}

inline bool IShellUIHelper3::IsSuggestedSitesEnabled()
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result};
    qt_metacall(QMetaObject::InvokeMetaMethod, 40, _a);
    return qax_result;
}

inline void IShellUIHelper3::NavigateAndFind(const QString& URL, const QString& strQuery, QVariant& varTargetFrame)
{
    void *_a[] = {0, (void*)&URL, (void*)&strQuery, (void*)&varTargetFrame};
    qt_metacall(QMetaObject::InvokeMetaMethod, 41, _a);
}

inline void IShellUIHelper3::NavigateToSuggestedSites(const QString& bstrRelativeUrl)
{
    void *_a[] = {0, (void*)&bstrRelativeUrl};
    qt_metacall(QMetaObject::InvokeMetaMethod, 42, _a);
}

inline bool IShellUIHelper3::PhishingEnabled()
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result};
    qt_metacall(QMetaObject::InvokeMetaMethod, 43, _a);
    return qax_result;
}

inline void IShellUIHelper3::RefreshOfflineDesktop()
{
    void *_a[] = {0};
    qt_metacall(QMetaObject::InvokeMetaMethod, 44, _a);
}

inline void IShellUIHelper3::ResetFirstBootMode()
{
    void *_a[] = {0};
    qt_metacall(QMetaObject::InvokeMetaMethod, 45, _a);
}

inline void IShellUIHelper3::ResetSafeMode()
{
    void *_a[] = {0};
    qt_metacall(QMetaObject::InvokeMetaMethod, 46, _a);
}

inline bool IShellUIHelper3::RunOnceHasShown()
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result};
    qt_metacall(QMetaObject::InvokeMetaMethod, 47, _a);
    return qax_result;
}

inline void IShellUIHelper3::RunOnceRequiredSettingsComplete(bool fComplete)
{
    void *_a[] = {0, (void*)&fComplete};
    qt_metacall(QMetaObject::InvokeMetaMethod, 48, _a);
}

inline void IShellUIHelper3::RunOnceShown()
{
    void *_a[] = {0};
    qt_metacall(QMetaObject::InvokeMetaMethod, 49, _a);
}

inline QString IShellUIHelper3::SearchGuideUrl()
{
    QString qax_result;
    void *_a[] = {(void*)&qax_result};
    qt_metacall(QMetaObject::InvokeMetaMethod, 50, _a);
    return qax_result;
}

inline void IShellUIHelper3::SetActivitiesVisible(bool fVisible)
{
    void *_a[] = {0, (void*)&fVisible};
    qt_metacall(QMetaObject::InvokeMetaMethod, 51, _a);
}

inline void IShellUIHelper3::SetRecentlyClosedVisible(bool fVisible)
{
    void *_a[] = {0, (void*)&fVisible};
    qt_metacall(QMetaObject::InvokeMetaMethod, 52, _a);
}

inline QVariant IShellUIHelper3::ShowBrowserUI(const QString& bstrName, QVariant& pvarIn)
{
    QVariant qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&bstrName, (void*)&pvarIn};
    qt_metacall(QMetaObject::InvokeMetaMethod, 53, _a);
    return qax_result;
}

inline void IShellUIHelper3::ShowInPrivateHelp()
{
    void *_a[] = {0};
    qt_metacall(QMetaObject::InvokeMetaMethod, 54, _a);
}

inline void IShellUIHelper3::ShowTabsHelp()
{
    void *_a[] = {0};
    qt_metacall(QMetaObject::InvokeMetaMethod, 55, _a);
}

inline void IShellUIHelper3::SkipRunOnce()
{
    void *_a[] = {0};
    qt_metacall(QMetaObject::InvokeMetaMethod, 56, _a);
}

inline void IShellUIHelper3::SkipTabsWelcome()
{
    void *_a[] = {0};
    qt_metacall(QMetaObject::InvokeMetaMethod, 57, _a);
}

inline bool IShellUIHelper3::SqmEnabled()
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result};
    qt_metacall(QMetaObject::InvokeMetaMethod, 58, _a);
    return qax_result;
}


inline void IShellUIHelper4::AddChannel(const QString& URL)
{
    void *_a[] = {0, (void*)&URL};
    qt_metacall(QMetaObject::InvokeMetaMethod, 8, _a);
}

inline void IShellUIHelper4::AddDesktopComponent(const QString& URL, const QString& Type)
{
    void *_a[] = {0, (void*)&URL, (void*)&Type};
    qt_metacall(QMetaObject::InvokeMetaMethod, 9, _a);
}

inline void IShellUIHelper4::AddDesktopComponent(const QString& URL, const QString& Type, QVariant& Left)
{
    void *_a[] = {0, (void*)&URL, (void*)&Type, (void*)&Left};
    qt_metacall(QMetaObject::InvokeMetaMethod, 10, _a);
}

inline void IShellUIHelper4::AddDesktopComponent(const QString& URL, const QString& Type, QVariant& Left, QVariant& Top)
{
    void *_a[] = {0, (void*)&URL, (void*)&Type, (void*)&Left, (void*)&Top};
    qt_metacall(QMetaObject::InvokeMetaMethod, 11, _a);
}

inline void IShellUIHelper4::AddDesktopComponent(const QString& URL, const QString& Type, QVariant& Left, QVariant& Top, QVariant& Width)
{
    void *_a[] = {0, (void*)&URL, (void*)&Type, (void*)&Left, (void*)&Top, (void*)&Width};
    qt_metacall(QMetaObject::InvokeMetaMethod, 12, _a);
}

inline void IShellUIHelper4::AddDesktopComponent(const QString& URL, const QString& Type, QVariant& Left, QVariant& Top, QVariant& Width, QVariant& Height)
{
    void *_a[] = {0, (void*)&URL, (void*)&Type, (void*)&Left, (void*)&Top, (void*)&Width, (void*)&Height};
    qt_metacall(QMetaObject::InvokeMetaMethod, 13, _a);
}

inline void IShellUIHelper4::AddFavorite(const QString& URL)
{
    void *_a[] = {0, (void*)&URL};
    qt_metacall(QMetaObject::InvokeMetaMethod, 14, _a);
}

inline void IShellUIHelper4::AddFavorite(const QString& URL, QVariant& Title)
{
    void *_a[] = {0, (void*)&URL, (void*)&Title};
    qt_metacall(QMetaObject::InvokeMetaMethod, 15, _a);
}

inline void IShellUIHelper4::AddSearchProvider(const QString& URL)
{
    void *_a[] = {0, (void*)&URL};
    qt_metacall(QMetaObject::InvokeMetaMethod, 16, _a);
}

inline void IShellUIHelper4::AddService(const QString& URL)
{
    void *_a[] = {0, (void*)&URL};
    qt_metacall(QMetaObject::InvokeMetaMethod, 17, _a);
}

inline void IShellUIHelper4::AddToFavoritesBar(const QString& URL, const QString& Title)
{
    void *_a[] = {0, (void*)&URL, (void*)&Title};
    qt_metacall(QMetaObject::InvokeMetaMethod, 18, _a);
}

inline void IShellUIHelper4::AddToFavoritesBar(const QString& URL, const QString& Title, QVariant& Type)
{
    void *_a[] = {0, (void*)&URL, (void*)&Title, (void*)&Type};
    qt_metacall(QMetaObject::InvokeMetaMethod, 19, _a);
}

inline void IShellUIHelper4::AutoCompleteAttach()
{
    void *_a[] = {0};
    qt_metacall(QMetaObject::InvokeMetaMethod, 20, _a);
}

inline void IShellUIHelper4::AutoCompleteAttach(QVariant& Reserved)
{
    void *_a[] = {0, (void*)&Reserved};
    qt_metacall(QMetaObject::InvokeMetaMethod, 21, _a);
}

inline void IShellUIHelper4::AutoCompleteSaveForm()
{
    void *_a[] = {0};
    qt_metacall(QMetaObject::InvokeMetaMethod, 22, _a);
}

inline void IShellUIHelper4::AutoCompleteSaveForm(QVariant& Form)
{
    void *_a[] = {0, (void*)&Form};
    qt_metacall(QMetaObject::InvokeMetaMethod, 23, _a);
}

inline void IShellUIHelper4::AutoScan(const QString& strSearch, const QString& strFailureUrl)
{
    void *_a[] = {0, (void*)&strSearch, (void*)&strFailureUrl};
    qt_metacall(QMetaObject::InvokeMetaMethod, 24, _a);
}

inline void IShellUIHelper4::AutoScan(const QString& strSearch, const QString& strFailureUrl, QVariant& pvarTargetFrame)
{
    void *_a[] = {0, (void*)&strSearch, (void*)&strFailureUrl, (void*)&pvarTargetFrame};
    qt_metacall(QMetaObject::InvokeMetaMethod, 25, _a);
}

inline QString IShellUIHelper4::BrandImageUri()
{
    QString qax_result;
    void *_a[] = {(void*)&qax_result};
    qt_metacall(QMetaObject::InvokeMetaMethod, 26, _a);
    return qax_result;
}

inline void IShellUIHelper4::BuildNewTabPage()
{
    void *_a[] = {0};
    qt_metacall(QMetaObject::InvokeMetaMethod, 27, _a);
}

inline void IShellUIHelper4::ContentDiscoveryReset()
{
    void *_a[] = {0};
    qt_metacall(QMetaObject::InvokeMetaMethod, 28, _a);
}

inline void IShellUIHelper4::CustomizeClearType(bool fSet)
{
    void *_a[] = {0, (void*)&fSet};
    qt_metacall(QMetaObject::InvokeMetaMethod, 29, _a);
}

inline void IShellUIHelper4::CustomizeSettings(bool fSQM, bool fPhishing, const QString& bstrLocale)
{
    void *_a[] = {0, (void*)&fSQM, (void*)&fPhishing, (void*)&bstrLocale};
    qt_metacall(QMetaObject::InvokeMetaMethod, 30, _a);
}

inline QString IShellUIHelper4::DefaultSearchProvider()
{
    QString qax_result;
    void *_a[] = {(void*)&qax_result};
    qt_metacall(QMetaObject::InvokeMetaMethod, 31, _a);
    return qax_result;
}

inline void IShellUIHelper4::DiagnoseConnection()
{
    void *_a[] = {0};
    qt_metacall(QMetaObject::InvokeMetaMethod, 32, _a);
}

inline void IShellUIHelper4::EnableSuggestedSites(bool fEnable)
{
    void *_a[] = {0, (void*)&fEnable};
    qt_metacall(QMetaObject::InvokeMetaMethod, 33, _a);
}

inline void IShellUIHelper4::ImportExportFavorites(bool fImport, const QString& strImpExpPath)
{
    void *_a[] = {0, (void*)&fImport, (void*)&strImpExpPath};
    qt_metacall(QMetaObject::InvokeMetaMethod, 34, _a);
}

inline bool IShellUIHelper4::InPrivateFilteringEnabled()
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result};
    qt_metacall(QMetaObject::InvokeMetaMethod, 35, _a);
    return qax_result;
}

inline bool IShellUIHelper4::IsSearchMigrated()
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result};
    qt_metacall(QMetaObject::InvokeMetaMethod, 36, _a);
    return qax_result;
}

inline uint IShellUIHelper4::IsSearchProviderInstalled(const QString& URL)
{
    uint qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&URL};
    qt_metacall(QMetaObject::InvokeMetaMethod, 37, _a);
    return qax_result;
}

inline uint IShellUIHelper4::IsServiceInstalled(const QString& URL, const QString& Verb)
{
    uint qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&URL, (void*)&Verb};
    qt_metacall(QMetaObject::InvokeMetaMethod, 38, _a);
    return qax_result;
}

inline bool IShellUIHelper4::IsSubscribed(const QString& URL)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&URL};
    qt_metacall(QMetaObject::InvokeMetaMethod, 39, _a);
    return qax_result;
}

inline bool IShellUIHelper4::IsSuggestedSitesEnabled()
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result};
    qt_metacall(QMetaObject::InvokeMetaMethod, 40, _a);
    return qax_result;
}

inline void IShellUIHelper4::NavigateAndFind(const QString& URL, const QString& strQuery, QVariant& varTargetFrame)
{
    void *_a[] = {0, (void*)&URL, (void*)&strQuery, (void*)&varTargetFrame};
    qt_metacall(QMetaObject::InvokeMetaMethod, 41, _a);
}

inline void IShellUIHelper4::NavigateToSuggestedSites(const QString& bstrRelativeUrl)
{
    void *_a[] = {0, (void*)&bstrRelativeUrl};
    qt_metacall(QMetaObject::InvokeMetaMethod, 42, _a);
}

inline bool IShellUIHelper4::PhishingEnabled()
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result};
    qt_metacall(QMetaObject::InvokeMetaMethod, 43, _a);
    return qax_result;
}

inline void IShellUIHelper4::RefreshOfflineDesktop()
{
    void *_a[] = {0};
    qt_metacall(QMetaObject::InvokeMetaMethod, 44, _a);
}

inline void IShellUIHelper4::ResetFirstBootMode()
{
    void *_a[] = {0};
    qt_metacall(QMetaObject::InvokeMetaMethod, 45, _a);
}

inline void IShellUIHelper4::ResetSafeMode()
{
    void *_a[] = {0};
    qt_metacall(QMetaObject::InvokeMetaMethod, 46, _a);
}

inline bool IShellUIHelper4::RunOnceHasShown()
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result};
    qt_metacall(QMetaObject::InvokeMetaMethod, 47, _a);
    return qax_result;
}

inline void IShellUIHelper4::RunOnceRequiredSettingsComplete(bool fComplete)
{
    void *_a[] = {0, (void*)&fComplete};
    qt_metacall(QMetaObject::InvokeMetaMethod, 48, _a);
}

inline void IShellUIHelper4::RunOnceShown()
{
    void *_a[] = {0};
    qt_metacall(QMetaObject::InvokeMetaMethod, 49, _a);
}

inline QString IShellUIHelper4::SearchGuideUrl()
{
    QString qax_result;
    void *_a[] = {(void*)&qax_result};
    qt_metacall(QMetaObject::InvokeMetaMethod, 50, _a);
    return qax_result;
}

inline void IShellUIHelper4::SetActivitiesVisible(bool fVisible)
{
    void *_a[] = {0, (void*)&fVisible};
    qt_metacall(QMetaObject::InvokeMetaMethod, 51, _a);
}

inline void IShellUIHelper4::SetRecentlyClosedVisible(bool fVisible)
{
    void *_a[] = {0, (void*)&fVisible};
    qt_metacall(QMetaObject::InvokeMetaMethod, 52, _a);
}

inline QVariant IShellUIHelper4::ShowBrowserUI(const QString& bstrName, QVariant& pvarIn)
{
    QVariant qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&bstrName, (void*)&pvarIn};
    qt_metacall(QMetaObject::InvokeMetaMethod, 53, _a);
    return qax_result;
}

inline void IShellUIHelper4::ShowInPrivateHelp()
{
    void *_a[] = {0};
    qt_metacall(QMetaObject::InvokeMetaMethod, 54, _a);
}

inline void IShellUIHelper4::ShowTabsHelp()
{
    void *_a[] = {0};
    qt_metacall(QMetaObject::InvokeMetaMethod, 55, _a);
}

inline void IShellUIHelper4::SkipRunOnce()
{
    void *_a[] = {0};
    qt_metacall(QMetaObject::InvokeMetaMethod, 56, _a);
}

inline void IShellUIHelper4::SkipTabsWelcome()
{
    void *_a[] = {0};
    qt_metacall(QMetaObject::InvokeMetaMethod, 57, _a);
}

inline bool IShellUIHelper4::SqmEnabled()
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result};
    qt_metacall(QMetaObject::InvokeMetaMethod, 58, _a);
    return qax_result;
}

inline bool IShellUIHelper4::msActiveXFilteringEnabled()
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result};
    qt_metacall(QMetaObject::InvokeMetaMethod, 59, _a);
    return qax_result;
}

inline void IShellUIHelper4::msAddSiteMode()
{
    void *_a[] = {0};
    qt_metacall(QMetaObject::InvokeMetaMethod, 60, _a);
}

inline void IShellUIHelper4::msAddTrackingProtectionList(const QString& URL, const QString& bstrFilterName)
{
    void *_a[] = {0, (void*)&URL, (void*)&bstrFilterName};
    qt_metacall(QMetaObject::InvokeMetaMethod, 61, _a);
}

inline bool IShellUIHelper4::msIsSiteMode()
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result};
    qt_metacall(QMetaObject::InvokeMetaMethod, 62, _a);
    return qax_result;
}

inline QVariant IShellUIHelper4::msIsSiteModeFirstRun(bool fPreserveState)
{
    QVariant qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&fPreserveState};
    qt_metacall(QMetaObject::InvokeMetaMethod, 63, _a);
    return qax_result;
}

inline void IShellUIHelper4::msSiteModeActivate()
{
    void *_a[] = {0};
    qt_metacall(QMetaObject::InvokeMetaMethod, 64, _a);
}

inline QVariant IShellUIHelper4::msSiteModeAddButtonStyle(const QVariant& uiButtonID, const QString& bstrIconURL, const QString& bstrTooltip)
{
    QVariant qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&uiButtonID, (void*)&bstrIconURL, (void*)&bstrTooltip};
    qt_metacall(QMetaObject::InvokeMetaMethod, 65, _a);
    return qax_result;
}

inline void IShellUIHelper4::msSiteModeAddJumpListItem(const QString& bstrName, const QString& bstrActionUri, const QString& bstrIconUri)
{
    void *_a[] = {0, (void*)&bstrName, (void*)&bstrActionUri, (void*)&bstrIconUri};
    qt_metacall(QMetaObject::InvokeMetaMethod, 66, _a);
}

inline void IShellUIHelper4::msSiteModeAddJumpListItem(const QString& bstrName, const QString& bstrActionUri, const QString& bstrIconUri, QVariant& pvarWindowType)
{
    void *_a[] = {0, (void*)&bstrName, (void*)&bstrActionUri, (void*)&bstrIconUri, (void*)&pvarWindowType};
    qt_metacall(QMetaObject::InvokeMetaMethod, 67, _a);
}

inline QVariant IShellUIHelper4::msSiteModeAddThumbBarButton(const QString& bstrIconURL, const QString& bstrTooltip)
{
    QVariant qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&bstrIconURL, (void*)&bstrTooltip};
    qt_metacall(QMetaObject::InvokeMetaMethod, 68, _a);
    return qax_result;
}

inline void IShellUIHelper4::msSiteModeClearIconOverlay()
{
    void *_a[] = {0};
    qt_metacall(QMetaObject::InvokeMetaMethod, 69, _a);
}

inline void IShellUIHelper4::msSiteModeClearJumpList()
{
    void *_a[] = {0};
    qt_metacall(QMetaObject::InvokeMetaMethod, 70, _a);
}

inline void IShellUIHelper4::msSiteModeCreateJumpList(const QString& bstrHeader)
{
    void *_a[] = {0, (void*)&bstrHeader};
    qt_metacall(QMetaObject::InvokeMetaMethod, 71, _a);
}

inline void IShellUIHelper4::msSiteModeSetIconOverlay(const QString& IconUrl)
{
    void *_a[] = {0, (void*)&IconUrl};
    qt_metacall(QMetaObject::InvokeMetaMethod, 72, _a);
}

inline void IShellUIHelper4::msSiteModeSetIconOverlay(const QString& IconUrl, QVariant& pvarDescription)
{
    void *_a[] = {0, (void*)&IconUrl, (void*)&pvarDescription};
    qt_metacall(QMetaObject::InvokeMetaMethod, 73, _a);
}

inline void IShellUIHelper4::msSiteModeShowButtonStyle(const QVariant& uiButtonID, const QVariant& uiStyleID)
{
    void *_a[] = {0, (void*)&uiButtonID, (void*)&uiStyleID};
    qt_metacall(QMetaObject::InvokeMetaMethod, 74, _a);
}

inline void IShellUIHelper4::msSiteModeShowJumpList()
{
    void *_a[] = {0};
    qt_metacall(QMetaObject::InvokeMetaMethod, 75, _a);
}

inline void IShellUIHelper4::msSiteModeShowThumbBar()
{
    void *_a[] = {0};
    qt_metacall(QMetaObject::InvokeMetaMethod, 76, _a);
}

inline void IShellUIHelper4::msSiteModeUpdateThumbBarButton(const QVariant& ButtonID, bool fEnabled, bool fVisible)
{
    void *_a[] = {0, (void*)&ButtonID, (void*)&fEnabled, (void*)&fVisible};
    qt_metacall(QMetaObject::InvokeMetaMethod, 77, _a);
}

inline bool IShellUIHelper4::msTrackingProtectionEnabled()
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result};
    qt_metacall(QMetaObject::InvokeMetaMethod, 78, _a);
    return qax_result;
}


inline void IShellUIHelper5::AddChannel(const QString& URL)
{
    void *_a[] = {0, (void*)&URL};
    qt_metacall(QMetaObject::InvokeMetaMethod, 8, _a);
}

inline void IShellUIHelper5::AddDesktopComponent(const QString& URL, const QString& Type)
{
    void *_a[] = {0, (void*)&URL, (void*)&Type};
    qt_metacall(QMetaObject::InvokeMetaMethod, 9, _a);
}

inline void IShellUIHelper5::AddDesktopComponent(const QString& URL, const QString& Type, QVariant& Left)
{
    void *_a[] = {0, (void*)&URL, (void*)&Type, (void*)&Left};
    qt_metacall(QMetaObject::InvokeMetaMethod, 10, _a);
}

inline void IShellUIHelper5::AddDesktopComponent(const QString& URL, const QString& Type, QVariant& Left, QVariant& Top)
{
    void *_a[] = {0, (void*)&URL, (void*)&Type, (void*)&Left, (void*)&Top};
    qt_metacall(QMetaObject::InvokeMetaMethod, 11, _a);
}

inline void IShellUIHelper5::AddDesktopComponent(const QString& URL, const QString& Type, QVariant& Left, QVariant& Top, QVariant& Width)
{
    void *_a[] = {0, (void*)&URL, (void*)&Type, (void*)&Left, (void*)&Top, (void*)&Width};
    qt_metacall(QMetaObject::InvokeMetaMethod, 12, _a);
}

inline void IShellUIHelper5::AddDesktopComponent(const QString& URL, const QString& Type, QVariant& Left, QVariant& Top, QVariant& Width, QVariant& Height)
{
    void *_a[] = {0, (void*)&URL, (void*)&Type, (void*)&Left, (void*)&Top, (void*)&Width, (void*)&Height};
    qt_metacall(QMetaObject::InvokeMetaMethod, 13, _a);
}

inline void IShellUIHelper5::AddFavorite(const QString& URL)
{
    void *_a[] = {0, (void*)&URL};
    qt_metacall(QMetaObject::InvokeMetaMethod, 14, _a);
}

inline void IShellUIHelper5::AddFavorite(const QString& URL, QVariant& Title)
{
    void *_a[] = {0, (void*)&URL, (void*)&Title};
    qt_metacall(QMetaObject::InvokeMetaMethod, 15, _a);
}

inline void IShellUIHelper5::AddSearchProvider(const QString& URL)
{
    void *_a[] = {0, (void*)&URL};
    qt_metacall(QMetaObject::InvokeMetaMethod, 16, _a);
}

inline void IShellUIHelper5::AddService(const QString& URL)
{
    void *_a[] = {0, (void*)&URL};
    qt_metacall(QMetaObject::InvokeMetaMethod, 17, _a);
}

inline void IShellUIHelper5::AddToFavoritesBar(const QString& URL, const QString& Title)
{
    void *_a[] = {0, (void*)&URL, (void*)&Title};
    qt_metacall(QMetaObject::InvokeMetaMethod, 18, _a);
}

inline void IShellUIHelper5::AddToFavoritesBar(const QString& URL, const QString& Title, QVariant& Type)
{
    void *_a[] = {0, (void*)&URL, (void*)&Title, (void*)&Type};
    qt_metacall(QMetaObject::InvokeMetaMethod, 19, _a);
}

inline void IShellUIHelper5::AutoCompleteAttach()
{
    void *_a[] = {0};
    qt_metacall(QMetaObject::InvokeMetaMethod, 20, _a);
}

inline void IShellUIHelper5::AutoCompleteAttach(QVariant& Reserved)
{
    void *_a[] = {0, (void*)&Reserved};
    qt_metacall(QMetaObject::InvokeMetaMethod, 21, _a);
}

inline void IShellUIHelper5::AutoCompleteSaveForm()
{
    void *_a[] = {0};
    qt_metacall(QMetaObject::InvokeMetaMethod, 22, _a);
}

inline void IShellUIHelper5::AutoCompleteSaveForm(QVariant& Form)
{
    void *_a[] = {0, (void*)&Form};
    qt_metacall(QMetaObject::InvokeMetaMethod, 23, _a);
}

inline void IShellUIHelper5::AutoScan(const QString& strSearch, const QString& strFailureUrl)
{
    void *_a[] = {0, (void*)&strSearch, (void*)&strFailureUrl};
    qt_metacall(QMetaObject::InvokeMetaMethod, 24, _a);
}

inline void IShellUIHelper5::AutoScan(const QString& strSearch, const QString& strFailureUrl, QVariant& pvarTargetFrame)
{
    void *_a[] = {0, (void*)&strSearch, (void*)&strFailureUrl, (void*)&pvarTargetFrame};
    qt_metacall(QMetaObject::InvokeMetaMethod, 25, _a);
}

inline QString IShellUIHelper5::BrandImageUri()
{
    QString qax_result;
    void *_a[] = {(void*)&qax_result};
    qt_metacall(QMetaObject::InvokeMetaMethod, 26, _a);
    return qax_result;
}

inline void IShellUIHelper5::BuildNewTabPage()
{
    void *_a[] = {0};
    qt_metacall(QMetaObject::InvokeMetaMethod, 27, _a);
}

inline void IShellUIHelper5::ContentDiscoveryReset()
{
    void *_a[] = {0};
    qt_metacall(QMetaObject::InvokeMetaMethod, 28, _a);
}

inline void IShellUIHelper5::CustomizeClearType(bool fSet)
{
    void *_a[] = {0, (void*)&fSet};
    qt_metacall(QMetaObject::InvokeMetaMethod, 29, _a);
}

inline void IShellUIHelper5::CustomizeSettings(bool fSQM, bool fPhishing, const QString& bstrLocale)
{
    void *_a[] = {0, (void*)&fSQM, (void*)&fPhishing, (void*)&bstrLocale};
    qt_metacall(QMetaObject::InvokeMetaMethod, 30, _a);
}

inline QString IShellUIHelper5::DefaultSearchProvider()
{
    QString qax_result;
    void *_a[] = {(void*)&qax_result};
    qt_metacall(QMetaObject::InvokeMetaMethod, 31, _a);
    return qax_result;
}

inline void IShellUIHelper5::DiagnoseConnection()
{
    void *_a[] = {0};
    qt_metacall(QMetaObject::InvokeMetaMethod, 32, _a);
}

inline void IShellUIHelper5::EnableSuggestedSites(bool fEnable)
{
    void *_a[] = {0, (void*)&fEnable};
    qt_metacall(QMetaObject::InvokeMetaMethod, 33, _a);
}

inline void IShellUIHelper5::ImportExportFavorites(bool fImport, const QString& strImpExpPath)
{
    void *_a[] = {0, (void*)&fImport, (void*)&strImpExpPath};
    qt_metacall(QMetaObject::InvokeMetaMethod, 34, _a);
}

inline bool IShellUIHelper5::InPrivateFilteringEnabled()
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result};
    qt_metacall(QMetaObject::InvokeMetaMethod, 35, _a);
    return qax_result;
}

inline bool IShellUIHelper5::IsSearchMigrated()
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result};
    qt_metacall(QMetaObject::InvokeMetaMethod, 36, _a);
    return qax_result;
}

inline uint IShellUIHelper5::IsSearchProviderInstalled(const QString& URL)
{
    uint qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&URL};
    qt_metacall(QMetaObject::InvokeMetaMethod, 37, _a);
    return qax_result;
}

inline uint IShellUIHelper5::IsServiceInstalled(const QString& URL, const QString& Verb)
{
    uint qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&URL, (void*)&Verb};
    qt_metacall(QMetaObject::InvokeMetaMethod, 38, _a);
    return qax_result;
}

inline bool IShellUIHelper5::IsSubscribed(const QString& URL)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&URL};
    qt_metacall(QMetaObject::InvokeMetaMethod, 39, _a);
    return qax_result;
}

inline bool IShellUIHelper5::IsSuggestedSitesEnabled()
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result};
    qt_metacall(QMetaObject::InvokeMetaMethod, 40, _a);
    return qax_result;
}

inline void IShellUIHelper5::NavigateAndFind(const QString& URL, const QString& strQuery, QVariant& varTargetFrame)
{
    void *_a[] = {0, (void*)&URL, (void*)&strQuery, (void*)&varTargetFrame};
    qt_metacall(QMetaObject::InvokeMetaMethod, 41, _a);
}

inline void IShellUIHelper5::NavigateToSuggestedSites(const QString& bstrRelativeUrl)
{
    void *_a[] = {0, (void*)&bstrRelativeUrl};
    qt_metacall(QMetaObject::InvokeMetaMethod, 42, _a);
}

inline bool IShellUIHelper5::PhishingEnabled()
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result};
    qt_metacall(QMetaObject::InvokeMetaMethod, 43, _a);
    return qax_result;
}

inline void IShellUIHelper5::RefreshOfflineDesktop()
{
    void *_a[] = {0};
    qt_metacall(QMetaObject::InvokeMetaMethod, 44, _a);
}

inline void IShellUIHelper5::ResetFirstBootMode()
{
    void *_a[] = {0};
    qt_metacall(QMetaObject::InvokeMetaMethod, 45, _a);
}

inline void IShellUIHelper5::ResetSafeMode()
{
    void *_a[] = {0};
    qt_metacall(QMetaObject::InvokeMetaMethod, 46, _a);
}

inline bool IShellUIHelper5::RunOnceHasShown()
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result};
    qt_metacall(QMetaObject::InvokeMetaMethod, 47, _a);
    return qax_result;
}

inline void IShellUIHelper5::RunOnceRequiredSettingsComplete(bool fComplete)
{
    void *_a[] = {0, (void*)&fComplete};
    qt_metacall(QMetaObject::InvokeMetaMethod, 48, _a);
}

inline void IShellUIHelper5::RunOnceShown()
{
    void *_a[] = {0};
    qt_metacall(QMetaObject::InvokeMetaMethod, 49, _a);
}

inline QString IShellUIHelper5::SearchGuideUrl()
{
    QString qax_result;
    void *_a[] = {(void*)&qax_result};
    qt_metacall(QMetaObject::InvokeMetaMethod, 50, _a);
    return qax_result;
}

inline void IShellUIHelper5::SetActivitiesVisible(bool fVisible)
{
    void *_a[] = {0, (void*)&fVisible};
    qt_metacall(QMetaObject::InvokeMetaMethod, 51, _a);
}

inline void IShellUIHelper5::SetRecentlyClosedVisible(bool fVisible)
{
    void *_a[] = {0, (void*)&fVisible};
    qt_metacall(QMetaObject::InvokeMetaMethod, 52, _a);
}

inline QVariant IShellUIHelper5::ShowBrowserUI(const QString& bstrName, QVariant& pvarIn)
{
    QVariant qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&bstrName, (void*)&pvarIn};
    qt_metacall(QMetaObject::InvokeMetaMethod, 53, _a);
    return qax_result;
}

inline void IShellUIHelper5::ShowInPrivateHelp()
{
    void *_a[] = {0};
    qt_metacall(QMetaObject::InvokeMetaMethod, 54, _a);
}

inline void IShellUIHelper5::ShowTabsHelp()
{
    void *_a[] = {0};
    qt_metacall(QMetaObject::InvokeMetaMethod, 55, _a);
}

inline void IShellUIHelper5::SkipRunOnce()
{
    void *_a[] = {0};
    qt_metacall(QMetaObject::InvokeMetaMethod, 56, _a);
}

inline void IShellUIHelper5::SkipTabsWelcome()
{
    void *_a[] = {0};
    qt_metacall(QMetaObject::InvokeMetaMethod, 57, _a);
}

inline bool IShellUIHelper5::SqmEnabled()
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result};
    qt_metacall(QMetaObject::InvokeMetaMethod, 58, _a);
    return qax_result;
}

inline bool IShellUIHelper5::msActiveXFilteringEnabled()
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result};
    qt_metacall(QMetaObject::InvokeMetaMethod, 59, _a);
    return qax_result;
}

inline void IShellUIHelper5::msAddSiteMode()
{
    void *_a[] = {0};
    qt_metacall(QMetaObject::InvokeMetaMethod, 60, _a);
}

inline void IShellUIHelper5::msAddTrackingProtectionList(const QString& URL, const QString& bstrFilterName)
{
    void *_a[] = {0, (void*)&URL, (void*)&bstrFilterName};
    qt_metacall(QMetaObject::InvokeMetaMethod, 61, _a);
}

inline void IShellUIHelper5::msChangeDefaultBrowser(bool fChange)
{
    void *_a[] = {0, (void*)&fChange};
    qt_metacall(QMetaObject::InvokeMetaMethod, 62, _a);
}

inline void IShellUIHelper5::msDiagnoseConnectionUILess()
{
    void *_a[] = {0};
    qt_metacall(QMetaObject::InvokeMetaMethod, 63, _a);
}

inline bool IShellUIHelper5::msIsSiteMode()
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result};
    qt_metacall(QMetaObject::InvokeMetaMethod, 64, _a);
    return qax_result;
}

inline QVariant IShellUIHelper5::msIsSiteModeFirstRun(bool fPreserveState)
{
    QVariant qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&fPreserveState};
    qt_metacall(QMetaObject::InvokeMetaMethod, 65, _a);
    return qax_result;
}

inline void IShellUIHelper5::msLaunchNetworkClientHelp()
{
    void *_a[] = {0};
    qt_metacall(QMetaObject::InvokeMetaMethod, 66, _a);
}

inline QVariant IShellUIHelper5::msProvisionNetworks(const QString& bstrProvisioningXml)
{
    QVariant qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&bstrProvisioningXml};
    qt_metacall(QMetaObject::InvokeMetaMethod, 67, _a);
    return qax_result;
}

inline void IShellUIHelper5::msReportSafeUrl()
{
    void *_a[] = {0};
    qt_metacall(QMetaObject::InvokeMetaMethod, 68, _a);
}

inline void IShellUIHelper5::msSiteModeActivate()
{
    void *_a[] = {0};
    qt_metacall(QMetaObject::InvokeMetaMethod, 69, _a);
}

inline QVariant IShellUIHelper5::msSiteModeAddButtonStyle(const QVariant& uiButtonID, const QString& bstrIconURL, const QString& bstrTooltip)
{
    QVariant qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&uiButtonID, (void*)&bstrIconURL, (void*)&bstrTooltip};
    qt_metacall(QMetaObject::InvokeMetaMethod, 70, _a);
    return qax_result;
}

inline void IShellUIHelper5::msSiteModeAddJumpListItem(const QString& bstrName, const QString& bstrActionUri, const QString& bstrIconUri)
{
    void *_a[] = {0, (void*)&bstrName, (void*)&bstrActionUri, (void*)&bstrIconUri};
    qt_metacall(QMetaObject::InvokeMetaMethod, 71, _a);
}

inline void IShellUIHelper5::msSiteModeAddJumpListItem(const QString& bstrName, const QString& bstrActionUri, const QString& bstrIconUri, QVariant& pvarWindowType)
{
    void *_a[] = {0, (void*)&bstrName, (void*)&bstrActionUri, (void*)&bstrIconUri, (void*)&pvarWindowType};
    qt_metacall(QMetaObject::InvokeMetaMethod, 72, _a);
}

inline QVariant IShellUIHelper5::msSiteModeAddThumbBarButton(const QString& bstrIconURL, const QString& bstrTooltip)
{
    QVariant qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&bstrIconURL, (void*)&bstrTooltip};
    qt_metacall(QMetaObject::InvokeMetaMethod, 73, _a);
    return qax_result;
}

inline void IShellUIHelper5::msSiteModeClearBadge()
{
    void *_a[] = {0};
    qt_metacall(QMetaObject::InvokeMetaMethod, 74, _a);
}

inline void IShellUIHelper5::msSiteModeClearIconOverlay()
{
    void *_a[] = {0};
    qt_metacall(QMetaObject::InvokeMetaMethod, 75, _a);
}

inline void IShellUIHelper5::msSiteModeClearJumpList()
{
    void *_a[] = {0};
    qt_metacall(QMetaObject::InvokeMetaMethod, 76, _a);
}

inline void IShellUIHelper5::msSiteModeCreateJumpList(const QString& bstrHeader)
{
    void *_a[] = {0, (void*)&bstrHeader};
    qt_metacall(QMetaObject::InvokeMetaMethod, 77, _a);
}

inline void IShellUIHelper5::msSiteModeRefreshBadge()
{
    void *_a[] = {0};
    qt_metacall(QMetaObject::InvokeMetaMethod, 78, _a);
}

inline void IShellUIHelper5::msSiteModeSetIconOverlay(const QString& IconUrl)
{
    void *_a[] = {0, (void*)&IconUrl};
    qt_metacall(QMetaObject::InvokeMetaMethod, 79, _a);
}

inline void IShellUIHelper5::msSiteModeSetIconOverlay(const QString& IconUrl, QVariant& pvarDescription)
{
    void *_a[] = {0, (void*)&IconUrl, (void*)&pvarDescription};
    qt_metacall(QMetaObject::InvokeMetaMethod, 80, _a);
}

inline void IShellUIHelper5::msSiteModeShowButtonStyle(const QVariant& uiButtonID, const QVariant& uiStyleID)
{
    void *_a[] = {0, (void*)&uiButtonID, (void*)&uiStyleID};
    qt_metacall(QMetaObject::InvokeMetaMethod, 81, _a);
}

inline void IShellUIHelper5::msSiteModeShowJumpList()
{
    void *_a[] = {0};
    qt_metacall(QMetaObject::InvokeMetaMethod, 82, _a);
}

inline void IShellUIHelper5::msSiteModeShowThumbBar()
{
    void *_a[] = {0};
    qt_metacall(QMetaObject::InvokeMetaMethod, 83, _a);
}

inline void IShellUIHelper5::msSiteModeUpdateThumbBarButton(const QVariant& ButtonID, bool fEnabled, bool fVisible)
{
    void *_a[] = {0, (void*)&ButtonID, (void*)&fEnabled, (void*)&fVisible};
    qt_metacall(QMetaObject::InvokeMetaMethod, 84, _a);
}

inline bool IShellUIHelper5::msTrackingProtectionEnabled()
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result};
    qt_metacall(QMetaObject::InvokeMetaMethod, 85, _a);
    return qax_result;
}


inline void IShellUIHelper6::AddChannel(const QString& URL)
{
    void *_a[] = {0, (void*)&URL};
    qt_metacall(QMetaObject::InvokeMetaMethod, 8, _a);
}

inline void IShellUIHelper6::AddDesktopComponent(const QString& URL, const QString& Type)
{
    void *_a[] = {0, (void*)&URL, (void*)&Type};
    qt_metacall(QMetaObject::InvokeMetaMethod, 9, _a);
}

inline void IShellUIHelper6::AddDesktopComponent(const QString& URL, const QString& Type, QVariant& Left)
{
    void *_a[] = {0, (void*)&URL, (void*)&Type, (void*)&Left};
    qt_metacall(QMetaObject::InvokeMetaMethod, 10, _a);
}

inline void IShellUIHelper6::AddDesktopComponent(const QString& URL, const QString& Type, QVariant& Left, QVariant& Top)
{
    void *_a[] = {0, (void*)&URL, (void*)&Type, (void*)&Left, (void*)&Top};
    qt_metacall(QMetaObject::InvokeMetaMethod, 11, _a);
}

inline void IShellUIHelper6::AddDesktopComponent(const QString& URL, const QString& Type, QVariant& Left, QVariant& Top, QVariant& Width)
{
    void *_a[] = {0, (void*)&URL, (void*)&Type, (void*)&Left, (void*)&Top, (void*)&Width};
    qt_metacall(QMetaObject::InvokeMetaMethod, 12, _a);
}

inline void IShellUIHelper6::AddDesktopComponent(const QString& URL, const QString& Type, QVariant& Left, QVariant& Top, QVariant& Width, QVariant& Height)
{
    void *_a[] = {0, (void*)&URL, (void*)&Type, (void*)&Left, (void*)&Top, (void*)&Width, (void*)&Height};
    qt_metacall(QMetaObject::InvokeMetaMethod, 13, _a);
}

inline void IShellUIHelper6::AddFavorite(const QString& URL)
{
    void *_a[] = {0, (void*)&URL};
    qt_metacall(QMetaObject::InvokeMetaMethod, 14, _a);
}

inline void IShellUIHelper6::AddFavorite(const QString& URL, QVariant& Title)
{
    void *_a[] = {0, (void*)&URL, (void*)&Title};
    qt_metacall(QMetaObject::InvokeMetaMethod, 15, _a);
}

inline void IShellUIHelper6::AddSearchProvider(const QString& URL)
{
    void *_a[] = {0, (void*)&URL};
    qt_metacall(QMetaObject::InvokeMetaMethod, 16, _a);
}

inline void IShellUIHelper6::AddService(const QString& URL)
{
    void *_a[] = {0, (void*)&URL};
    qt_metacall(QMetaObject::InvokeMetaMethod, 17, _a);
}

inline void IShellUIHelper6::AddToFavoritesBar(const QString& URL, const QString& Title)
{
    void *_a[] = {0, (void*)&URL, (void*)&Title};
    qt_metacall(QMetaObject::InvokeMetaMethod, 18, _a);
}

inline void IShellUIHelper6::AddToFavoritesBar(const QString& URL, const QString& Title, QVariant& Type)
{
    void *_a[] = {0, (void*)&URL, (void*)&Title, (void*)&Type};
    qt_metacall(QMetaObject::InvokeMetaMethod, 19, _a);
}

inline void IShellUIHelper6::AutoCompleteAttach()
{
    void *_a[] = {0};
    qt_metacall(QMetaObject::InvokeMetaMethod, 20, _a);
}

inline void IShellUIHelper6::AutoCompleteAttach(QVariant& Reserved)
{
    void *_a[] = {0, (void*)&Reserved};
    qt_metacall(QMetaObject::InvokeMetaMethod, 21, _a);
}

inline void IShellUIHelper6::AutoCompleteSaveForm()
{
    void *_a[] = {0};
    qt_metacall(QMetaObject::InvokeMetaMethod, 22, _a);
}

inline void IShellUIHelper6::AutoCompleteSaveForm(QVariant& Form)
{
    void *_a[] = {0, (void*)&Form};
    qt_metacall(QMetaObject::InvokeMetaMethod, 23, _a);
}

inline void IShellUIHelper6::AutoScan(const QString& strSearch, const QString& strFailureUrl)
{
    void *_a[] = {0, (void*)&strSearch, (void*)&strFailureUrl};
    qt_metacall(QMetaObject::InvokeMetaMethod, 24, _a);
}

inline void IShellUIHelper6::AutoScan(const QString& strSearch, const QString& strFailureUrl, QVariant& pvarTargetFrame)
{
    void *_a[] = {0, (void*)&strSearch, (void*)&strFailureUrl, (void*)&pvarTargetFrame};
    qt_metacall(QMetaObject::InvokeMetaMethod, 25, _a);
}

inline QString IShellUIHelper6::BrandImageUri()
{
    QString qax_result;
    void *_a[] = {(void*)&qax_result};
    qt_metacall(QMetaObject::InvokeMetaMethod, 26, _a);
    return qax_result;
}

inline void IShellUIHelper6::BuildNewTabPage()
{
    void *_a[] = {0};
    qt_metacall(QMetaObject::InvokeMetaMethod, 27, _a);
}

inline void IShellUIHelper6::ContentDiscoveryReset()
{
    void *_a[] = {0};
    qt_metacall(QMetaObject::InvokeMetaMethod, 28, _a);
}

inline void IShellUIHelper6::CustomizeClearType(bool fSet)
{
    void *_a[] = {0, (void*)&fSet};
    qt_metacall(QMetaObject::InvokeMetaMethod, 29, _a);
}

inline void IShellUIHelper6::CustomizeSettings(bool fSQM, bool fPhishing, const QString& bstrLocale)
{
    void *_a[] = {0, (void*)&fSQM, (void*)&fPhishing, (void*)&bstrLocale};
    qt_metacall(QMetaObject::InvokeMetaMethod, 30, _a);
}

inline QString IShellUIHelper6::DefaultSearchProvider()
{
    QString qax_result;
    void *_a[] = {(void*)&qax_result};
    qt_metacall(QMetaObject::InvokeMetaMethod, 31, _a);
    return qax_result;
}

inline void IShellUIHelper6::DiagnoseConnection()
{
    void *_a[] = {0};
    qt_metacall(QMetaObject::InvokeMetaMethod, 32, _a);
}

inline void IShellUIHelper6::EnableSuggestedSites(bool fEnable)
{
    void *_a[] = {0, (void*)&fEnable};
    qt_metacall(QMetaObject::InvokeMetaMethod, 33, _a);
}

inline void IShellUIHelper6::ImportExportFavorites(bool fImport, const QString& strImpExpPath)
{
    void *_a[] = {0, (void*)&fImport, (void*)&strImpExpPath};
    qt_metacall(QMetaObject::InvokeMetaMethod, 34, _a);
}

inline bool IShellUIHelper6::InPrivateFilteringEnabled()
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result};
    qt_metacall(QMetaObject::InvokeMetaMethod, 35, _a);
    return qax_result;
}

inline bool IShellUIHelper6::IsSearchMigrated()
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result};
    qt_metacall(QMetaObject::InvokeMetaMethod, 36, _a);
    return qax_result;
}

inline uint IShellUIHelper6::IsSearchProviderInstalled(const QString& URL)
{
    uint qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&URL};
    qt_metacall(QMetaObject::InvokeMetaMethod, 37, _a);
    return qax_result;
}

inline uint IShellUIHelper6::IsServiceInstalled(const QString& URL, const QString& Verb)
{
    uint qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&URL, (void*)&Verb};
    qt_metacall(QMetaObject::InvokeMetaMethod, 38, _a);
    return qax_result;
}

inline bool IShellUIHelper6::IsSubscribed(const QString& URL)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&URL};
    qt_metacall(QMetaObject::InvokeMetaMethod, 39, _a);
    return qax_result;
}

inline bool IShellUIHelper6::IsSuggestedSitesEnabled()
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result};
    qt_metacall(QMetaObject::InvokeMetaMethod, 40, _a);
    return qax_result;
}

inline void IShellUIHelper6::NavigateAndFind(const QString& URL, const QString& strQuery, QVariant& varTargetFrame)
{
    void *_a[] = {0, (void*)&URL, (void*)&strQuery, (void*)&varTargetFrame};
    qt_metacall(QMetaObject::InvokeMetaMethod, 41, _a);
}

inline void IShellUIHelper6::NavigateToSuggestedSites(const QString& bstrRelativeUrl)
{
    void *_a[] = {0, (void*)&bstrRelativeUrl};
    qt_metacall(QMetaObject::InvokeMetaMethod, 42, _a);
}

inline bool IShellUIHelper6::PhishingEnabled()
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result};
    qt_metacall(QMetaObject::InvokeMetaMethod, 43, _a);
    return qax_result;
}

inline void IShellUIHelper6::RefreshOfflineDesktop()
{
    void *_a[] = {0};
    qt_metacall(QMetaObject::InvokeMetaMethod, 44, _a);
}

inline void IShellUIHelper6::ResetFirstBootMode()
{
    void *_a[] = {0};
    qt_metacall(QMetaObject::InvokeMetaMethod, 45, _a);
}

inline void IShellUIHelper6::ResetSafeMode()
{
    void *_a[] = {0};
    qt_metacall(QMetaObject::InvokeMetaMethod, 46, _a);
}

inline bool IShellUIHelper6::RunOnceHasShown()
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result};
    qt_metacall(QMetaObject::InvokeMetaMethod, 47, _a);
    return qax_result;
}

inline void IShellUIHelper6::RunOnceRequiredSettingsComplete(bool fComplete)
{
    void *_a[] = {0, (void*)&fComplete};
    qt_metacall(QMetaObject::InvokeMetaMethod, 48, _a);
}

inline void IShellUIHelper6::RunOnceShown()
{
    void *_a[] = {0};
    qt_metacall(QMetaObject::InvokeMetaMethod, 49, _a);
}

inline QString IShellUIHelper6::SearchGuideUrl()
{
    QString qax_result;
    void *_a[] = {(void*)&qax_result};
    qt_metacall(QMetaObject::InvokeMetaMethod, 50, _a);
    return qax_result;
}

inline void IShellUIHelper6::SetActivitiesVisible(bool fVisible)
{
    void *_a[] = {0, (void*)&fVisible};
    qt_metacall(QMetaObject::InvokeMetaMethod, 51, _a);
}

inline void IShellUIHelper6::SetRecentlyClosedVisible(bool fVisible)
{
    void *_a[] = {0, (void*)&fVisible};
    qt_metacall(QMetaObject::InvokeMetaMethod, 52, _a);
}

inline QVariant IShellUIHelper6::ShowBrowserUI(const QString& bstrName, QVariant& pvarIn)
{
    QVariant qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&bstrName, (void*)&pvarIn};
    qt_metacall(QMetaObject::InvokeMetaMethod, 53, _a);
    return qax_result;
}

inline void IShellUIHelper6::ShowInPrivateHelp()
{
    void *_a[] = {0};
    qt_metacall(QMetaObject::InvokeMetaMethod, 54, _a);
}

inline void IShellUIHelper6::ShowTabsHelp()
{
    void *_a[] = {0};
    qt_metacall(QMetaObject::InvokeMetaMethod, 55, _a);
}

inline void IShellUIHelper6::SkipRunOnce()
{
    void *_a[] = {0};
    qt_metacall(QMetaObject::InvokeMetaMethod, 56, _a);
}

inline void IShellUIHelper6::SkipTabsWelcome()
{
    void *_a[] = {0};
    qt_metacall(QMetaObject::InvokeMetaMethod, 57, _a);
}

inline bool IShellUIHelper6::SqmEnabled()
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result};
    qt_metacall(QMetaObject::InvokeMetaMethod, 58, _a);
    return qax_result;
}

inline bool IShellUIHelper6::msActiveXFilteringEnabled()
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result};
    qt_metacall(QMetaObject::InvokeMetaMethod, 59, _a);
    return qax_result;
}

inline void IShellUIHelper6::msAddSiteMode()
{
    void *_a[] = {0};
    qt_metacall(QMetaObject::InvokeMetaMethod, 60, _a);
}

inline void IShellUIHelper6::msAddTrackingProtectionList(const QString& URL, const QString& bstrFilterName)
{
    void *_a[] = {0, (void*)&URL, (void*)&bstrFilterName};
    qt_metacall(QMetaObject::InvokeMetaMethod, 61, _a);
}

inline void IShellUIHelper6::msChangeDefaultBrowser(bool fChange)
{
    void *_a[] = {0, (void*)&fChange};
    qt_metacall(QMetaObject::InvokeMetaMethod, 62, _a);
}

inline void IShellUIHelper6::msClearTile()
{
    void *_a[] = {0};
    qt_metacall(QMetaObject::InvokeMetaMethod, 63, _a);
}

inline void IShellUIHelper6::msDiagnoseConnectionUILess()
{
    void *_a[] = {0};
    qt_metacall(QMetaObject::InvokeMetaMethod, 64, _a);
}

inline void IShellUIHelper6::msEnableTileNotificationQueue(bool fChange)
{
    void *_a[] = {0, (void*)&fChange};
    qt_metacall(QMetaObject::InvokeMetaMethod, 65, _a);
}

inline void IShellUIHelper6::msEnableTileNotificationQueueForSquare150x150(bool fChange)
{
    void *_a[] = {0, (void*)&fChange};
    qt_metacall(QMetaObject::InvokeMetaMethod, 66, _a);
}

inline void IShellUIHelper6::msEnableTileNotificationQueueForSquare310x310(bool fChange)
{
    void *_a[] = {0, (void*)&fChange};
    qt_metacall(QMetaObject::InvokeMetaMethod, 67, _a);
}

inline void IShellUIHelper6::msEnableTileNotificationQueueForWide310x150(bool fChange)
{
    void *_a[] = {0, (void*)&fChange};
    qt_metacall(QMetaObject::InvokeMetaMethod, 68, _a);
}

inline bool IShellUIHelper6::msIsSiteMode()
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result};
    qt_metacall(QMetaObject::InvokeMetaMethod, 69, _a);
    return qax_result;
}

inline QVariant IShellUIHelper6::msIsSiteModeFirstRun(bool fPreserveState)
{
    QVariant qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&fPreserveState};
    qt_metacall(QMetaObject::InvokeMetaMethod, 70, _a);
    return qax_result;
}

inline void IShellUIHelper6::msLaunchInternetOptions()
{
    void *_a[] = {0};
    qt_metacall(QMetaObject::InvokeMetaMethod, 71, _a);
}

inline void IShellUIHelper6::msLaunchNetworkClientHelp()
{
    void *_a[] = {0};
    qt_metacall(QMetaObject::InvokeMetaMethod, 72, _a);
}

inline QVariant IShellUIHelper6::msPinnedSiteState()
{
    QVariant qax_result;
    void *_a[] = {(void*)&qax_result};
    qt_metacall(QMetaObject::InvokeMetaMethod, 73, _a);
    return qax_result;
}

inline QVariant IShellUIHelper6::msProvisionNetworks(const QString& bstrProvisioningXml)
{
    QVariant qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&bstrProvisioningXml};
    qt_metacall(QMetaObject::InvokeMetaMethod, 74, _a);
    return qax_result;
}

inline void IShellUIHelper6::msRemoveScheduledTileNotification(const QString& bstrNotificationId)
{
    void *_a[] = {0, (void*)&bstrNotificationId};
    qt_metacall(QMetaObject::InvokeMetaMethod, 75, _a);
}

inline void IShellUIHelper6::msReportSafeUrl()
{
    void *_a[] = {0};
    qt_metacall(QMetaObject::InvokeMetaMethod, 76, _a);
}

inline void IShellUIHelper6::msScheduledTileNotification(const QString& bstrNotificationXml, const QString& bstrNotificationId, const QString& bstrNotificationTag)
{
    void *_a[] = {0, (void*)&bstrNotificationXml, (void*)&bstrNotificationId, (void*)&bstrNotificationTag};
    qt_metacall(QMetaObject::InvokeMetaMethod, 77, _a);
}

inline void IShellUIHelper6::msScheduledTileNotification(const QString& bstrNotificationXml, const QString& bstrNotificationId, const QString& bstrNotificationTag, const QVariant& startTime)
{
    void *_a[] = {0, (void*)&bstrNotificationXml, (void*)&bstrNotificationId, (void*)&bstrNotificationTag, (void*)&startTime};
    qt_metacall(QMetaObject::InvokeMetaMethod, 78, _a);
}

inline void IShellUIHelper6::msScheduledTileNotification(const QString& bstrNotificationXml, const QString& bstrNotificationId, const QString& bstrNotificationTag, const QVariant& startTime, const QVariant& expirationTime)
{
    void *_a[] = {0, (void*)&bstrNotificationXml, (void*)&bstrNotificationId, (void*)&bstrNotificationTag, (void*)&startTime, (void*)&expirationTime};
    qt_metacall(QMetaObject::InvokeMetaMethod, 79, _a);
}

inline void IShellUIHelper6::msSiteModeActivate()
{
    void *_a[] = {0};
    qt_metacall(QMetaObject::InvokeMetaMethod, 80, _a);
}

inline QVariant IShellUIHelper6::msSiteModeAddButtonStyle(const QVariant& uiButtonID, const QString& bstrIconURL, const QString& bstrTooltip)
{
    QVariant qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&uiButtonID, (void*)&bstrIconURL, (void*)&bstrTooltip};
    qt_metacall(QMetaObject::InvokeMetaMethod, 81, _a);
    return qax_result;
}

inline void IShellUIHelper6::msSiteModeAddJumpListItem(const QString& bstrName, const QString& bstrActionUri, const QString& bstrIconUri)
{
    void *_a[] = {0, (void*)&bstrName, (void*)&bstrActionUri, (void*)&bstrIconUri};
    qt_metacall(QMetaObject::InvokeMetaMethod, 82, _a);
}

inline void IShellUIHelper6::msSiteModeAddJumpListItem(const QString& bstrName, const QString& bstrActionUri, const QString& bstrIconUri, QVariant& pvarWindowType)
{
    void *_a[] = {0, (void*)&bstrName, (void*)&bstrActionUri, (void*)&bstrIconUri, (void*)&pvarWindowType};
    qt_metacall(QMetaObject::InvokeMetaMethod, 83, _a);
}

inline QVariant IShellUIHelper6::msSiteModeAddThumbBarButton(const QString& bstrIconURL, const QString& bstrTooltip)
{
    QVariant qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&bstrIconURL, (void*)&bstrTooltip};
    qt_metacall(QMetaObject::InvokeMetaMethod, 84, _a);
    return qax_result;
}

inline void IShellUIHelper6::msSiteModeClearBadge()
{
    void *_a[] = {0};
    qt_metacall(QMetaObject::InvokeMetaMethod, 85, _a);
}

inline void IShellUIHelper6::msSiteModeClearIconOverlay()
{
    void *_a[] = {0};
    qt_metacall(QMetaObject::InvokeMetaMethod, 86, _a);
}

inline void IShellUIHelper6::msSiteModeClearJumpList()
{
    void *_a[] = {0};
    qt_metacall(QMetaObject::InvokeMetaMethod, 87, _a);
}

inline void IShellUIHelper6::msSiteModeCreateJumpList(const QString& bstrHeader)
{
    void *_a[] = {0, (void*)&bstrHeader};
    qt_metacall(QMetaObject::InvokeMetaMethod, 88, _a);
}

inline void IShellUIHelper6::msSiteModeRefreshBadge()
{
    void *_a[] = {0};
    qt_metacall(QMetaObject::InvokeMetaMethod, 89, _a);
}

inline void IShellUIHelper6::msSiteModeSetIconOverlay(const QString& IconUrl)
{
    void *_a[] = {0, (void*)&IconUrl};
    qt_metacall(QMetaObject::InvokeMetaMethod, 90, _a);
}

inline void IShellUIHelper6::msSiteModeSetIconOverlay(const QString& IconUrl, QVariant& pvarDescription)
{
    void *_a[] = {0, (void*)&IconUrl, (void*)&pvarDescription};
    qt_metacall(QMetaObject::InvokeMetaMethod, 91, _a);
}

inline void IShellUIHelper6::msSiteModeShowButtonStyle(const QVariant& uiButtonID, const QVariant& uiStyleID)
{
    void *_a[] = {0, (void*)&uiButtonID, (void*)&uiStyleID};
    qt_metacall(QMetaObject::InvokeMetaMethod, 92, _a);
}

inline void IShellUIHelper6::msSiteModeShowJumpList()
{
    void *_a[] = {0};
    qt_metacall(QMetaObject::InvokeMetaMethod, 93, _a);
}

inline void IShellUIHelper6::msSiteModeShowThumbBar()
{
    void *_a[] = {0};
    qt_metacall(QMetaObject::InvokeMetaMethod, 94, _a);
}

inline void IShellUIHelper6::msSiteModeUpdateThumbBarButton(const QVariant& ButtonID, bool fEnabled, bool fVisible)
{
    void *_a[] = {0, (void*)&ButtonID, (void*)&fEnabled, (void*)&fVisible};
    qt_metacall(QMetaObject::InvokeMetaMethod, 95, _a);
}

inline void IShellUIHelper6::msStartPeriodicBadgeUpdate(const QString& pollingUri)
{
    void *_a[] = {0, (void*)&pollingUri};
    qt_metacall(QMetaObject::InvokeMetaMethod, 96, _a);
}

inline void IShellUIHelper6::msStartPeriodicBadgeUpdate(const QString& pollingUri, const QVariant& startTime)
{
    void *_a[] = {0, (void*)&pollingUri, (void*)&startTime};
    qt_metacall(QMetaObject::InvokeMetaMethod, 97, _a);
}

inline void IShellUIHelper6::msStartPeriodicBadgeUpdate(const QString& pollingUri, const QVariant& startTime, const QVariant& uiUpdateRecurrence)
{
    void *_a[] = {0, (void*)&pollingUri, (void*)&startTime, (void*)&uiUpdateRecurrence};
    qt_metacall(QMetaObject::InvokeMetaMethod, 98, _a);
}

inline void IShellUIHelper6::msStartPeriodicTileUpdate(const QVariant& pollingUris)
{
    void *_a[] = {0, (void*)&pollingUris};
    qt_metacall(QMetaObject::InvokeMetaMethod, 99, _a);
}

inline void IShellUIHelper6::msStartPeriodicTileUpdate(const QVariant& pollingUris, const QVariant& startTime)
{
    void *_a[] = {0, (void*)&pollingUris, (void*)&startTime};
    qt_metacall(QMetaObject::InvokeMetaMethod, 100, _a);
}

inline void IShellUIHelper6::msStartPeriodicTileUpdate(const QVariant& pollingUris, const QVariant& startTime, const QVariant& uiUpdateRecurrence)
{
    void *_a[] = {0, (void*)&pollingUris, (void*)&startTime, (void*)&uiUpdateRecurrence};
    qt_metacall(QMetaObject::InvokeMetaMethod, 101, _a);
}

inline void IShellUIHelper6::msStartPeriodicTileUpdateBatch(const QVariant& pollingUris)
{
    void *_a[] = {0, (void*)&pollingUris};
    qt_metacall(QMetaObject::InvokeMetaMethod, 102, _a);
}

inline void IShellUIHelper6::msStartPeriodicTileUpdateBatch(const QVariant& pollingUris, const QVariant& startTime)
{
    void *_a[] = {0, (void*)&pollingUris, (void*)&startTime};
    qt_metacall(QMetaObject::InvokeMetaMethod, 103, _a);
}

inline void IShellUIHelper6::msStartPeriodicTileUpdateBatch(const QVariant& pollingUris, const QVariant& startTime, const QVariant& uiUpdateRecurrence)
{
    void *_a[] = {0, (void*)&pollingUris, (void*)&startTime, (void*)&uiUpdateRecurrence};
    qt_metacall(QMetaObject::InvokeMetaMethod, 104, _a);
}

inline void IShellUIHelper6::msStopPeriodicBadgeUpdate()
{
    void *_a[] = {0};
    qt_metacall(QMetaObject::InvokeMetaMethod, 105, _a);
}

inline void IShellUIHelper6::msStopPeriodicTileUpdate()
{
    void *_a[] = {0};
    qt_metacall(QMetaObject::InvokeMetaMethod, 106, _a);
}

inline bool IShellUIHelper6::msTrackingProtectionEnabled()
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result};
    qt_metacall(QMetaObject::InvokeMetaMethod, 107, _a);
    return qax_result;
}


inline void ShellUIHelper::AddChannel(const QString& URL)
{
    void *_a[] = {0, (void*)&URL};
    qt_metacall(QMetaObject::InvokeMetaMethod, 8, _a);
}

inline void ShellUIHelper::AddDesktopComponent(const QString& URL, const QString& Type)
{
    void *_a[] = {0, (void*)&URL, (void*)&Type};
    qt_metacall(QMetaObject::InvokeMetaMethod, 9, _a);
}

inline void ShellUIHelper::AddDesktopComponent(const QString& URL, const QString& Type, QVariant& Left)
{
    void *_a[] = {0, (void*)&URL, (void*)&Type, (void*)&Left};
    qt_metacall(QMetaObject::InvokeMetaMethod, 10, _a);
}

inline void ShellUIHelper::AddDesktopComponent(const QString& URL, const QString& Type, QVariant& Left, QVariant& Top)
{
    void *_a[] = {0, (void*)&URL, (void*)&Type, (void*)&Left, (void*)&Top};
    qt_metacall(QMetaObject::InvokeMetaMethod, 11, _a);
}

inline void ShellUIHelper::AddDesktopComponent(const QString& URL, const QString& Type, QVariant& Left, QVariant& Top, QVariant& Width)
{
    void *_a[] = {0, (void*)&URL, (void*)&Type, (void*)&Left, (void*)&Top, (void*)&Width};
    qt_metacall(QMetaObject::InvokeMetaMethod, 12, _a);
}

inline void ShellUIHelper::AddDesktopComponent(const QString& URL, const QString& Type, QVariant& Left, QVariant& Top, QVariant& Width, QVariant& Height)
{
    void *_a[] = {0, (void*)&URL, (void*)&Type, (void*)&Left, (void*)&Top, (void*)&Width, (void*)&Height};
    qt_metacall(QMetaObject::InvokeMetaMethod, 13, _a);
}

inline void ShellUIHelper::AddFavorite(const QString& URL)
{
    void *_a[] = {0, (void*)&URL};
    qt_metacall(QMetaObject::InvokeMetaMethod, 14, _a);
}

inline void ShellUIHelper::AddFavorite(const QString& URL, QVariant& Title)
{
    void *_a[] = {0, (void*)&URL, (void*)&Title};
    qt_metacall(QMetaObject::InvokeMetaMethod, 15, _a);
}

inline void ShellUIHelper::AddSearchProvider(const QString& URL)
{
    void *_a[] = {0, (void*)&URL};
    qt_metacall(QMetaObject::InvokeMetaMethod, 16, _a);
}

inline void ShellUIHelper::AddService(const QString& URL)
{
    void *_a[] = {0, (void*)&URL};
    qt_metacall(QMetaObject::InvokeMetaMethod, 17, _a);
}

inline void ShellUIHelper::AddToFavoritesBar(const QString& URL, const QString& Title)
{
    void *_a[] = {0, (void*)&URL, (void*)&Title};
    qt_metacall(QMetaObject::InvokeMetaMethod, 18, _a);
}

inline void ShellUIHelper::AddToFavoritesBar(const QString& URL, const QString& Title, QVariant& Type)
{
    void *_a[] = {0, (void*)&URL, (void*)&Title, (void*)&Type};
    qt_metacall(QMetaObject::InvokeMetaMethod, 19, _a);
}

inline void ShellUIHelper::AutoCompleteAttach()
{
    void *_a[] = {0};
    qt_metacall(QMetaObject::InvokeMetaMethod, 20, _a);
}

inline void ShellUIHelper::AutoCompleteAttach(QVariant& Reserved)
{
    void *_a[] = {0, (void*)&Reserved};
    qt_metacall(QMetaObject::InvokeMetaMethod, 21, _a);
}

inline void ShellUIHelper::AutoCompleteSaveForm()
{
    void *_a[] = {0};
    qt_metacall(QMetaObject::InvokeMetaMethod, 22, _a);
}

inline void ShellUIHelper::AutoCompleteSaveForm(QVariant& Form)
{
    void *_a[] = {0, (void*)&Form};
    qt_metacall(QMetaObject::InvokeMetaMethod, 23, _a);
}

inline void ShellUIHelper::AutoScan(const QString& strSearch, const QString& strFailureUrl)
{
    void *_a[] = {0, (void*)&strSearch, (void*)&strFailureUrl};
    qt_metacall(QMetaObject::InvokeMetaMethod, 24, _a);
}

inline void ShellUIHelper::AutoScan(const QString& strSearch, const QString& strFailureUrl, QVariant& pvarTargetFrame)
{
    void *_a[] = {0, (void*)&strSearch, (void*)&strFailureUrl, (void*)&pvarTargetFrame};
    qt_metacall(QMetaObject::InvokeMetaMethod, 25, _a);
}

inline QString ShellUIHelper::BrandImageUri()
{
    QString qax_result;
    void *_a[] = {(void*)&qax_result};
    qt_metacall(QMetaObject::InvokeMetaMethod, 26, _a);
    return qax_result;
}

inline void ShellUIHelper::BuildNewTabPage()
{
    void *_a[] = {0};
    qt_metacall(QMetaObject::InvokeMetaMethod, 27, _a);
}

inline void ShellUIHelper::ContentDiscoveryReset()
{
    void *_a[] = {0};
    qt_metacall(QMetaObject::InvokeMetaMethod, 28, _a);
}

inline void ShellUIHelper::CustomizeClearType(bool fSet)
{
    void *_a[] = {0, (void*)&fSet};
    qt_metacall(QMetaObject::InvokeMetaMethod, 29, _a);
}

inline void ShellUIHelper::CustomizeSettings(bool fSQM, bool fPhishing, const QString& bstrLocale)
{
    void *_a[] = {0, (void*)&fSQM, (void*)&fPhishing, (void*)&bstrLocale};
    qt_metacall(QMetaObject::InvokeMetaMethod, 30, _a);
}

inline QString ShellUIHelper::DefaultSearchProvider()
{
    QString qax_result;
    void *_a[] = {(void*)&qax_result};
    qt_metacall(QMetaObject::InvokeMetaMethod, 31, _a);
    return qax_result;
}

inline void ShellUIHelper::DiagnoseConnection()
{
    void *_a[] = {0};
    qt_metacall(QMetaObject::InvokeMetaMethod, 32, _a);
}

inline void ShellUIHelper::EnableSuggestedSites(bool fEnable)
{
    void *_a[] = {0, (void*)&fEnable};
    qt_metacall(QMetaObject::InvokeMetaMethod, 33, _a);
}

inline void ShellUIHelper::ImportExportFavorites(bool fImport, const QString& strImpExpPath)
{
    void *_a[] = {0, (void*)&fImport, (void*)&strImpExpPath};
    qt_metacall(QMetaObject::InvokeMetaMethod, 34, _a);
}

inline bool ShellUIHelper::InPrivateFilteringEnabled()
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result};
    qt_metacall(QMetaObject::InvokeMetaMethod, 35, _a);
    return qax_result;
}

inline bool ShellUIHelper::IsSearchMigrated()
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result};
    qt_metacall(QMetaObject::InvokeMetaMethod, 36, _a);
    return qax_result;
}

inline uint ShellUIHelper::IsSearchProviderInstalled(const QString& URL)
{
    uint qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&URL};
    qt_metacall(QMetaObject::InvokeMetaMethod, 37, _a);
    return qax_result;
}

inline uint ShellUIHelper::IsServiceInstalled(const QString& URL, const QString& Verb)
{
    uint qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&URL, (void*)&Verb};
    qt_metacall(QMetaObject::InvokeMetaMethod, 38, _a);
    return qax_result;
}

inline bool ShellUIHelper::IsSubscribed(const QString& URL)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&URL};
    qt_metacall(QMetaObject::InvokeMetaMethod, 39, _a);
    return qax_result;
}

inline bool ShellUIHelper::IsSuggestedSitesEnabled()
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result};
    qt_metacall(QMetaObject::InvokeMetaMethod, 40, _a);
    return qax_result;
}

inline void ShellUIHelper::NavigateAndFind(const QString& URL, const QString& strQuery, QVariant& varTargetFrame)
{
    void *_a[] = {0, (void*)&URL, (void*)&strQuery, (void*)&varTargetFrame};
    qt_metacall(QMetaObject::InvokeMetaMethod, 41, _a);
}

inline void ShellUIHelper::NavigateToSuggestedSites(const QString& bstrRelativeUrl)
{
    void *_a[] = {0, (void*)&bstrRelativeUrl};
    qt_metacall(QMetaObject::InvokeMetaMethod, 42, _a);
}

inline bool ShellUIHelper::PhishingEnabled()
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result};
    qt_metacall(QMetaObject::InvokeMetaMethod, 43, _a);
    return qax_result;
}

inline void ShellUIHelper::RefreshOfflineDesktop()
{
    void *_a[] = {0};
    qt_metacall(QMetaObject::InvokeMetaMethod, 44, _a);
}

inline void ShellUIHelper::ResetFirstBootMode()
{
    void *_a[] = {0};
    qt_metacall(QMetaObject::InvokeMetaMethod, 45, _a);
}

inline void ShellUIHelper::ResetSafeMode()
{
    void *_a[] = {0};
    qt_metacall(QMetaObject::InvokeMetaMethod, 46, _a);
}

inline bool ShellUIHelper::RunOnceHasShown()
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result};
    qt_metacall(QMetaObject::InvokeMetaMethod, 47, _a);
    return qax_result;
}

inline void ShellUIHelper::RunOnceRequiredSettingsComplete(bool fComplete)
{
    void *_a[] = {0, (void*)&fComplete};
    qt_metacall(QMetaObject::InvokeMetaMethod, 48, _a);
}

inline void ShellUIHelper::RunOnceShown()
{
    void *_a[] = {0};
    qt_metacall(QMetaObject::InvokeMetaMethod, 49, _a);
}

inline QString ShellUIHelper::SearchGuideUrl()
{
    QString qax_result;
    void *_a[] = {(void*)&qax_result};
    qt_metacall(QMetaObject::InvokeMetaMethod, 50, _a);
    return qax_result;
}

inline void ShellUIHelper::SetActivitiesVisible(bool fVisible)
{
    void *_a[] = {0, (void*)&fVisible};
    qt_metacall(QMetaObject::InvokeMetaMethod, 51, _a);
}

inline void ShellUIHelper::SetRecentlyClosedVisible(bool fVisible)
{
    void *_a[] = {0, (void*)&fVisible};
    qt_metacall(QMetaObject::InvokeMetaMethod, 52, _a);
}

inline QVariant ShellUIHelper::ShowBrowserUI(const QString& bstrName, QVariant& pvarIn)
{
    QVariant qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&bstrName, (void*)&pvarIn};
    qt_metacall(QMetaObject::InvokeMetaMethod, 53, _a);
    return qax_result;
}

inline void ShellUIHelper::ShowInPrivateHelp()
{
    void *_a[] = {0};
    qt_metacall(QMetaObject::InvokeMetaMethod, 54, _a);
}

inline void ShellUIHelper::ShowTabsHelp()
{
    void *_a[] = {0};
    qt_metacall(QMetaObject::InvokeMetaMethod, 55, _a);
}

inline void ShellUIHelper::SkipRunOnce()
{
    void *_a[] = {0};
    qt_metacall(QMetaObject::InvokeMetaMethod, 56, _a);
}

inline void ShellUIHelper::SkipTabsWelcome()
{
    void *_a[] = {0};
    qt_metacall(QMetaObject::InvokeMetaMethod, 57, _a);
}

inline bool ShellUIHelper::SqmEnabled()
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result};
    qt_metacall(QMetaObject::InvokeMetaMethod, 58, _a);
    return qax_result;
}

inline bool ShellUIHelper::msActiveXFilteringEnabled()
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result};
    qt_metacall(QMetaObject::InvokeMetaMethod, 59, _a);
    return qax_result;
}

inline void ShellUIHelper::msAddSiteMode()
{
    void *_a[] = {0};
    qt_metacall(QMetaObject::InvokeMetaMethod, 60, _a);
}

inline void ShellUIHelper::msAddTrackingProtectionList(const QString& URL, const QString& bstrFilterName)
{
    void *_a[] = {0, (void*)&URL, (void*)&bstrFilterName};
    qt_metacall(QMetaObject::InvokeMetaMethod, 61, _a);
}

inline void ShellUIHelper::msChangeDefaultBrowser(bool fChange)
{
    void *_a[] = {0, (void*)&fChange};
    qt_metacall(QMetaObject::InvokeMetaMethod, 62, _a);
}

inline void ShellUIHelper::msClearTile()
{
    void *_a[] = {0};
    qt_metacall(QMetaObject::InvokeMetaMethod, 63, _a);
}

inline void ShellUIHelper::msDiagnoseConnectionUILess()
{
    void *_a[] = {0};
    qt_metacall(QMetaObject::InvokeMetaMethod, 64, _a);
}

inline void ShellUIHelper::msEnableTileNotificationQueue(bool fChange)
{
    void *_a[] = {0, (void*)&fChange};
    qt_metacall(QMetaObject::InvokeMetaMethod, 65, _a);
}

inline void ShellUIHelper::msEnableTileNotificationQueueForSquare150x150(bool fChange)
{
    void *_a[] = {0, (void*)&fChange};
    qt_metacall(QMetaObject::InvokeMetaMethod, 66, _a);
}

inline void ShellUIHelper::msEnableTileNotificationQueueForSquare310x310(bool fChange)
{
    void *_a[] = {0, (void*)&fChange};
    qt_metacall(QMetaObject::InvokeMetaMethod, 67, _a);
}

inline void ShellUIHelper::msEnableTileNotificationQueueForWide310x150(bool fChange)
{
    void *_a[] = {0, (void*)&fChange};
    qt_metacall(QMetaObject::InvokeMetaMethod, 68, _a);
}

inline bool ShellUIHelper::msIsSiteMode()
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result};
    qt_metacall(QMetaObject::InvokeMetaMethod, 69, _a);
    return qax_result;
}

inline QVariant ShellUIHelper::msIsSiteModeFirstRun(bool fPreserveState)
{
    QVariant qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&fPreserveState};
    qt_metacall(QMetaObject::InvokeMetaMethod, 70, _a);
    return qax_result;
}

inline void ShellUIHelper::msLaunchInternetOptions()
{
    void *_a[] = {0};
    qt_metacall(QMetaObject::InvokeMetaMethod, 71, _a);
}

inline void ShellUIHelper::msLaunchNetworkClientHelp()
{
    void *_a[] = {0};
    qt_metacall(QMetaObject::InvokeMetaMethod, 72, _a);
}

inline QVariant ShellUIHelper::msPinnedSiteState()
{
    QVariant qax_result;
    void *_a[] = {(void*)&qax_result};
    qt_metacall(QMetaObject::InvokeMetaMethod, 73, _a);
    return qax_result;
}

inline QVariant ShellUIHelper::msProvisionNetworks(const QString& bstrProvisioningXml)
{
    QVariant qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&bstrProvisioningXml};
    qt_metacall(QMetaObject::InvokeMetaMethod, 74, _a);
    return qax_result;
}

inline void ShellUIHelper::msRemoveScheduledTileNotification(const QString& bstrNotificationId)
{
    void *_a[] = {0, (void*)&bstrNotificationId};
    qt_metacall(QMetaObject::InvokeMetaMethod, 75, _a);
}

inline void ShellUIHelper::msReportSafeUrl()
{
    void *_a[] = {0};
    qt_metacall(QMetaObject::InvokeMetaMethod, 76, _a);
}

inline void ShellUIHelper::msScheduledTileNotification(const QString& bstrNotificationXml, const QString& bstrNotificationId, const QString& bstrNotificationTag)
{
    void *_a[] = {0, (void*)&bstrNotificationXml, (void*)&bstrNotificationId, (void*)&bstrNotificationTag};
    qt_metacall(QMetaObject::InvokeMetaMethod, 77, _a);
}

inline void ShellUIHelper::msScheduledTileNotification(const QString& bstrNotificationXml, const QString& bstrNotificationId, const QString& bstrNotificationTag, const QVariant& startTime)
{
    void *_a[] = {0, (void*)&bstrNotificationXml, (void*)&bstrNotificationId, (void*)&bstrNotificationTag, (void*)&startTime};
    qt_metacall(QMetaObject::InvokeMetaMethod, 78, _a);
}

inline void ShellUIHelper::msScheduledTileNotification(const QString& bstrNotificationXml, const QString& bstrNotificationId, const QString& bstrNotificationTag, const QVariant& startTime, const QVariant& expirationTime)
{
    void *_a[] = {0, (void*)&bstrNotificationXml, (void*)&bstrNotificationId, (void*)&bstrNotificationTag, (void*)&startTime, (void*)&expirationTime};
    qt_metacall(QMetaObject::InvokeMetaMethod, 79, _a);
}

inline void ShellUIHelper::msSiteModeActivate()
{
    void *_a[] = {0};
    qt_metacall(QMetaObject::InvokeMetaMethod, 80, _a);
}

inline QVariant ShellUIHelper::msSiteModeAddButtonStyle(const QVariant& uiButtonID, const QString& bstrIconURL, const QString& bstrTooltip)
{
    QVariant qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&uiButtonID, (void*)&bstrIconURL, (void*)&bstrTooltip};
    qt_metacall(QMetaObject::InvokeMetaMethod, 81, _a);
    return qax_result;
}

inline void ShellUIHelper::msSiteModeAddJumpListItem(const QString& bstrName, const QString& bstrActionUri, const QString& bstrIconUri)
{
    void *_a[] = {0, (void*)&bstrName, (void*)&bstrActionUri, (void*)&bstrIconUri};
    qt_metacall(QMetaObject::InvokeMetaMethod, 82, _a);
}

inline void ShellUIHelper::msSiteModeAddJumpListItem(const QString& bstrName, const QString& bstrActionUri, const QString& bstrIconUri, QVariant& pvarWindowType)
{
    void *_a[] = {0, (void*)&bstrName, (void*)&bstrActionUri, (void*)&bstrIconUri, (void*)&pvarWindowType};
    qt_metacall(QMetaObject::InvokeMetaMethod, 83, _a);
}

inline QVariant ShellUIHelper::msSiteModeAddThumbBarButton(const QString& bstrIconURL, const QString& bstrTooltip)
{
    QVariant qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&bstrIconURL, (void*)&bstrTooltip};
    qt_metacall(QMetaObject::InvokeMetaMethod, 84, _a);
    return qax_result;
}

inline void ShellUIHelper::msSiteModeClearBadge()
{
    void *_a[] = {0};
    qt_metacall(QMetaObject::InvokeMetaMethod, 85, _a);
}

inline void ShellUIHelper::msSiteModeClearIconOverlay()
{
    void *_a[] = {0};
    qt_metacall(QMetaObject::InvokeMetaMethod, 86, _a);
}

inline void ShellUIHelper::msSiteModeClearJumpList()
{
    void *_a[] = {0};
    qt_metacall(QMetaObject::InvokeMetaMethod, 87, _a);
}

inline void ShellUIHelper::msSiteModeCreateJumpList(const QString& bstrHeader)
{
    void *_a[] = {0, (void*)&bstrHeader};
    qt_metacall(QMetaObject::InvokeMetaMethod, 88, _a);
}

inline void ShellUIHelper::msSiteModeRefreshBadge()
{
    void *_a[] = {0};
    qt_metacall(QMetaObject::InvokeMetaMethod, 89, _a);
}

inline void ShellUIHelper::msSiteModeSetIconOverlay(const QString& IconUrl)
{
    void *_a[] = {0, (void*)&IconUrl};
    qt_metacall(QMetaObject::InvokeMetaMethod, 90, _a);
}

inline void ShellUIHelper::msSiteModeSetIconOverlay(const QString& IconUrl, QVariant& pvarDescription)
{
    void *_a[] = {0, (void*)&IconUrl, (void*)&pvarDescription};
    qt_metacall(QMetaObject::InvokeMetaMethod, 91, _a);
}

inline void ShellUIHelper::msSiteModeShowButtonStyle(const QVariant& uiButtonID, const QVariant& uiStyleID)
{
    void *_a[] = {0, (void*)&uiButtonID, (void*)&uiStyleID};
    qt_metacall(QMetaObject::InvokeMetaMethod, 92, _a);
}

inline void ShellUIHelper::msSiteModeShowJumpList()
{
    void *_a[] = {0};
    qt_metacall(QMetaObject::InvokeMetaMethod, 93, _a);
}

inline void ShellUIHelper::msSiteModeShowThumbBar()
{
    void *_a[] = {0};
    qt_metacall(QMetaObject::InvokeMetaMethod, 94, _a);
}

inline void ShellUIHelper::msSiteModeUpdateThumbBarButton(const QVariant& ButtonID, bool fEnabled, bool fVisible)
{
    void *_a[] = {0, (void*)&ButtonID, (void*)&fEnabled, (void*)&fVisible};
    qt_metacall(QMetaObject::InvokeMetaMethod, 95, _a);
}

inline void ShellUIHelper::msStartPeriodicBadgeUpdate(const QString& pollingUri)
{
    void *_a[] = {0, (void*)&pollingUri};
    qt_metacall(QMetaObject::InvokeMetaMethod, 96, _a);
}

inline void ShellUIHelper::msStartPeriodicBadgeUpdate(const QString& pollingUri, const QVariant& startTime)
{
    void *_a[] = {0, (void*)&pollingUri, (void*)&startTime};
    qt_metacall(QMetaObject::InvokeMetaMethod, 97, _a);
}

inline void ShellUIHelper::msStartPeriodicBadgeUpdate(const QString& pollingUri, const QVariant& startTime, const QVariant& uiUpdateRecurrence)
{
    void *_a[] = {0, (void*)&pollingUri, (void*)&startTime, (void*)&uiUpdateRecurrence};
    qt_metacall(QMetaObject::InvokeMetaMethod, 98, _a);
}

inline void ShellUIHelper::msStartPeriodicTileUpdate(const QVariant& pollingUris)
{
    void *_a[] = {0, (void*)&pollingUris};
    qt_metacall(QMetaObject::InvokeMetaMethod, 99, _a);
}

inline void ShellUIHelper::msStartPeriodicTileUpdate(const QVariant& pollingUris, const QVariant& startTime)
{
    void *_a[] = {0, (void*)&pollingUris, (void*)&startTime};
    qt_metacall(QMetaObject::InvokeMetaMethod, 100, _a);
}

inline void ShellUIHelper::msStartPeriodicTileUpdate(const QVariant& pollingUris, const QVariant& startTime, const QVariant& uiUpdateRecurrence)
{
    void *_a[] = {0, (void*)&pollingUris, (void*)&startTime, (void*)&uiUpdateRecurrence};
    qt_metacall(QMetaObject::InvokeMetaMethod, 101, _a);
}

inline void ShellUIHelper::msStartPeriodicTileUpdateBatch(const QVariant& pollingUris)
{
    void *_a[] = {0, (void*)&pollingUris};
    qt_metacall(QMetaObject::InvokeMetaMethod, 102, _a);
}

inline void ShellUIHelper::msStartPeriodicTileUpdateBatch(const QVariant& pollingUris, const QVariant& startTime)
{
    void *_a[] = {0, (void*)&pollingUris, (void*)&startTime};
    qt_metacall(QMetaObject::InvokeMetaMethod, 103, _a);
}

inline void ShellUIHelper::msStartPeriodicTileUpdateBatch(const QVariant& pollingUris, const QVariant& startTime, const QVariant& uiUpdateRecurrence)
{
    void *_a[] = {0, (void*)&pollingUris, (void*)&startTime, (void*)&uiUpdateRecurrence};
    qt_metacall(QMetaObject::InvokeMetaMethod, 104, _a);
}

inline void ShellUIHelper::msStopPeriodicBadgeUpdate()
{
    void *_a[] = {0};
    qt_metacall(QMetaObject::InvokeMetaMethod, 105, _a);
}

inline void ShellUIHelper::msStopPeriodicTileUpdate()
{
    void *_a[] = {0};
    qt_metacall(QMetaObject::InvokeMetaMethod, 106, _a);
}

inline bool ShellUIHelper::msTrackingProtectionEnabled()
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result};
    qt_metacall(QMetaObject::InvokeMetaMethod, 107, _a);
    return qax_result;
}


inline bool IShellFavoritesNameSpace::SubscriptionsEnabled() const
{
    QVariant qax_result = property("SubscriptionsEnabled");
    Q_ASSERT(qax_result.isValid());
    return *(bool*)qax_result.constData();
}

inline bool IShellFavoritesNameSpace::CreateSubscriptionForSelection()
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result};
    qt_metacall(QMetaObject::InvokeMetaMethod, 8, _a);
    return qax_result;
}

inline bool IShellFavoritesNameSpace::DeleteSubscriptionForSelection()
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result};
    qt_metacall(QMetaObject::InvokeMetaMethod, 9, _a);
    return qax_result;
}

inline void IShellFavoritesNameSpace::Export()
{
    void *_a[] = {0};
    qt_metacall(QMetaObject::InvokeMetaMethod, 10, _a);
}

inline void IShellFavoritesNameSpace::Import()
{
    void *_a[] = {0};
    qt_metacall(QMetaObject::InvokeMetaMethod, 11, _a);
}

inline void IShellFavoritesNameSpace::InvokeContextMenuCommand(const QString& strCommand)
{
    void *_a[] = {0, (void*)&strCommand};
    qt_metacall(QMetaObject::InvokeMetaMethod, 12, _a);
}

inline void IShellFavoritesNameSpace::MoveSelectionDown()
{
    void *_a[] = {0};
    qt_metacall(QMetaObject::InvokeMetaMethod, 13, _a);
}

inline void IShellFavoritesNameSpace::MoveSelectionTo()
{
    void *_a[] = {0};
    qt_metacall(QMetaObject::InvokeMetaMethod, 14, _a);
}

inline void IShellFavoritesNameSpace::MoveSelectionUp()
{
    void *_a[] = {0};
    qt_metacall(QMetaObject::InvokeMetaMethod, 15, _a);
}

inline void IShellFavoritesNameSpace::NewFolder()
{
    void *_a[] = {0};
    qt_metacall(QMetaObject::InvokeMetaMethod, 16, _a);
}

inline void IShellFavoritesNameSpace::ResetSort()
{
    void *_a[] = {0};
    qt_metacall(QMetaObject::InvokeMetaMethod, 17, _a);
}

inline void IShellFavoritesNameSpace::SetRoot(const QString& bstrFullPath)
{
    void *_a[] = {0, (void*)&bstrFullPath};
    qt_metacall(QMetaObject::InvokeMetaMethod, 18, _a);
}

inline void IShellFavoritesNameSpace::Synchronize()
{
    void *_a[] = {0};
    qt_metacall(QMetaObject::InvokeMetaMethod, 19, _a);
}


inline QString IShellNameSpace::Columns() const
{
    QVariant qax_result = property("Columns");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}
inline void IShellNameSpace::SetColumns(const QString& value){ setProperty("Columns", QVariant(value)); }

inline int IShellNameSpace::CountViewTypes() const
{
    QVariant qax_result = property("CountViewTypes");
    Q_ASSERT(qax_result.isValid());
    return *(int*)qax_result.constData();
}

inline int IShellNameSpace::Depth() const
{
    QVariant qax_result = property("Depth");
    Q_ASSERT(qax_result.isValid());
    return *(int*)qax_result.constData();
}
inline void IShellNameSpace::SetDepth(int value){ setProperty("Depth", QVariant(value)); }

inline int IShellNameSpace::EnumOptions() const
{
    QVariant qax_result = property("EnumOptions");
    Q_ASSERT(qax_result.isValid());
    return *(int*)qax_result.constData();
}
inline void IShellNameSpace::SetEnumOptions(int value){ setProperty("EnumOptions", QVariant(value)); }

inline uint IShellNameSpace::Flags() const
{
    QVariant qax_result = property("Flags");
    Q_ASSERT(qax_result.isValid());
    return *(uint*)qax_result.constData();
}
inline void IShellNameSpace::SetFlags(uint value){ setProperty("Flags", QVariant(value)); }

inline uint IShellNameSpace::Mode() const
{
    QVariant qax_result = property("Mode");
    Q_ASSERT(qax_result.isValid());
    return *(uint*)qax_result.constData();
}
inline void IShellNameSpace::SetMode(uint value){ setProperty("Mode", QVariant(value)); }

inline QVariant IShellNameSpace::Root() const
{
    QVariant qax_result = property("Root");
    Q_ASSERT(qax_result.isValid());
    return *(QVariant*)qax_result.constData();
}
inline void IShellNameSpace::SetRoot(const QVariant& value){ setProperty("Root", QVariant(value)); }

inline IDispatch* IShellNameSpace::SelectedItem() const
{
    QVariant qax_result = property("SelectedItem");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
    return *(IDispatch**)qax_result.constData();
}
inline void IShellNameSpace::SetSelectedItem(IDispatch* value){
    int typeId = qRegisterMetaType<IDispatch*>("IDispatch*", &value);
    setProperty("SelectedItem", QVariant(typeId, &value));
}

inline bool IShellNameSpace::SubscriptionsEnabled() const
{
    QVariant qax_result = property("SubscriptionsEnabled");
    Q_ASSERT(qax_result.isValid());
    return *(bool*)qax_result.constData();
}

inline uint IShellNameSpace::TVFlags() const
{
    QVariant qax_result = property("TVFlags");
    Q_ASSERT(qax_result.isValid());
    return *(uint*)qax_result.constData();
}
inline void IShellNameSpace::SetTVFlags(uint value){ setProperty("TVFlags", QVariant(value)); }

inline bool IShellNameSpace::CreateSubscriptionForSelection()
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result};
    qt_metacall(QMetaObject::InvokeMetaMethod, 8, _a);
    return qax_result;
}

inline bool IShellNameSpace::DeleteSubscriptionForSelection()
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result};
    qt_metacall(QMetaObject::InvokeMetaMethod, 9, _a);
    return qax_result;
}

inline void IShellNameSpace::Expand(const QVariant& var, int iDepth)
{
    void *_a[] = {0, (void*)&var, (void*)&iDepth};
    qt_metacall(QMetaObject::InvokeMetaMethod, 10, _a);
}

inline void IShellNameSpace::Export()
{
    void *_a[] = {0};
    qt_metacall(QMetaObject::InvokeMetaMethod, 11, _a);
}

inline void IShellNameSpace::Import()
{
    void *_a[] = {0};
    qt_metacall(QMetaObject::InvokeMetaMethod, 12, _a);
}

inline void IShellNameSpace::InvokeContextMenuCommand(const QString& strCommand)
{
    void *_a[] = {0, (void*)&strCommand};
    qt_metacall(QMetaObject::InvokeMetaMethod, 13, _a);
}

inline void IShellNameSpace::MoveSelectionDown()
{
    void *_a[] = {0};
    qt_metacall(QMetaObject::InvokeMetaMethod, 14, _a);
}

inline void IShellNameSpace::MoveSelectionTo()
{
    void *_a[] = {0};
    qt_metacall(QMetaObject::InvokeMetaMethod, 15, _a);
}

inline void IShellNameSpace::MoveSelectionUp()
{
    void *_a[] = {0};
    qt_metacall(QMetaObject::InvokeMetaMethod, 16, _a);
}

inline void IShellNameSpace::NewFolder()
{
    void *_a[] = {0};
    qt_metacall(QMetaObject::InvokeMetaMethod, 17, _a);
}

inline void IShellNameSpace::ResetSort()
{
    void *_a[] = {0};
    qt_metacall(QMetaObject::InvokeMetaMethod, 18, _a);
}

inline IDispatch* IShellNameSpace::SelectedItems()
{
    IDispatch* qax_result = 0;
    void *_a[] = {(void*)&qax_result};
    qt_metacall(QMetaObject::InvokeMetaMethod, 19, _a);
    return qax_result;
}

inline void IShellNameSpace::SetViewType(int iType)
{
    void *_a[] = {0, (void*)&iType};
    qt_metacall(QMetaObject::InvokeMetaMethod, 29, _a);
}

inline void IShellNameSpace::Synchronize()
{
    void *_a[] = {0};
    qt_metacall(QMetaObject::InvokeMetaMethod, 30, _a);
}

inline void IShellNameSpace::UnselectAll()
{
    void *_a[] = {0};
    qt_metacall(QMetaObject::InvokeMetaMethod, 31, _a);
}


inline QString ShellNameSpace::Columns() const
{
    QVariant qax_result = property("Columns");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}
inline void ShellNameSpace::SetColumns(const QString& value){ setProperty("Columns", QVariant(value)); }

inline int ShellNameSpace::CountViewTypes() const
{
    QVariant qax_result = property("CountViewTypes");
    Q_ASSERT(qax_result.isValid());
    return *(int*)qax_result.constData();
}

inline int ShellNameSpace::Depth() const
{
    QVariant qax_result = property("Depth");
    Q_ASSERT(qax_result.isValid());
    return *(int*)qax_result.constData();
}
inline void ShellNameSpace::SetDepth(int value){ setProperty("Depth", QVariant(value)); }

inline int ShellNameSpace::EnumOptions() const
{
    QVariant qax_result = property("EnumOptions");
    Q_ASSERT(qax_result.isValid());
    return *(int*)qax_result.constData();
}
inline void ShellNameSpace::SetEnumOptions(int value){ setProperty("EnumOptions", QVariant(value)); }

inline uint ShellNameSpace::Flags() const
{
    QVariant qax_result = property("Flags");
    Q_ASSERT(qax_result.isValid());
    return *(uint*)qax_result.constData();
}
inline void ShellNameSpace::SetFlags(uint value){ setProperty("Flags", QVariant(value)); }

inline uint ShellNameSpace::Mode() const
{
    QVariant qax_result = property("Mode");
    Q_ASSERT(qax_result.isValid());
    return *(uint*)qax_result.constData();
}
inline void ShellNameSpace::SetMode(uint value){ setProperty("Mode", QVariant(value)); }

inline QVariant ShellNameSpace::Root() const
{
    QVariant qax_result = property("Root");
    Q_ASSERT(qax_result.isValid());
    return *(QVariant*)qax_result.constData();
}
inline void ShellNameSpace::SetRoot(const QVariant& value){ setProperty("Root", QVariant(value)); }

inline IDispatch* ShellNameSpace::SelectedItem() const
{
    QVariant qax_result = property("SelectedItem");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
    return *(IDispatch**)qax_result.constData();
}
inline void ShellNameSpace::SetSelectedItem(IDispatch* value){
    int typeId = qRegisterMetaType<IDispatch*>("IDispatch*", &value);
    setProperty("SelectedItem", QVariant(typeId, &value));
}

inline bool ShellNameSpace::SubscriptionsEnabled() const
{
    QVariant qax_result = property("SubscriptionsEnabled");
    Q_ASSERT(qax_result.isValid());
    return *(bool*)qax_result.constData();
}

inline uint ShellNameSpace::TVFlags() const
{
    QVariant qax_result = property("TVFlags");
    Q_ASSERT(qax_result.isValid());
    return *(uint*)qax_result.constData();
}
inline void ShellNameSpace::SetTVFlags(uint value){ setProperty("TVFlags", QVariant(value)); }

inline bool ShellNameSpace::CreateSubscriptionForSelection()
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result};
    qt_metacall(QMetaObject::InvokeMetaMethod, 12, _a);
    return qax_result;
}

inline bool ShellNameSpace::DeleteSubscriptionForSelection()
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result};
    qt_metacall(QMetaObject::InvokeMetaMethod, 13, _a);
    return qax_result;
}

inline void ShellNameSpace::Expand(const QVariant& var, int iDepth)
{
    void *_a[] = {0, (void*)&var, (void*)&iDepth};
    qt_metacall(QMetaObject::InvokeMetaMethod, 14, _a);
}

inline void ShellNameSpace::Export()
{
    void *_a[] = {0};
    qt_metacall(QMetaObject::InvokeMetaMethod, 15, _a);
}

inline void ShellNameSpace::Import()
{
    void *_a[] = {0};
    qt_metacall(QMetaObject::InvokeMetaMethod, 16, _a);
}

inline void ShellNameSpace::InvokeContextMenuCommand(const QString& strCommand)
{
    void *_a[] = {0, (void*)&strCommand};
    qt_metacall(QMetaObject::InvokeMetaMethod, 17, _a);
}

inline void ShellNameSpace::MoveSelectionDown()
{
    void *_a[] = {0};
    qt_metacall(QMetaObject::InvokeMetaMethod, 18, _a);
}

inline void ShellNameSpace::MoveSelectionTo()
{
    void *_a[] = {0};
    qt_metacall(QMetaObject::InvokeMetaMethod, 19, _a);
}

inline void ShellNameSpace::MoveSelectionUp()
{
    void *_a[] = {0};
    qt_metacall(QMetaObject::InvokeMetaMethod, 20, _a);
}

inline void ShellNameSpace::NewFolder()
{
    void *_a[] = {0};
    qt_metacall(QMetaObject::InvokeMetaMethod, 21, _a);
}

inline void ShellNameSpace::ResetSort()
{
    void *_a[] = {0};
    qt_metacall(QMetaObject::InvokeMetaMethod, 22, _a);
}

inline IDispatch* ShellNameSpace::SelectedItems()
{
    IDispatch* qax_result = 0;
    void *_a[] = {(void*)&qax_result};
    qt_metacall(QMetaObject::InvokeMetaMethod, 23, _a);
    return qax_result;
}

inline void ShellNameSpace::SetViewType(int iType)
{
    void *_a[] = {0, (void*)&iType};
    qt_metacall(QMetaObject::InvokeMetaMethod, 33, _a);
}

inline void ShellNameSpace::Synchronize()
{
    void *_a[] = {0};
    qt_metacall(QMetaObject::InvokeMetaMethod, 34, _a);
}

inline void ShellNameSpace::UnselectAll()
{
    void *_a[] = {0};
    qt_metacall(QMetaObject::InvokeMetaMethod, 35, _a);
}


inline void IScriptErrorList::advanceError()
{
    void *_a[] = {0};
    qt_metacall(QMetaObject::InvokeMetaMethod, 8, _a);
}

inline int IScriptErrorList::canAdvanceError()
{
    int qax_result;
    void *_a[] = {(void*)&qax_result};
    qt_metacall(QMetaObject::InvokeMetaMethod, 9, _a);
    return qax_result;
}

inline int IScriptErrorList::canRetreatError()
{
    int qax_result;
    void *_a[] = {(void*)&qax_result};
    qt_metacall(QMetaObject::InvokeMetaMethod, 10, _a);
    return qax_result;
}

inline int IScriptErrorList::getAlwaysShowLockState()
{
    int qax_result;
    void *_a[] = {(void*)&qax_result};
    qt_metacall(QMetaObject::InvokeMetaMethod, 11, _a);
    return qax_result;
}

inline int IScriptErrorList::getDetailsPaneOpen()
{
    int qax_result;
    void *_a[] = {(void*)&qax_result};
    qt_metacall(QMetaObject::InvokeMetaMethod, 12, _a);
    return qax_result;
}

inline int IScriptErrorList::getErrorChar()
{
    int qax_result;
    void *_a[] = {(void*)&qax_result};
    qt_metacall(QMetaObject::InvokeMetaMethod, 13, _a);
    return qax_result;
}

inline int IScriptErrorList::getErrorCode()
{
    int qax_result;
    void *_a[] = {(void*)&qax_result};
    qt_metacall(QMetaObject::InvokeMetaMethod, 14, _a);
    return qax_result;
}

inline int IScriptErrorList::getErrorLine()
{
    int qax_result;
    void *_a[] = {(void*)&qax_result};
    qt_metacall(QMetaObject::InvokeMetaMethod, 15, _a);
    return qax_result;
}

inline QString IScriptErrorList::getErrorMsg()
{
    QString qax_result;
    void *_a[] = {(void*)&qax_result};
    qt_metacall(QMetaObject::InvokeMetaMethod, 16, _a);
    return qax_result;
}

inline QString IScriptErrorList::getErrorUrl()
{
    QString qax_result;
    void *_a[] = {(void*)&qax_result};
    qt_metacall(QMetaObject::InvokeMetaMethod, 17, _a);
    return qax_result;
}

inline int IScriptErrorList::getPerErrorDisplay()
{
    int qax_result;
    void *_a[] = {(void*)&qax_result};
    qt_metacall(QMetaObject::InvokeMetaMethod, 18, _a);
    return qax_result;
}

inline void IScriptErrorList::retreatError()
{
    void *_a[] = {0};
    qt_metacall(QMetaObject::InvokeMetaMethod, 19, _a);
}

inline void IScriptErrorList::setDetailsPaneOpen(int fDetailsPaneOpen)
{
    void *_a[] = {0, (void*)&fDetailsPaneOpen};
    qt_metacall(QMetaObject::InvokeMetaMethod, 20, _a);
}

inline void IScriptErrorList::setPerErrorDisplay(int fPerErrorDisplay)
{
    void *_a[] = {0, (void*)&fPerErrorDisplay};
    qt_metacall(QMetaObject::InvokeMetaMethod, 21, _a);
}


inline void CScriptErrorList::advanceError()
{
    void *_a[] = {0};
    qt_metacall(QMetaObject::InvokeMetaMethod, 8, _a);
}

inline int CScriptErrorList::canAdvanceError()
{
    int qax_result;
    void *_a[] = {(void*)&qax_result};
    qt_metacall(QMetaObject::InvokeMetaMethod, 9, _a);
    return qax_result;
}

inline int CScriptErrorList::canRetreatError()
{
    int qax_result;
    void *_a[] = {(void*)&qax_result};
    qt_metacall(QMetaObject::InvokeMetaMethod, 10, _a);
    return qax_result;
}

inline int CScriptErrorList::getAlwaysShowLockState()
{
    int qax_result;
    void *_a[] = {(void*)&qax_result};
    qt_metacall(QMetaObject::InvokeMetaMethod, 11, _a);
    return qax_result;
}

inline int CScriptErrorList::getDetailsPaneOpen()
{
    int qax_result;
    void *_a[] = {(void*)&qax_result};
    qt_metacall(QMetaObject::InvokeMetaMethod, 12, _a);
    return qax_result;
}

inline int CScriptErrorList::getErrorChar()
{
    int qax_result;
    void *_a[] = {(void*)&qax_result};
    qt_metacall(QMetaObject::InvokeMetaMethod, 13, _a);
    return qax_result;
}

inline int CScriptErrorList::getErrorCode()
{
    int qax_result;
    void *_a[] = {(void*)&qax_result};
    qt_metacall(QMetaObject::InvokeMetaMethod, 14, _a);
    return qax_result;
}

inline int CScriptErrorList::getErrorLine()
{
    int qax_result;
    void *_a[] = {(void*)&qax_result};
    qt_metacall(QMetaObject::InvokeMetaMethod, 15, _a);
    return qax_result;
}

inline QString CScriptErrorList::getErrorMsg()
{
    QString qax_result;
    void *_a[] = {(void*)&qax_result};
    qt_metacall(QMetaObject::InvokeMetaMethod, 16, _a);
    return qax_result;
}

inline QString CScriptErrorList::getErrorUrl()
{
    QString qax_result;
    void *_a[] = {(void*)&qax_result};
    qt_metacall(QMetaObject::InvokeMetaMethod, 17, _a);
    return qax_result;
}

inline int CScriptErrorList::getPerErrorDisplay()
{
    int qax_result;
    void *_a[] = {(void*)&qax_result};
    qt_metacall(QMetaObject::InvokeMetaMethod, 18, _a);
    return qax_result;
}

inline void CScriptErrorList::retreatError()
{
    void *_a[] = {0};
    qt_metacall(QMetaObject::InvokeMetaMethod, 19, _a);
}

inline void CScriptErrorList::setDetailsPaneOpen(int fDetailsPaneOpen)
{
    void *_a[] = {0, (void*)&fDetailsPaneOpen};
    qt_metacall(QMetaObject::InvokeMetaMethod, 20, _a);
}

inline void CScriptErrorList::setPerErrorDisplay(int fPerErrorDisplay)
{
    void *_a[] = {0, (void*)&fPerErrorDisplay};
    qt_metacall(QMetaObject::InvokeMetaMethod, 21, _a);
}



#endif

}

QT_BEGIN_NAMESPACE

namespace QtMetaTypePrivate {
template<>
struct QMetaTypeFunctionHelper<SHDocVw::IWebBrowser, /* Accepted */ true> {
    static void Delete(void *t) { delete static_cast<SHDocVw::IWebBrowser*>(t); }
    static void *Create(const void *t)
    {
        Q_ASSERT(!t);
        Q_UNUSED(t)
        return new SHDocVw::IWebBrowser();
    }
    static void Destruct(void *t)
    {
        Q_UNUSED(t)
        static_cast<SHDocVw::IWebBrowser*>(t)->SHDocVw::IWebBrowser::~IWebBrowser();
    }
    static void *Construct(void *where, const void *t)
    {
        Q_ASSERT(!t);
        Q_UNUSED(t)
        return new (where) SHDocVw::IWebBrowser;
    }
#ifndef QT_NO_DATASTREAM
    static void Save(QDataStream &stream, const void *t) { stream << *static_cast<const SHDocVw::IWebBrowser*>(t); }
    static void Load(QDataStream &stream, void *t) { stream >> *static_cast<SHDocVw::IWebBrowser*>(t); }
#endif // QT_NO_DATASTREAM
};

template<>
struct QMetaTypeFunctionHelper<SHDocVw::IWebBrowserApp, /* Accepted */ true> {
    static void Delete(void *t) { delete static_cast<SHDocVw::IWebBrowserApp*>(t); }
    static void *Create(const void *t)
    {
        Q_ASSERT(!t);
        Q_UNUSED(t)
        return new SHDocVw::IWebBrowserApp();
    }
    static void Destruct(void *t)
    {
        Q_UNUSED(t)
        static_cast<SHDocVw::IWebBrowserApp*>(t)->SHDocVw::IWebBrowserApp::~IWebBrowserApp();
    }
    static void *Construct(void *where, const void *t)
    {
        Q_ASSERT(!t);
        Q_UNUSED(t)
        return new (where) SHDocVw::IWebBrowserApp;
    }
#ifndef QT_NO_DATASTREAM
    static void Save(QDataStream &stream, const void *t) { stream << *static_cast<const SHDocVw::IWebBrowserApp*>(t); }
    static void Load(QDataStream &stream, void *t) { stream >> *static_cast<SHDocVw::IWebBrowserApp*>(t); }
#endif // QT_NO_DATASTREAM
};

template<>
struct QMetaTypeFunctionHelper<SHDocVw::IWebBrowser2, /* Accepted */ true> {
    static void Delete(void *t) { delete static_cast<SHDocVw::IWebBrowser2*>(t); }
    static void *Create(const void *t)
    {
        Q_ASSERT(!t);
        Q_UNUSED(t)
        return new SHDocVw::IWebBrowser2();
    }
    static void Destruct(void *t)
    {
        Q_UNUSED(t)
        static_cast<SHDocVw::IWebBrowser2*>(t)->SHDocVw::IWebBrowser2::~IWebBrowser2();
    }
    static void *Construct(void *where, const void *t)
    {
        Q_ASSERT(!t);
        Q_UNUSED(t)
        return new (where) SHDocVw::IWebBrowser2;
    }
#ifndef QT_NO_DATASTREAM
    static void Save(QDataStream &stream, const void *t) { stream << *static_cast<const SHDocVw::IWebBrowser2*>(t); }
    static void Load(QDataStream &stream, void *t) { stream >> *static_cast<SHDocVw::IWebBrowser2*>(t); }
#endif // QT_NO_DATASTREAM
};

template<>
struct QMetaTypeFunctionHelper<SHDocVw::WebBrowser_V1, /* Accepted */ true> {
    static void Delete(void *t) { delete static_cast<SHDocVw::WebBrowser_V1*>(t); }
    static void *Create(const void *t)
    {
        Q_ASSERT(!t);
        Q_UNUSED(t)
        return new SHDocVw::WebBrowser_V1();
    }
    static void Destruct(void *t)
    {
        Q_UNUSED(t)
        static_cast<SHDocVw::WebBrowser_V1*>(t)->SHDocVw::WebBrowser_V1::~WebBrowser_V1();
    }
    static void *Construct(void *where, const void *t)
    {
        Q_ASSERT(!t);
        Q_UNUSED(t)
        return new (where) SHDocVw::WebBrowser_V1;
    }
#ifndef QT_NO_DATASTREAM
    static void Save(QDataStream &stream, const void *t) { stream << *static_cast<const SHDocVw::WebBrowser_V1*>(t); }
    static void Load(QDataStream &stream, void *t) { stream >> *static_cast<SHDocVw::WebBrowser_V1*>(t); }
#endif // QT_NO_DATASTREAM
};

template<>
struct QMetaTypeFunctionHelper<SHDocVw::WebBrowser, /* Accepted */ true> {
    static void Delete(void *t) { delete static_cast<SHDocVw::WebBrowser*>(t); }
    static void *Create(const void *t)
    {
        Q_ASSERT(!t);
        Q_UNUSED(t)
        return new SHDocVw::WebBrowser();
    }
    static void Destruct(void *t)
    {
        Q_UNUSED(t)
        static_cast<SHDocVw::WebBrowser*>(t)->SHDocVw::WebBrowser::~WebBrowser();
    }
    static void *Construct(void *where, const void *t)
    {
        Q_ASSERT(!t);
        Q_UNUSED(t)
        return new (where) SHDocVw::WebBrowser;
    }
#ifndef QT_NO_DATASTREAM
    static void Save(QDataStream &stream, const void *t) { stream << *static_cast<const SHDocVw::WebBrowser*>(t); }
    static void Load(QDataStream &stream, void *t) { stream >> *static_cast<SHDocVw::WebBrowser*>(t); }
#endif // QT_NO_DATASTREAM
};

template<>
struct QMetaTypeFunctionHelper<SHDocVw::InternetExplorer, /* Accepted */ true> {
    static void Delete(void *t) { delete static_cast<SHDocVw::InternetExplorer*>(t); }
    static void *Create(const void *t)
    {
        Q_ASSERT(!t);
        Q_UNUSED(t)
        return new SHDocVw::InternetExplorer();
    }
    static void Destruct(void *t)
    {
        Q_UNUSED(t)
        static_cast<SHDocVw::InternetExplorer*>(t)->SHDocVw::InternetExplorer::~InternetExplorer();
    }
    static void *Construct(void *where, const void *t)
    {
        Q_ASSERT(!t);
        Q_UNUSED(t)
        return new (where) SHDocVw::InternetExplorer;
    }
#ifndef QT_NO_DATASTREAM
    static void Save(QDataStream &stream, const void *t) { stream << *static_cast<const SHDocVw::InternetExplorer*>(t); }
    static void Load(QDataStream &stream, void *t) { stream >> *static_cast<SHDocVw::InternetExplorer*>(t); }
#endif // QT_NO_DATASTREAM
};

template<>
struct QMetaTypeFunctionHelper<SHDocVw::InternetExplorerMedium, /* Accepted */ true> {
    static void Delete(void *t) { delete static_cast<SHDocVw::InternetExplorerMedium*>(t); }
    static void *Create(const void *t)
    {
        Q_ASSERT(!t);
        Q_UNUSED(t)
        return new SHDocVw::InternetExplorerMedium();
    }
    static void Destruct(void *t)
    {
        Q_UNUSED(t)
        static_cast<SHDocVw::InternetExplorerMedium*>(t)->SHDocVw::InternetExplorerMedium::~InternetExplorerMedium();
    }
    static void *Construct(void *where, const void *t)
    {
        Q_ASSERT(!t);
        Q_UNUSED(t)
        return new (where) SHDocVw::InternetExplorerMedium;
    }
#ifndef QT_NO_DATASTREAM
    static void Save(QDataStream &stream, const void *t) { stream << *static_cast<const SHDocVw::InternetExplorerMedium*>(t); }
    static void Load(QDataStream &stream, void *t) { stream >> *static_cast<SHDocVw::InternetExplorerMedium*>(t); }
#endif // QT_NO_DATASTREAM
};

template<>
struct QMetaTypeFunctionHelper<SHDocVw::ShellBrowserWindow, /* Accepted */ true> {
    static void Delete(void *t) { delete static_cast<SHDocVw::ShellBrowserWindow*>(t); }
    static void *Create(const void *t)
    {
        Q_ASSERT(!t);
        Q_UNUSED(t)
        return new SHDocVw::ShellBrowserWindow();
    }
    static void Destruct(void *t)
    {
        Q_UNUSED(t)
        static_cast<SHDocVw::ShellBrowserWindow*>(t)->SHDocVw::ShellBrowserWindow::~ShellBrowserWindow();
    }
    static void *Construct(void *where, const void *t)
    {
        Q_ASSERT(!t);
        Q_UNUSED(t)
        return new (where) SHDocVw::ShellBrowserWindow;
    }
#ifndef QT_NO_DATASTREAM
    static void Save(QDataStream &stream, const void *t) { stream << *static_cast<const SHDocVw::ShellBrowserWindow*>(t); }
    static void Load(QDataStream &stream, void *t) { stream >> *static_cast<SHDocVw::ShellBrowserWindow*>(t); }
#endif // QT_NO_DATASTREAM
};

template<>
struct QMetaTypeFunctionHelper<SHDocVw::IShellWindows, /* Accepted */ true> {
    static void Delete(void *t) { delete static_cast<SHDocVw::IShellWindows*>(t); }
    static void *Create(const void *t)
    {
        Q_ASSERT(!t);
        Q_UNUSED(t)
        return new SHDocVw::IShellWindows();
    }
    static void Destruct(void *t)
    {
        Q_UNUSED(t)
        static_cast<SHDocVw::IShellWindows*>(t)->SHDocVw::IShellWindows::~IShellWindows();
    }
    static void *Construct(void *where, const void *t)
    {
        Q_ASSERT(!t);
        Q_UNUSED(t)
        return new (where) SHDocVw::IShellWindows;
    }
#ifndef QT_NO_DATASTREAM
    static void Save(QDataStream &stream, const void *t) { stream << *static_cast<const SHDocVw::IShellWindows*>(t); }
    static void Load(QDataStream &stream, void *t) { stream >> *static_cast<SHDocVw::IShellWindows*>(t); }
#endif // QT_NO_DATASTREAM
};

template<>
struct QMetaTypeFunctionHelper<SHDocVw::ShellWindows, /* Accepted */ true> {
    static void Delete(void *t) { delete static_cast<SHDocVw::ShellWindows*>(t); }
    static void *Create(const void *t)
    {
        Q_ASSERT(!t);
        Q_UNUSED(t)
        return new SHDocVw::ShellWindows();
    }
    static void Destruct(void *t)
    {
        Q_UNUSED(t)
        static_cast<SHDocVw::ShellWindows*>(t)->SHDocVw::ShellWindows::~ShellWindows();
    }
    static void *Construct(void *where, const void *t)
    {
        Q_ASSERT(!t);
        Q_UNUSED(t)
        return new (where) SHDocVw::ShellWindows;
    }
#ifndef QT_NO_DATASTREAM
    static void Save(QDataStream &stream, const void *t) { stream << *static_cast<const SHDocVw::ShellWindows*>(t); }
    static void Load(QDataStream &stream, void *t) { stream >> *static_cast<SHDocVw::ShellWindows*>(t); }
#endif // QT_NO_DATASTREAM
};

template<>
struct QMetaTypeFunctionHelper<SHDocVw::IShellUIHelper, /* Accepted */ true> {
    static void Delete(void *t) { delete static_cast<SHDocVw::IShellUIHelper*>(t); }
    static void *Create(const void *t)
    {
        Q_ASSERT(!t);
        Q_UNUSED(t)
        return new SHDocVw::IShellUIHelper();
    }
    static void Destruct(void *t)
    {
        Q_UNUSED(t)
        static_cast<SHDocVw::IShellUIHelper*>(t)->SHDocVw::IShellUIHelper::~IShellUIHelper();
    }
    static void *Construct(void *where, const void *t)
    {
        Q_ASSERT(!t);
        Q_UNUSED(t)
        return new (where) SHDocVw::IShellUIHelper;
    }
#ifndef QT_NO_DATASTREAM
    static void Save(QDataStream &stream, const void *t) { stream << *static_cast<const SHDocVw::IShellUIHelper*>(t); }
    static void Load(QDataStream &stream, void *t) { stream >> *static_cast<SHDocVw::IShellUIHelper*>(t); }
#endif // QT_NO_DATASTREAM
};

template<>
struct QMetaTypeFunctionHelper<SHDocVw::IShellUIHelper2, /* Accepted */ true> {
    static void Delete(void *t) { delete static_cast<SHDocVw::IShellUIHelper2*>(t); }
    static void *Create(const void *t)
    {
        Q_ASSERT(!t);
        Q_UNUSED(t)
        return new SHDocVw::IShellUIHelper2();
    }
    static void Destruct(void *t)
    {
        Q_UNUSED(t)
        static_cast<SHDocVw::IShellUIHelper2*>(t)->SHDocVw::IShellUIHelper2::~IShellUIHelper2();
    }
    static void *Construct(void *where, const void *t)
    {
        Q_ASSERT(!t);
        Q_UNUSED(t)
        return new (where) SHDocVw::IShellUIHelper2;
    }
#ifndef QT_NO_DATASTREAM
    static void Save(QDataStream &stream, const void *t) { stream << *static_cast<const SHDocVw::IShellUIHelper2*>(t); }
    static void Load(QDataStream &stream, void *t) { stream >> *static_cast<SHDocVw::IShellUIHelper2*>(t); }
#endif // QT_NO_DATASTREAM
};

template<>
struct QMetaTypeFunctionHelper<SHDocVw::IShellUIHelper3, /* Accepted */ true> {
    static void Delete(void *t) { delete static_cast<SHDocVw::IShellUIHelper3*>(t); }
    static void *Create(const void *t)
    {
        Q_ASSERT(!t);
        Q_UNUSED(t)
        return new SHDocVw::IShellUIHelper3();
    }
    static void Destruct(void *t)
    {
        Q_UNUSED(t)
        static_cast<SHDocVw::IShellUIHelper3*>(t)->SHDocVw::IShellUIHelper3::~IShellUIHelper3();
    }
    static void *Construct(void *where, const void *t)
    {
        Q_ASSERT(!t);
        Q_UNUSED(t)
        return new (where) SHDocVw::IShellUIHelper3;
    }
#ifndef QT_NO_DATASTREAM
    static void Save(QDataStream &stream, const void *t) { stream << *static_cast<const SHDocVw::IShellUIHelper3*>(t); }
    static void Load(QDataStream &stream, void *t) { stream >> *static_cast<SHDocVw::IShellUIHelper3*>(t); }
#endif // QT_NO_DATASTREAM
};

template<>
struct QMetaTypeFunctionHelper<SHDocVw::IShellUIHelper4, /* Accepted */ true> {
    static void Delete(void *t) { delete static_cast<SHDocVw::IShellUIHelper4*>(t); }
    static void *Create(const void *t)
    {
        Q_ASSERT(!t);
        Q_UNUSED(t)
        return new SHDocVw::IShellUIHelper4();
    }
    static void Destruct(void *t)
    {
        Q_UNUSED(t)
        static_cast<SHDocVw::IShellUIHelper4*>(t)->SHDocVw::IShellUIHelper4::~IShellUIHelper4();
    }
    static void *Construct(void *where, const void *t)
    {
        Q_ASSERT(!t);
        Q_UNUSED(t)
        return new (where) SHDocVw::IShellUIHelper4;
    }
#ifndef QT_NO_DATASTREAM
    static void Save(QDataStream &stream, const void *t) { stream << *static_cast<const SHDocVw::IShellUIHelper4*>(t); }
    static void Load(QDataStream &stream, void *t) { stream >> *static_cast<SHDocVw::IShellUIHelper4*>(t); }
#endif // QT_NO_DATASTREAM
};

template<>
struct QMetaTypeFunctionHelper<SHDocVw::IShellUIHelper5, /* Accepted */ true> {
    static void Delete(void *t) { delete static_cast<SHDocVw::IShellUIHelper5*>(t); }
    static void *Create(const void *t)
    {
        Q_ASSERT(!t);
        Q_UNUSED(t)
        return new SHDocVw::IShellUIHelper5();
    }
    static void Destruct(void *t)
    {
        Q_UNUSED(t)
        static_cast<SHDocVw::IShellUIHelper5*>(t)->SHDocVw::IShellUIHelper5::~IShellUIHelper5();
    }
    static void *Construct(void *where, const void *t)
    {
        Q_ASSERT(!t);
        Q_UNUSED(t)
        return new (where) SHDocVw::IShellUIHelper5;
    }
#ifndef QT_NO_DATASTREAM
    static void Save(QDataStream &stream, const void *t) { stream << *static_cast<const SHDocVw::IShellUIHelper5*>(t); }
    static void Load(QDataStream &stream, void *t) { stream >> *static_cast<SHDocVw::IShellUIHelper5*>(t); }
#endif // QT_NO_DATASTREAM
};

template<>
struct QMetaTypeFunctionHelper<SHDocVw::IShellUIHelper6, /* Accepted */ true> {
    static void Delete(void *t) { delete static_cast<SHDocVw::IShellUIHelper6*>(t); }
    static void *Create(const void *t)
    {
        Q_ASSERT(!t);
        Q_UNUSED(t)
        return new SHDocVw::IShellUIHelper6();
    }
    static void Destruct(void *t)
    {
        Q_UNUSED(t)
        static_cast<SHDocVw::IShellUIHelper6*>(t)->SHDocVw::IShellUIHelper6::~IShellUIHelper6();
    }
    static void *Construct(void *where, const void *t)
    {
        Q_ASSERT(!t);
        Q_UNUSED(t)
        return new (where) SHDocVw::IShellUIHelper6;
    }
#ifndef QT_NO_DATASTREAM
    static void Save(QDataStream &stream, const void *t) { stream << *static_cast<const SHDocVw::IShellUIHelper6*>(t); }
    static void Load(QDataStream &stream, void *t) { stream >> *static_cast<SHDocVw::IShellUIHelper6*>(t); }
#endif // QT_NO_DATASTREAM
};

template<>
struct QMetaTypeFunctionHelper<SHDocVw::ShellUIHelper, /* Accepted */ true> {
    static void Delete(void *t) { delete static_cast<SHDocVw::ShellUIHelper*>(t); }
    static void *Create(const void *t)
    {
        Q_ASSERT(!t);
        Q_UNUSED(t)
        return new SHDocVw::ShellUIHelper();
    }
    static void Destruct(void *t)
    {
        Q_UNUSED(t)
        static_cast<SHDocVw::ShellUIHelper*>(t)->SHDocVw::ShellUIHelper::~ShellUIHelper();
    }
    static void *Construct(void *where, const void *t)
    {
        Q_ASSERT(!t);
        Q_UNUSED(t)
        return new (where) SHDocVw::ShellUIHelper;
    }
#ifndef QT_NO_DATASTREAM
    static void Save(QDataStream &stream, const void *t) { stream << *static_cast<const SHDocVw::ShellUIHelper*>(t); }
    static void Load(QDataStream &stream, void *t) { stream >> *static_cast<SHDocVw::ShellUIHelper*>(t); }
#endif // QT_NO_DATASTREAM
};

template<>
struct QMetaTypeFunctionHelper<SHDocVw::IShellFavoritesNameSpace, /* Accepted */ true> {
    static void Delete(void *t) { delete static_cast<SHDocVw::IShellFavoritesNameSpace*>(t); }
    static void *Create(const void *t)
    {
        Q_ASSERT(!t);
        Q_UNUSED(t)
        return new SHDocVw::IShellFavoritesNameSpace();
    }
    static void Destruct(void *t)
    {
        Q_UNUSED(t)
        static_cast<SHDocVw::IShellFavoritesNameSpace*>(t)->SHDocVw::IShellFavoritesNameSpace::~IShellFavoritesNameSpace();
    }
    static void *Construct(void *where, const void *t)
    {
        Q_ASSERT(!t);
        Q_UNUSED(t)
        return new (where) SHDocVw::IShellFavoritesNameSpace;
    }
#ifndef QT_NO_DATASTREAM
    static void Save(QDataStream &stream, const void *t) { stream << *static_cast<const SHDocVw::IShellFavoritesNameSpace*>(t); }
    static void Load(QDataStream &stream, void *t) { stream >> *static_cast<SHDocVw::IShellFavoritesNameSpace*>(t); }
#endif // QT_NO_DATASTREAM
};

template<>
struct QMetaTypeFunctionHelper<SHDocVw::IShellNameSpace, /* Accepted */ true> {
    static void Delete(void *t) { delete static_cast<SHDocVw::IShellNameSpace*>(t); }
    static void *Create(const void *t)
    {
        Q_ASSERT(!t);
        Q_UNUSED(t)
        return new SHDocVw::IShellNameSpace();
    }
    static void Destruct(void *t)
    {
        Q_UNUSED(t)
        static_cast<SHDocVw::IShellNameSpace*>(t)->SHDocVw::IShellNameSpace::~IShellNameSpace();
    }
    static void *Construct(void *where, const void *t)
    {
        Q_ASSERT(!t);
        Q_UNUSED(t)
        return new (where) SHDocVw::IShellNameSpace;
    }
#ifndef QT_NO_DATASTREAM
    static void Save(QDataStream &stream, const void *t) { stream << *static_cast<const SHDocVw::IShellNameSpace*>(t); }
    static void Load(QDataStream &stream, void *t) { stream >> *static_cast<SHDocVw::IShellNameSpace*>(t); }
#endif // QT_NO_DATASTREAM
};

template<>
struct QMetaTypeFunctionHelper<SHDocVw::ShellNameSpace, /* Accepted */ true> {
    static void Delete(void *t) { delete static_cast<SHDocVw::ShellNameSpace*>(t); }
    static void *Create(const void *t)
    {
        Q_ASSERT(!t);
        Q_UNUSED(t)
        return new SHDocVw::ShellNameSpace();
    }
    static void Destruct(void *t)
    {
        Q_UNUSED(t)
        static_cast<SHDocVw::ShellNameSpace*>(t)->SHDocVw::ShellNameSpace::~ShellNameSpace();
    }
    static void *Construct(void *where, const void *t)
    {
        Q_ASSERT(!t);
        Q_UNUSED(t)
        return new (where) SHDocVw::ShellNameSpace;
    }
#ifndef QT_NO_DATASTREAM
    static void Save(QDataStream &stream, const void *t) { stream << *static_cast<const SHDocVw::ShellNameSpace*>(t); }
    static void Load(QDataStream &stream, void *t) { stream >> *static_cast<SHDocVw::ShellNameSpace*>(t); }
#endif // QT_NO_DATASTREAM
};

template<>
struct QMetaTypeFunctionHelper<SHDocVw::IScriptErrorList, /* Accepted */ true> {
    static void Delete(void *t) { delete static_cast<SHDocVw::IScriptErrorList*>(t); }
    static void *Create(const void *t)
    {
        Q_ASSERT(!t);
        Q_UNUSED(t)
        return new SHDocVw::IScriptErrorList();
    }
    static void Destruct(void *t)
    {
        Q_UNUSED(t)
        static_cast<SHDocVw::IScriptErrorList*>(t)->SHDocVw::IScriptErrorList::~IScriptErrorList();
    }
    static void *Construct(void *where, const void *t)
    {
        Q_ASSERT(!t);
        Q_UNUSED(t)
        return new (where) SHDocVw::IScriptErrorList;
    }
#ifndef QT_NO_DATASTREAM
    static void Save(QDataStream &stream, const void *t) { stream << *static_cast<const SHDocVw::IScriptErrorList*>(t); }
    static void Load(QDataStream &stream, void *t) { stream >> *static_cast<SHDocVw::IScriptErrorList*>(t); }
#endif // QT_NO_DATASTREAM
};

template<>
struct QMetaTypeFunctionHelper<SHDocVw::CScriptErrorList, /* Accepted */ true> {
    static void Delete(void *t) { delete static_cast<SHDocVw::CScriptErrorList*>(t); }
    static void *Create(const void *t)
    {
        Q_ASSERT(!t);
        Q_UNUSED(t)
        return new SHDocVw::CScriptErrorList();
    }
    static void Destruct(void *t)
    {
        Q_UNUSED(t)
        static_cast<SHDocVw::CScriptErrorList*>(t)->SHDocVw::CScriptErrorList::~CScriptErrorList();
    }
    static void *Construct(void *where, const void *t)
    {
        Q_ASSERT(!t);
        Q_UNUSED(t)
        return new (where) SHDocVw::CScriptErrorList;
    }
#ifndef QT_NO_DATASTREAM
    static void Save(QDataStream &stream, const void *t) { stream << *static_cast<const SHDocVw::CScriptErrorList*>(t); }
    static void Load(QDataStream &stream, void *t) { stream >> *static_cast<SHDocVw::CScriptErrorList*>(t); }
#endif // QT_NO_DATASTREAM
};

} // namespace QtMetaTypePrivate
QT_END_NAMESPACE

#endif

